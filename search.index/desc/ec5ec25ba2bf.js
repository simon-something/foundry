rd_("CiCreates a new benchmark database with the given bytecode.DhCreates a new <code>Retry</code> instance with no delay between retries.CfSeal a reference to the inner item with some function.0CmGenerates new call sequence from in memory corpus. Evicts \xe2\x80\xa6BdTracks numeric identifiers for forks000BaJoin handle for the Node Service.CeNormalizes the signature into \xe2\x80\x9clow S\xe2\x80\x9d form as \xe2\x80\xa60FaIf neither <code>gas_price</code> nor <code>max_fee_per_gas</code> is <code>Some</code>, this \xe2\x80\xa6AnReturns original bytes length.0ClCheck if an ETH address contains code at a certain block \xe2\x80\xa6BfOverride a dependency in the lockfile.BhHolds mapping parent (slots =&gt; slots)EbParses the given <code>string</code> into a <code>int256</code>. Function with \xe2\x80\xa600000CkParses string input as Token against the expected ParamType0CjWhen true, only matches on the beginning of the revert \xe2\x80\xa600000CnOnly run tests in source files matching the specified glob \xe2\x80\xa600C`Address of the contract that initiated the prankCnAddress of <code>tx.origin</code> when the prank was initiatedCbPrepares single unit test and fuzz test execution:CkPrepares certain structures to execute the invariant tests:BnModule containing documentation preprocessors.AjEnable printing of traces.CkEnable printing of traces for executed transactions and \xe2\x80\xa6BcPrints the traces for the inspectorCiCalled after the inspecting the evm This will log all \xe2\x80\xa63AnUse the provided private keys.00CiCreates an entry for an internal function call in the \xe2\x80\xa6AdRoot of the project.CiReturns the root directory to use for configuring the \xe2\x80\xa6AhThe root of the project.2ChPrompts the user for a string value in the terminal. \xe2\x80\xa600000C`Opt-in access to the experimental raw entry API.DdCreates a raw immutable entry builder for the <code>IndexMap</code>.0100C`Generate a raw RLP-encoded unsigned transaction.DdReads the entire content of file to string. <code>path</code> is \xe2\x80\xa600000CnReads next line of file to string. Function with signature \xe2\x80\xa600000CkReads a symbolic link, returning the path that the link \xe2\x80\xa600000ChReads the current caller information and returns the \xe2\x80\xa6CkRead the preprocessor output variant from document context.Cm\xe2\x9a\xa0\xef\xb8\x8f Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - \xe2\x80\xa60DjRecords all storage reads and writes. Use <code>accesses</code> to get \xe2\x80\xa600000CeWhether to record every individual opcode level step.00000BiRecords a write access to a storage slot.DgRemoves a layer of <code>::Alias</code> tainting from the yielded item.0000000000000000000ClRemoves a key from the map, returning the stored key and \xe2\x80\xa6CeTake the ownership of the key and value from the map.DdRemove and return the key-value pair equivalent to <code>key</code>.CkRemove and return the key, value pair stored in the map \xe2\x80\xa6032100BbRemoves first test result, if any.CmAdds a value to the set, replacing the existing value, if \xe2\x80\xa60ClReplays the error case, shrinks the failing sequence and \xe2\x80\xa6000CkReplays all the transactions at the forks current block \xe2\x80\xa6000CnParses the passed \xe2\x80\x93auth value and sets the authorization \xe2\x80\xa6DhResolves the <code>DepIdentifier</code> for a submodule at a given path.BfResolves a DynSolType from user input.CnResolves globs and builds a mapping from individual source \xe2\x80\xa6BgA function to create new result caches.00CmMacro that matches all error instruction results. Used in \xe2\x80\xa60ChReverses the order of bits in the integer. The least \xe2\x80\xa6CfSee <code>Uint::reverse_bits</code> for documentation.10Eh<code>revertTo</code> is being deprecated in favor of <code>revertToState</code>. It \xe2\x80\xa600000AiReverts a state snapshot.BaReverts the snapshot if it exists000BgThe size of reverts in the bundle state00000CcContainer type for the return parameters of the \xe2\x80\xa6CjRotates the contents of a bit-slice to the right (away \xe2\x80\xa6DiShifts the bits to the right by a specified amount, <code>rhs</code>, \xe2\x80\xa6CfSee <code>Uint::rotate_right</code> for documentation.210CkReturns the RPC url for the given alias. Container type \xe2\x80\xa600000AfReturns the RPC to use000CnStarts the debugger TUI. Terminates the current process on \xe2\x80\xa6BmRuntime flags controlling execution behavior.000BaSize of the runtime code in bytesCnCalled when a contract has been self-destructed with funds \xe2\x80\xa6DgMarks <code>address</code> to be deleted, with funds transferred to \xe2\x80\xa6ChSelfdestruct the account by clearing its storage and \xe2\x80\xa6CkMarks the account for selfdestruction and transfers all \xe2\x80\xa6ChPerforms selfdestruct action. Transfers balance from \xe2\x80\xa611BlConsumes self and make account as destroyed.5AoSelfdestruct account, calls \xe2\x80\xa60BhImplements the SELFDESTRUCT instruction.765434724110CmSets environment variables. Container type for the return \xe2\x80\xa600000CiSets the nonce of an account. Must be higher than the \xe2\x80\xa600000AhSets the current basefeeAlReturns the current base feeBiSets the chain id and updates all walletsAiSets the coinbase addressAdSets contracts info.0DiOverwrites each element (visible in <code>.as_raw_mut_slice()</code>) \xe2\x80\xa60BeSets the finished state of the frame.0B`Marks the connection as spuriousAlCreates a test setup result.CcContainer type for the return parameters of the \xe2\x80\xa6CfInsert a key-value pair in the map at the given index.CaInsert the value into the set at the given index.CnInserts the entry\xe2\x80\x99s key and the given value into the map \xe2\x80\xa6CmInserts the given key and value into the map at the given \xe2\x80\xa63210DkRemove the key-value pair equivalent to <code>key</code> and return its \xe2\x80\xa6DiRemove the value from the set, and return <code>true</code> if it was \xe2\x80\xa6CiRemove the key, value pair stored in the map for this \xe2\x80\xa60021000CeFormats the test result into a string (for printing).AmFlag whether to build mdbook.0ChWhether to collect and display fuzzed selectors metrics.0CnThe signature of the event to filter logs by which will be \xe2\x80\xa6EeSigns <code>digest</code> with <code>privateKey</code> using the secp256r1 curve. \xe2\x80\xa600000DhSigns data with a <code>Wallet</code>. Container type for the return \xe2\x80\xa600000EeSigns <code>digest</code> with <code>privateKey</code> using the secp256k1 curve. \xe2\x80\xa600000DfSigns <code>digest</code> with signer provided to script using the \xe2\x80\xa600000000000ClMarks a test as skipped. Must be called at the top level \xe2\x80\xa600000ClMarks a test as skipped with a reason. Must be called at \xe2\x80\xa600000Eh<code>snapshot</code> is being deprecated in favor of <code>snapshotState</code>. It \xe2\x80\xa600000BaReturns the solc version, if any.ClSort import statements alphabetically in groups (a group \xe2\x80\xa6BnSorts grouped import statement alphabetically.1BgA map of source IDs to the source path.00CdSplits a mutable bit-slice in two parts at an index.BoDivides one mutable slice into two at an index.10AgCollected state values.BbReturns the stdout as lossy stringBka type that can fetch ethereum-storage dataCcReturns a new accessor for certain storage elementsChKeys of storage that would be loaded at the start of \xe2\x80\xa60BjBuilds storage root from the given storageh#ExampleBaReturn storage slot if it exists.BbReturns storage slot if it exists.10BgRemoves a prefix bit-slice, if present.0BgRemoves a suffix bit-slice, if present.0AbSubscription typesCeSwaps the position of two key-value pairs in the map.BlSwaps the position of two values in the set.BiSwaps the position of entry with another.0021000CjReturns the task manager that can be used to spawn new \xe2\x80\xa6CjA task manager that can be used to spawn additional tasks.AmAddress of the test contract.000DeExecutes <em>all</em> tests that match the given <code>filter</code>.CkTest-scoped context holding data that needs to be reset \xe2\x80\xa6000000ChOnly run test functions matching the specified regex \xe2\x80\xa600DiIndividual test results: <code>test fn signature -&gt; TestResult</code>.CcConverts the diagnostic to a readable error message000ClDecomposes a bit-pointer into its address and head-index \xe2\x80\xa60ClTokio runtime handle that\xe2\x80\x99s used to spawn futures, See \xe2\x80\xa6B`The handle to the tokio runtime.0BcReturns filtered traces over blocksCgExecute transaction and store state inside journal. \xe2\x80\xa600000CmPerforms a raw call to an account on the current state of \xe2\x80\xa600CkMapping from the transaction hash to a tuple containing \xe2\x80\xa6ClReturns an iterator over all transactions in the waiting \xe2\x80\xa6CbReturns the transactions generated from this call.BnScripted transactions generated from this call10CjReturns the list of the transactions without the metadata.AjWrappers for transactions.32BjHelper function that returns all accounts.0CiBuilds iterator over stored key-value pairs ready for \xe2\x80\xa6CmPerforms a foreign function call via terminal and returns \xe2\x80\xa600000ChAttempts to convert a regular vector in-place into a \xe2\x80\xa60ChGet the transaction and local context. It is used to \xe2\x80\xa600000CfReturns the time since unix epoch in milliseconds. \xe2\x80\xa600000AgUnmarks the touch flag.0DiComputes the absolute value of <code>self</code> without any wrapping \xe2\x80\xa60AgReturns the right value0B`Updates the block forked off \xe2\x80\xa6CmUpdates block number and timestamp of given fork with new \xe2\x80\xa600ClUpdate fork block number and timestamp. Used to preserve \xe2\x80\xa61CjHelper method which updates data in the state with the \xe2\x80\xa6000CfValidates block, transaction and configuration fields.0CkValidates the execution environment including block and \xe2\x80\xa6110CdValidates the transaction against a specific accountBmThe verifier URL, if using a custom provider.ClUtility cheatcode to mark specific storage slot as warm, \xe2\x80\xa600000AbWarms the account.00000DgCalculates the complete product <code>self * rhs</code> without the \xe2\x80\xa60AlWhether to wipe the storage.lWipe storage11010110CiSets the ABI to use for error decoding, if it is present.000CnCreates a new <code>AccountInfo</code> with the given balance.0BiSet content and identity on the Document.CdExtract project paths that cannot be remapped by \xe2\x80\xa6BmInitialises the balance of the given accountsBdSets the init genesis (genesis.json)AnSet the URL for the transport.BfSets whether to enable Odyssey supportCkPopulates storage from an iterator of storage slots and \xe2\x80\xa60BbSet the timeout for the transport.CoConfigures the <code>Tracer</code> <code>revm::Inspector</code>AnSets whether to enable tracingBfSet the transaction type to filter by.CjReturn creation bytecode without constructor arguments \xe2\x80\xa6CoStrips the <code>Bytecode</code> from this account and drop it.0DgWrapping absolute value. Computes <code>self.abs()</code>, wrapping \xe2\x80\xa60CkAdjusts a bit-pointer upwards in memory, using wrapping \xe2\x80\xa6DhComputes <code>self + rhs</code>, wrapping around at the boundary of \xe2\x80\xa6DkWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping \xe2\x80\xa6210BoComputes <code>self / rhs</code> rounding down.DkWrapping (modular) division. Computes <code>self / rhs</code>, wrapping \xe2\x80\xa610DhComputes <code>self * rhs</code>, wrapping around at the boundary of \xe2\x80\xa6DhWrapping (modular) multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa610DgComputes <code>-self</code>, wrapping around at the boundary of the \xe2\x80\xa6DfWrapping (modular) negation. Computes <code>-self</code>, wrapping \xe2\x80\xa610DdRaises self to the power of <code>exp</code>, wrapping around on \xe2\x80\xa6DhRaises self to the power of <code>exp</code>, wrapping around at the \xe2\x80\xa610BaComputes <code>self % rhs</code>.DcWrapping (modular) remainder. Computes <code>self % rhs</code>, \xe2\x80\xa610BdLeft shift by <code>rhs</code> bits.E`Wrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if \xe2\x80\xa6CfSee <code>Uint::wrapping_shl</code> for documentation.210BeRight shift by <code>rhs</code> bits.EaWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if \xe2\x80\xa6CfSee <code>Uint::wrapping_shr</code> for documentation.210CmAdjusts a bit-pointer downwards in memory, using wrapping \xe2\x80\xa6DhComputes <code>self - rhs</code>, wrapping around at the boundary of \xe2\x80\xa6DeWrapping (modular) subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa6210CeWrites text in italics to the buffer formatted as \xe2\x80\xa6BkWrite R and S to an RLP buffer in progress.0AgWrite a styled fragment0AhWrite a styled fragment.1DbInput length for the add operation. <code>ADD</code> takes two \xe2\x80\xa60CcArrow Glacier hard fork Activated at block 13773000C`String identifier for the Arrow Glacier hardfork10CiThe result of a <code>stopAndReturnStateDiff</code> call.00000ClAssumption is that Revert can return full state from any \xe2\x80\xa600000CbAccount status flags. Generated by bitflags crate.CnAccountStatus represents the various states an account can \xe2\x80\xa6001000CmUsed to mark account that is warm inside EVM in regard to \xe2\x80\xa60000000BbRetrieves the Anvil node metadata.AlEIP-7702 Authorization type.BcAn unsigned EIP-7702 authorization.111011CmBalance changed Action: Balance changed Revert: Revert to \xe2\x80\xa60000000CnThrown during estimate if caller has insufficient funds to \xe2\x80\xa6AbBit-Slice Indexing0DkA Future that will execute a given <code>task</code> for each new block \xe2\x80\xa6CaA type that exclusively mines one block at a timeCgAccount information focused on creating of database \xe2\x80\xa600000CbThis builder is used to help to facilitate the \xe2\x80\xa6000AcA node in the arena00CjBuilder type constructing TransactionRequest from cast \xe2\x80\xa6CkManages user modifications that may affect the node\xe2\x80\x99s \xe2\x80\xa6AoBuiltin chisel command variantsAeA Chisel REPL SessionCnCloneMetadata stores the metadata that are not included by \xe2\x80\xa6AiA command descriptor typeBcA Command Failed with error messageCfState after we have determined and compiled target \xe2\x80\xa6CbContainer for all the <code>Console</code> events.00CfRepresents the outcome of a create operation in an \xe2\x80\xa6000BbGas cost for DATALOAD instruction.0CeDatabase error marker is needed to implement From \xe2\x80\xa60000000BgWhen an error occurred during executionDdErrors that can happen when working with <code>revm::Database</code>0000ClA super verbose reporter for debugging coverage while it \xe2\x80\xa6EfThe default <code>Hasher</code> used by <code>HashMap</code> and <code>HashSet</code>.DaThe default <code>Hasher</code> used by <code>RandomState</code>.10CmIdentifies whether a dependency (submodule) is referenced \xe2\x80\xa60oDeprecated key.0DgA disabled formatting range. <code>loose</code> designates that the \xe2\x80\xa60CjThe prefix used for hashing messages according to EIP-191.0BbEIP-7702 Version Magic in u16 form0CiTrait for lints that operate directly on the AST. Its \xe2\x80\xa60BiState after the script has been executed.CnContainer for data we need for execution which can only be \xe2\x80\xa6CnStores the forge execution context for the duration of the \xe2\x80\xa6Df<code>BuildHasher</code> optimized for hashing fixed-size byte arrays.0BoCLI arguments for <code>cast find-block</code>.CfContains cached state fetched to serve EthApi requestsCdGet the event signature for a given topic 0 from \xe2\x80\xa6BkError for <code>TryFrom&lt;Uint&gt;</code>.0AmConfigures file system accessAfTimer for a fuzz test.00BiThe <code>FxHasher</code> hasher builder.EcAn implementation of <code>BuildHasher</code> that produces <code>FxHasher</code>s.10DjType alias for a hashmap using the <code>fx</code> hash algorithm with \xe2\x80\xa60000000Eb<code>FxRandomState</code> is an alternative state for <code>HashMap</code> types.0Ef<code>FxSeededState</code> is an alternative state for <code>HashMap</code> types, \xe2\x80\xa60AjGitSource preprocessor id.0A`Genesis settingsCaReturns the blob for a given blob versioned hash.CdProvides random hex identifier with a certain lengthBdStyle of underscores in hex literals0AnThe base cost of the operation0Bh<code>Inheritdoc</code> preprocessor ID.0CdContains locations of traces ignored via cheatcodes.CeThe collected results of <code>InspectorStack</code>.000BnCLI arguments for <code>cast interface</code>.AkAn internal error occurred.Acinternal call errorDbErrors related to misconfiguration of a <code>crate::Block</code>.0BbInvalid length of the raw bytecode0Aiinvalid method parameter.oInvalid parity.0AmContains invariant test data.0Cf<code>invariant*</code> or <code>statefulFuzz*</code>.1BlGas cost per word for KECCAK256 instruction.0AnPerform an ENS reverse lookup.BlThe max length of arrays we fuzz for is 256.BaEIP-170: Contract code size limitCkBy default the limit is <code>0xC000</code> (49_152 bytes).0100DiInput length for the multiplication operation. <code>MUL</code> takes \xe2\x80\xa60CmSoldeer dependencies config structure when it\xe2\x80\x99s defined \xe2\x80\xa6ChThe error produced when an address is insufficiently \xe2\x80\xa60CfOpt-in mutable access to <code>IndexSet</code> values.0ClA visitor which collect all expression to mutate as well \xe2\x80\xa6CcDummy Inspector, helpful as standalone replacement.0CfReturned if the nonce of a transaction is too high \xe2\x80\xa6oNonce overflow.000DjA view into an occupied entry in a <code>HashMap</code>. It is part of \xe2\x80\xa6DiA view into an occupied entry in an <code>IndexMap</code>. It is part \xe2\x80\xa6DjA view into an occupied entry in a <code>HashSet</code>. It is part of \xe2\x80\xa6210DfThe error returned by <code>try_insert</code> when the key already \xe2\x80\xa60AbOut of gas errors.0oParser context.CePartial header definition without ommers hash and \xe2\x80\xa6C`Signers that require user action to be obtained.CjOut of gas error encountered during the execution of a \xe2\x80\xa60CdContains additional context and tracks subscriptions0AiThe result of a raw call.00C`Opt-in access to the experimental raw entry API.000DiA wrapper for the raw data options for <code>Wallet</code>, extracted \xe2\x80\xa6C`CLI arguments for <code>forge remappings</code>.BfHow to initialize a remote git projectAbRequest parametersBfHelper type alias for a retry providerAdDecodes revert data.000BhA JSON-RPC request object, a method callCiSCALAR_LENGTH specifies the number of bytes needed to \xe2\x80\xa60CjThe short version message information for the Foundry CLI.BiVarious <code>forge</code> script results0CfFilter for acceptable senders to use for invariant \xe2\x80\xa6000AkREPL Session Source wrapperCnA cloneable backend type that shares access to the backend \xe2\x80\xa6000AgStorage slot diff info.AkThe Soldeer config options.BmAttempting to push a value onto a full stack.000CkA minimal abstraction of a state at a certain point in time0000CjThe storage accessed during an <code>AccountAccess</code>.00000CkRepresents the storage layout of a contract and its values.oStorage reverts0CkEntry used to track storage warming introduced by EIP-2929.0000000ClA single struct definition for which we need to generate \xe2\x80\xa6CdRepresents the outcome of instruction execution, \xe2\x80\xa60BlReason a transaction successfully completed.0CiAPI for executing the system calls. System calls dont \xe2\x80\xa600000CiGlobal default template lock. If its contents are not \xe2\x80\xa6CnGlobal default template path. Contains the global template \xe2\x80\xa6AgHandles terminal state.BlCloneable wrapper around TestsProgressState.AjEIP-3155 tracer Inspector.0AlTransfer and creation result0CmReturns the details of all transactions currently pending \xe2\x80\xa6CgReturns a summary of all the transactions currently \xe2\x80\xa6BmValue tree for unsigned ints (up to uint256).CnFor an unary operator x in UnOpKind (eg \xe2\x80\x9c++\xe2\x80\x9d, \xe2\x80\x9c\xe2\x80\x93\xe2\x80\x9d\xe2\x80\xa6ChVisitor that collects all used symbols in a source unit.BoNegative values can not be represented as Uint.0BcValue is too large to fit the Uint.0BbA trait to match vanity addresses.CnAbsolute jumps require checking for overflow and if target \xe2\x80\xa60E`Returns fresh <code>AccountInfo</code>s for the configured <code>accounts</code>CjIf account is selfdestructed or newly created, storage \xe2\x80\xa6000CnThe currently active buffer (memory, calldata, returndata) \xe2\x80\xa6CgAdds the specified selectors to the targeted functions.00BkReturns the precompiles addresses as a set.0BgReturns all the mutable coverage items.00CmWhether to allow test failures without failing the entire \xe2\x80\xa6BfExit with code 0 even if a test fails.CiPaths (directories) where file reading/writing is allowed000000CaSpecify the <code>alloy</code> version on Crates.ChReturns the root path to anvil\xe2\x80\x99s temporary storage \xe2\x80\xa6BgApplies the configured genesis settingsB`Returns the arbitrum nova chain.CnGets a raw, write-capable pointer to the zeroth bit of the \xe2\x80\xa6CnCreates an unsafe writable bit-pointer to the start of the \xe2\x80\xa610EeConverts from <code>&amp;Sealed&lt;T&gt;</code> to <code>Sealed&lt;&amp;T&gt;</code>.0DhFunction with signature <code>balanceOf(address)</code> and selector \xe2\x80\xa6BeSearch over a sorted set for a value.000DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.AbBoolean Arithmetic10DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6101CcContainer type for the return parameters of the \xe2\x80\xa6B`Returns the blast sepolia chain.CmReturns the base fee per blob required to send a EIP-4844 \xe2\x80\xa6BaBlob gas used of the forked blockCeCumulative blob gas used by all executed transactionsBiBlob gas used by the eip-4844 transactionCaSee EIP-4844 and <code>calc_blob_gasprice</code>.00DgThe calculated blob gas price based on the <code>excess_blob_gas</code>0AnBlock blob gasprice, calls \xe2\x80\xa602221100AnReturns block with given hash.FaReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</codenSets up broadcasting from a script with the sender derived \xe2\x80\xa6CcBuilds a mainnet EVM instance without an inspector.000CmBuild ScriptRunner forking given RPC for each RPC used in \xe2\x80\xa6BnReturns the temporary dir for the cached stateBeWhether to include the metadata hash.BgAll the bytecode hits for the codebase.00CdSee: https://eips.ethereum.org/EIPS/eip-198 See: \xe2\x80\xa60AmCache account representation.0CdCalculates gas cost and limit for call instructions.0CjAllows overriding an unsafe external call when running \xe2\x80\xa60AhRecorded counterexample.CjExecute the transaction configured in <code>env.tx</code>.00CdWhether to append the metadata hash to the bytecode.DbSets <code>block.chainid</code>. Container type for the return \xe2\x80\xa600000CjReturns the base 10 logarithm of the number, rounded down.0CnCopies bytecode, storage, nonce and balance from the given \xe2\x80\xa60000000CnCloses file for reading, resetting the offset and allowing \xe2\x80\xa600000BoReturns a compatibility <code>RpcHandler</code>ClReturns a list of all the configuration values available \xe2\x80\xa6CiConfigures the environment for the given chain id and \xe2\x80\xa60000CiThe number of confirmations until the receipt is fetched.ChThe number of confirmations until the receipt is fetchedBmReturns <code>true</code> if no bits are set.BoReturns <code>true</code> if the value is zero.10BeThe contract this source range is in.AkContract name if it exists.AaThe contract name2BmReturns the contract name of the artifact ID.BbContract name for test generation.CjName of the contract containing the struct definition. \xe2\x80\xa645BfThe name of the contract being walked.5CbReturns the deployed or init size of the contract.CmTakes a block as it\xe2\x80\x99s stored internally and returns the \xe2\x80\xa6CkInitialises the test contracts by copying them into the \xe2\x80\xa6BfCalculate the cost of buffer per word.0BjThe license of the Rust crate to generate.BjThe version of the Rust crate to generate.0CmCreates a new, empty directory at the provided path. This \xe2\x80\xa600000BoConsume Self and create account revert from it.0BgWhether deployed with CREATE or CREATE2CmUsing a given private key, return its public ETH address, \xe2\x80\xa6Cjtracks all the created forks Contains the index of the \xe2\x80\xa6000ClReturns a tuple of mutable references to the context and \xe2\x80\xa60AiReturns the current blockBeReturns balance of the given account.BoReturns the current, standalone state of the DbBmOverride the debug handler with a custom one.C`Decodes traces in the ChiselResult TODO: Add \xe2\x80\xa6BhImplements the DELEGATECALL instruction.0CdWhether the prank should be applied to delegate callBfWarnings will trigger a compiler error0CbWhen true, compiler warnings are treated as errorsCgCreate a deployment tx using the provided tokens as \xe2\x80\xa6CkAddresses of external libraries deployed in test setup, \xe2\x80\xa6CfAddresses of external libraries deployed during setup.111CbDisable recording of individual opcode level steps000CdDiscards the outer cache and return the inner cache.0BlDisplays a chain of errors in a single line.BoCurrent start pointer for parsing doc comments.ClDrain balance from account and return drained amount and \xe2\x80\xa60AaRemote DestructorBjRuns the destructor of the referent value.10DkDump a genesis JSON file\xe2\x80\x99s <code>allocs</code> to disk. Function with \xe2\x80\xa600000AkFunction with signature \xe2\x80\xa60C`The edge coverage info collected during the call00BkEmit a diagnostic with a code fix proposal.AiEncodes the receipt data.EgGets the environment variable <code>name</code> and parses it as <code>bool</code>. \xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000DjGets the environment variable <code>name</code> and returns true if it \xe2\x80\xa600000222222EhGets the environment variable <code>name</code> and parses it as <code>uint256</code>\xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>int256</code>.00000EhGets the environment variable <code>name</code> and parses it as <code>address</code>\xe2\x80\xa600000EhGets the environment variable <code>name</code> and parses it as <code>bytes32</code>\xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>string</code>.00000EhGets the environment variable <code>name</code> and parses it as <code>bytes</code>. \xe2\x80\xa600000777777777777777777555555777777AmReturns the current gas priceBkReturn the mutable current Journaled state.0CbDeny specific lints based on their ID (e.g. \xe2\x80\x9c\xe2\x80\xa6AiAll paths to also excludeCbWhether to exclude tests from the coverage report.AiAll tests to also excludeBfExecutes all the tests in the project.CfFactor out a homogeneous type from an either of pairs.0ClIf simulation is enabled, simulates transactions against \xe2\x80\xa6CgHelper to filter ParameterList to omit empty parametersCcPad and squeeze the state into <code>output</code>.0CnReturns the path of the top-level directory of the working \xe2\x80\xa6B`Returns the flare testnet chain.CfCreates a new command that is set to use the forge \xe2\x80\xa6Cmspecifies chain id for cache to skip fetching from remote \xe2\x80\xa6CnSpecify chain id to skip fetching it from remote endpoint. \xe2\x80\xa61CiHelper function that formats solidity source with the \xe2\x80\xa6D`Pretty-prints a slice of tokens using <code>format_token</code>.0CdConverts a big-endian byte array of size exactly \xe2\x80\xa60CgSee <code>Uint::from_be_bytes</code> for documentation.110CgCreates a new integer from a big endian slice of bytes.0CfCopies the contents of a bit-slice into a new heap \xe2\x80\xa6ChCopies a bit-slice region into a new bit-box allocation.10DdInitializes an <code>AccountInfo</code> with the given bytecode, \xe2\x80\xa60CgConverts a little-endian byte array of size exactly \xe2\x80\xa6BbConvert from an array in LE formatCgSee <code>Uint::from_le_bytes</code> for documentation.210CjCreates a new integer from a little endian slice of bytes.0EjSer/de <code>globset::Glob</code> explicitly to handle <code>Option&lt;Glob&gt;</code> \xe2\x80\xa6EgAttempts to extract a <code>Config</code> from <code>provider</code>, returning the \xe2\x80\xa6AlThe number of functions hit.00CkGiven a function, it returns a strategy which generates \xe2\x80\xa6000AkDefined fuzz test fixtures.BdCollect fixtures from test contract.ClDEPRECATED: The amount of gas used for memory expansion. \xe2\x80\xa600000AjReturns the remaining gas.0CiContains gas snapshots made over the course of a test \xe2\x80\xa60CkAny captured gas snapshots along the test\xe2\x80\x99s execution \xe2\x80\xa611111CnGets the creation bytecode from an artifact file. Takes in \xe2\x80\xa600000DgReturns the <code>alloy</code> dependency string for the Cargo.toml \xe2\x80\xa6E`This returns the <code>file name</code> part, See <code>get_contract_name</code>CeReturn item index, mutable reference to key and valueCdReturn item index and mutable reference to the value10AkReturns the base fee to useAmGet a key-value pair by indexCmGet a key-value pair by index, with mutable access to the \xe2\x80\xa610CnCore trait method accepting mutable reference to Cheatcodes\xe2\x80\xa6000ClReturns the key-value pair corresponding to the supplied \xe2\x80\xa6DkReturn references to the key-value pair stored for <code>key</code>, if \xe2\x80\xa6CkGets a reference to the entry\xe2\x80\x99s key and value in the map.210CmInspects Solc compiler output for documentation comments. \xe2\x80\xa6DkInserts the given <code>value</code> into the set if it is not present, \xe2\x80\xa60CkReturns a mutable slice of key-value pairs in the given \xe2\x80\xa6000CbGet the source ID for a specific source file path.00ChImmutably indexes into a bit-slice without doing any \xe2\x80\xa6CnGets a reference to a single bit or to a subsection of the \xe2\x80\xa6DcReturns a mutable reference to the type <code>T</code>, without \xe2\x80\xa6021DkInstall the given dependency as git submodule in <code>target_dir</code>\xe2\x80\xa6DkReturns the globally shared randomly initialized <code>SharedSeed</code>\xe2\x80\xa60BmIf configured, this will print sizes or namesCjCore logic for handling reverts that may or may not be \xe2\x80\xa6CmWhen a <code>REVERT</code> opcode with zero data size occurs:Cmlabels the traces, conditionally prints them or opens the \xe2\x80\xa60AjReturns the http endpoint.DdConstructs a <code>RetryProvider</code> for this handle\xe2\x80\x99s HTTP \xe2\x80\xa6ClIdentifies the artifact based on score computed for both \xe2\x80\xa600Cmadditional solc include paths for <code>--include-path</code>BiWhether to include gas reports for tests.BjJumps forward in time by the given secondsDiReturns the index of the first occurrence of a <code>key</code> in an \xe2\x80\xa600000DhInitialises <code>root</code> as a git repository, if it isn\xe2\x80\x99t one \xe2\x80\xa6BbEIP-3860: Limit and meter initcode0AeInline configuration.CeReturns the configuration for a contract or function.AeParsed inline config.0CnInsert a key-value pair in the map before the entry at the \xe2\x80\xa6CiInsert the value into the set before the value at the \xe2\x80\xa610CnInsert a key-value pair in the map at its ordered position \xe2\x80\xa6CiInsert the value into the set at its ordered position \xe2\x80\xa6CnInserts the entry\xe2\x80\x99s key and the given value into the map \xe2\x80\xa6210CaReturns a mutable reference to the EVM inspector.00CdConverts the raw bytecode into an analyzed bytecode.0CcWraps <code>self</code> in a <code>BitArray</code>.000CgViews the underlying bit-slice as a subslice of the \xe2\x80\xa6CjConverts the partial element into a bit-slice over its \xe2\x80\xa610CgConsume and convert into a <code>LogData</code> object.0DdReturns true if <code>forge</code> command was executed in given \xe2\x80\xa600000BdReturns true if the call is a create00CfTrue if a mutator can be applied to an expression/nodeCnMatch is the expr is an assign with a var definiton having \xe2\x80\xa6DgReturns <code>true</code> if the trace kind is <code>Deployment</code>.00CeReturns <code>true</code> if the account has no code.00DiReturns <code>true</code> if the given specification ID is enabled in \xe2\x80\xa60ChTakes a u8 and returns true if it is a jump instruction.0AnCheck if a string is mixedCaseClReturns true if the given account is currently marked as \xe2\x80\xa6000BnReturns true if this is a call to a precompile00ChTakes a u8 and returns true if it is a push instruction.0DgReturns <code>true</code> whether this signer can sign for this addressCkReturns <code>true</code> if this function is a table test.CjReturns an iterator over coverage items by source file \xe2\x80\xa600EfChecks if <code>key</code> exists in a JSON object <code>keyExists</code> is being \xe2\x80\xa600000BmUse the keystore in the given folder or file.CmCache of the amount of gas used in previous call. This is \xe2\x80\xa6AjReturns the last gas cost.0AoThe gas used in the last frame.CnSaves the sequence of generated calls that can be replayed \xe2\x80\xa6000CmCounts the number of bits from the start of the bit-slice \xe2\x80\xa6CeReturns the number of leading zeros in the binary \xe2\x80\xa60CgSee <code>Uint::leading_zeros</code> for documentation.2110EfApply the function <code>f</code> on the value in the <code>Left</code> variant if \xe2\x80\xa60EbReturns <code>true</code> if the <code>new_size</code> for the current context \xe2\x80\xa60C`The line coverage info collected during the callCkThe coverage info collected during the invariant test runs.AfRaw line coverage infoCaSet whether to collect line coverage information.BoWhether line coverage info should be collected.2BeWhether to collect line coverage infoBlWhether or not to collect line coverage info324656552324B`Returns the linea sepolia chain.CgWhether to run linting during <code>forge build</code>.BcLists all available cached sessionsCnLoads access list and beneficiary account, marking them as \xe2\x80\xa60CeLoads and warms accounts for execution, including \xe2\x80\xa6110DfReturns the <code>revm::Env</code> configured with only local settings0AnAbsolute path to the lockfile.0CcContainer type for the return parameters of the \xe2\x80\xa600DkContainer type for the return parameters of the <code>log(string)</code>\xe2\x80\xa600111111111111111111111111111111111111111111111111111DkContainer type for the return parameters of the <code>log(bytes7)</code>\xe2\x80\xa600222DkContainer type for the return parameters of the <code>log(bytes8)</code>\xe2\x80\xa600333333333333DfContainer type for the return parameters of the <code>log()</code> \xe2\x80\xa600444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444DkContainer type for the return parameters of the <code>log(bytes1)</code>\xe2\x80\xa600555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555DkContainer type for the return parameters of the <code>log(bytes9)</code>\xe2\x80\xa600666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666DkContainer type for the return parameters of the <code>log(bytes5)</code>\xe2\x80\xa600777777777777777777777777777777777777DkContainer type for the return parameters of the <code>log(bytes6)</code>\xe2\x80\xa600888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888DkContainer type for the return parameters of the <code>log(bytes4)</code>\xe2\x80\xa600999999999999999999999999999999999999DkContainer type for the return parameters of the <code>log(bytes2)</code>\xe2\x80\xa600::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::BjCollects all <code>console.sol</code> logsDfEvent with signature <code>log_named_int(string,int256)</code> and \xe2\x80\xa600CgBLS12-381 map fp2 to g2 precompile. More details in \xe2\x80\xa6CmField-to-curve call expects 128 bytes as an input that is \xe2\x80\xa610nMapping slots.000000BbMarks as dependency as overridden.CdReturns the maximum code size for the given spec id.0000000CkReturns the maximum initcode size, excluding dev contracts.DhSets http headers. If <code>None</code>, defaults to the already-set \xe2\x80\xa6BnReturns the median of a <em>sorted</em> slice.BgReturns the length of the memory range.0CdThe range in memory where the output data is located000CmCommon logic for copying data from a source buffer to the \xe2\x80\xa60CnGenerates a BIP39 mnemonic phrase from a given seed Cannot \xe2\x80\xa6AgModel checker settings.ClReturns true if client is actively listening for network \xe2\x80\xa6BgWhether we\xe2\x80\x99re listening for RPC callsAhCreates a new allocator.0DjCreates a new instance of a Tester for the <code>broadcast</code> test \xe2\x80\xa6BbCreates account that is destroyed.0BhCreates new transaction for system call.000CnInstantiates a new opcode from a u8 without checking if it \xe2\x80\xa6DiWraps a counter value as an assumed-good index into an <code>R</code> \xe2\x80\xa6ClWraps a counter value as an assumed-good position within \xe2\x80\xa6DkWraps a selector value as an assumed-good selection in an <code>R</code>\xe2\x80\xa6DdConstructs a <code>BitPtr</code> from an address and head index, \xe2\x80\xa6CiCreates a new signed authorization from raw signature \xe2\x80\xa6CkInstantiate without performing recovery. This should be \xe2\x80\xa6CkCreates a new log, without length-checking. This allows \xe2\x80\xa6AbCreates a new log.CkInstantiate without performing the hash. This should be \xe2\x80\xa6BiCreates a new <code>Unit</code> instance.54:98763210DiCreates a new instance of <code>Backend</code> with fork added to the \xe2\x80\xa6CiCreates new <code>ExtBytecode</code> with the given hash.0DfCreate new <code>CfgEnv</code> with default values and specified spec.0AfNewly created account.0ChReturns the timestamp after which a filter should expireCbDisables rate limiting for this node\xe2\x80\x99s provider.0ClCreates a journal entry for when an account\xe2\x80\x99s nonce is \xe2\x80\xa600000BeNotifications emitted from the backedEnReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code`Returns the opbnb mainnet chain.B`Returns the opbnb testnet chain.CbOriginal account information before modifications.00000BdGets the output format of the shell.BeThe format to use for message output.CnOverrides an external call and tries to call any method of \xe2\x80\xa6CcReturns the <code>Action</code> for a parity trace.00DhReturns the traces of the transaction for <code>trace_transaction</code>E`Parses the given <code>string</code> into a <code>bool</code>. Function with \xe2\x80\xa600000EcParses the given <code>string</code> into a <code>uint256</code>. Function with \xe2\x80\xa600000C`Parses given serde_json::Value as a DynSolValue.ChIf true then only the first 4 bytes of expected data \xe2\x80\xa60AiStores paused gas frames.AiCreates the pending blockBhReturns the pending block with tx hashesAmPlain account representation.0EdSets the <em>next</em> call\xe2\x80\x99s <code>msg.sender</code> to be the input address. \xe2\x80\xa600000EdSets the <em>next</em> call\xe2\x80\x99s <code>msg.sender</code> to be the input address, \xe2\x80\xa600000EdSets the <em>next</em> delegate call\xe2\x80\x99s <code>msg.sender</code> to be the input \xe2\x80\xa600000000000C`Handles related to the main function of the EVM.BePrepares the EVM state for execution.0100C`Returns true whether the block predates the forkCfPrepends present the state with the given BundleState.0BdThe array of preprocessors to apply.0BnReturns the current value of the storage slot.BaPresent value of the storage slotAlCurrent value of the storage2CkWhen loaded with sload present value is set to original \xe2\x80\xa6013230011AoThe previous value of the slot.00000ChPrevious account info is needed for account that got \xe2\x80\xa600000DbReturns the <code>ProjectPathsConfig</code> sub set of the config.CdSource, test and script configured project dirs. \xe2\x80\xa60ClProve a storage key\xe2\x80\x99s existence or nonexistence in the \xe2\x80\xa6BhConfigures how to remove historic state.ClDon\xe2\x80\x99t keep full chain history. If a number argument is \xe2\x80\xa61ChRemoves ready transactions for the given iterator of \xe2\x80\xa6CfPrunes the transactions that provide the given markersBfAdds a single function to the decoder.00BlReturns an iterator of quoted string ranges.BcThe weight for purely random values000AbRaw base gas priceCkIterates over non-overlapping subslices of a bit-slice, \xe2\x80\xa60ClReads the directory at the given path recursively, up to \xe2\x80\xa600000CmSee <code>readDir(string)</code>. Function with signature \xe2\x80\xa600000000000AhSingle-Bit Volatile ReadClReads the bit from <code>*self</code> using a volatile load.10AgRecords a refund value.0mRecorded logs000000BdIf true, command output is redacted.CfRelative jumps does not require checking for overflow.0ClRemoves a directory at the provided path. This cheatcode \xe2\x80\xa600000FdReplaces occurrences of <code>from</code> in the given <code>string</code> with <code>to</code>. \xe2\x80\xa600000CnRemoves the specified range in the string, and replaces it \xe2\x80\xa60BoReplay the transaction and commit to the state.00000BbReturns the nonce for this requestDgEnsures that the bit-vector has allocation capacity for <em>at </em>\xe2\x80\xa6DfReserve capacity for <code>additional</code> more key-value pairs, \xe2\x80\xa6DeReserve capacity for <code>additional</code> more values, without \xe2\x80\xa6DfReserves the minimum capacity for at least <code>additional</code> \xe2\x80\xa63210CkResizes the interpreterreter memory if necessary. Fails \xe2\x80\xa6DkResize memory and return range of memory. If <code>len</code> is 0 dont \xe2\x80\xa610CjGoes over entire trace arena and removes ignored trace \xe2\x80\xa6AfInitial retry backoff.CgHandles the result of a CREATE operation, including \xe2\x80\xa60BhThe return reason of the offending call.CnProcesses a frame result and updates the interpreter state \xe2\x80\xa60CnMacro that matches all revert instruction results. Used in \xe2\x80\xa60CcReverts the state changes of the latest transition.0BbThe latest revert reason of a run.0CiThe revert reason string if the transaction status is \xe2\x80\xa611BhThe revert string of the offending call.CaReturns right value or computes it from a closure0CnRight-pads the given slice with zeroes until <code>len</code>.0BnComputes the RIPEMD-160 hash of the input data0CkThe RNG algorithm to use when not using a user-provided \xe2\x80\xa600B`Returns the ronin testnet chain.DgReturns all rpc urls and their aliases <code>[alias, url][]</code>. \xe2\x80\xa600000BeAll known endpoints and their aliases00000BhMultiple rpc endpoints and their aliases1BhExecutes the main frame processing loop.000CmHelper function that returns the body of the REPL contract\xe2\x80\xa6AcRuns a fuzzed test.AhRuns a single unit test.CkSample typed values that are collected from call result \xe2\x80\xa6hExamples0ClSeal a borrowed object by calculating the hash. This may \xe2\x80\xa60Amcustom serde helper functionsBfMisc Serde helpers for foundry crates.AkHow to configure the server0CmSet RNG seed. Container type for the return parameters of \xe2\x80\xa600000BbSets the BlockEnv of this instance000BkSet the blockhash for a given block number.000EbSets the <code>AccountInfo</code> <code>code_hash</code> and clears any cached \xe2\x80\xa60CkHelper function to set / unset cold storage slot of the \xe2\x80\xa6AhSets the block gas limitBmSets the gas limit for calls and deployments.00AbSets the gas priceAmReturns the current gas priceBoSets the gas price for the relevant inspectors.00AnSet the inspector for the EVM.000ChWrites a new value into a single bit, without bounds \xe2\x80\xa60AhSet the verbosity level.AiSets the verbosity level.CiConfigures everything related to forking based on the \xe2\x80\xa6CmClones a SessionSource without copying the GeneratedOutput\xe2\x80\xa6BnWhether the given contract should be reported.AmShow test execution progress.BhWhether to show test execution progress.BhWhether to display sequence as solidity.0BiDisplay counterexample as solidity calls.01BoReleases excess capacity back to the allocator.CkShrinks the capacity of the map as much as possible. It \xe2\x80\xa6CcShrink the capacity of the map as much as possible.CcShrink the capacity of the set as much as possible.CkShrinks the capacity of the set as much as possible. It \xe2\x80\xa6DeShrinks the capacity of this <code>String</code> to match its length.543210CmRandomly shuffles an array. Container type for the return \xe2\x80\xa600000ChReturns the result for single test. Merges execution \xe2\x80\xa6B`SolMacroGen and MultiSolMacroGenClReturns configuration for a compiler to use when setting \xe2\x80\xa6DmReturns the configured <code>solc</code> <code>Settings</code> that includes:CcSorts all receipts with ascending transaction indexCbSort the set\xe2\x80\x99s values by their default ordering.0CmMap over build_id -&gt; file_id -&gt; (source code, language)000CfReturns the range of the given span in the source map.F`<em>Spawns</em> a new <code>BackendHandler</code> on a <code>tokio::task</code> that listens \xe2\x80\xa6000Bn<code>SSTORE</code> opcode refund calculation.0BkCollects address info of BundleState state.0AhState builder utilities.0BkCollects storage info of BundleState state.0CgEnable steps tracing used for debug calls returning \xe2\x80\xa6EhResets subsequent calls\xe2\x80\x99 <code>msg.sender</code> to be <code>address(this)</code>. \xe2\x80\xa600000AjReturns storage slot keys.000AjConstructor struct fields.Ceall active subscriptions <code>id -&gt; Stream</code>0BhReturns the Superposition mainnet chain.B`Returns the syndr sepolia chain.AlTakes bytecode from account.0BbWhether the target account exists.000CbReturns the path to the dir that contains testdataAlConvert to a decimal string.0AhConvert to a hex string.0D`Converts a serializable value into a <code>ResponseResult</code>AlCreates a new tokio runtime.AdTouches the account.00000CiReturns a reference to the map of addresses and their \xe2\x80\xa600AhPrint out opcode traces.CnCounts the number of bits from the end of the bit-slice to \xe2\x80\xa6CeReturns the number of trailing ones in the binary \xe2\x80\xa6CdReturns the number of leading ones in the binary \xe2\x80\xa6CgSee <code>Uint::trailing_ones</code> for documentation.3210CkExecute multiple transactions without finalizing the state.00000CcReturns the address of the transfer source account.0CiBuilds iterator over stored key-value pairs ready for \xe2\x80\xa6BnAttempt to convert this type into a DynSolTypeBcTries to convert this into a U256].ChTries to fill this fixed byte array with the default \xe2\x80\xa6CoTries to fill this <code>FixedBytes</code> with the default \xe2\x80\xa6111011CgLaunches an ipc server at the given path in a new task.Ck<code>ToString::to_string</code>, but without panic on OOM.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CkAttempts to view a memory region as an immutable bit-slice.000CiComputes the two\xe2\x80\x99s complement of a U256 value in place.0CjReturns the number of tx that are ready and queued for \xe2\x80\xa6ClReturns the number of transactions currently pending for \xe2\x80\xa6BdUpdates the config of the inspector.000CgUpdates the project\xe2\x80\x99s config with the given function.DjReturns the <code>Utc</code> datetime for the given seconds since unix \xe2\x80\xa6BmViews a memory region as a mutable bit-slice.000Ckthe transactions that are not ready yet are waiting for \xe2\x80\xa6CmAccount was destroyed by calling SELFDESTRUCT. This means \xe2\x80\xa6AkWas this account destroyed.10DbConverts a list of arguments to a <code>watchexec::Command</code>.AaSets the base feeBhOverrides the configured block base fee.000BnSets the bytecode that is going to be executed0CnAllocates a new, empty, bit-vector with space for at least \xe2\x80\xa6DeCreates an empty <code>HashMap</code> with at least the specified \xe2\x80\xa60DeCreates an empty <code>HashSet</code> with at least the specified \xe2\x80\xa6DfCreate a new map with capacity for <code>n</code> key-value pairs. \xe2\x80\xa6DiCreate a new set with capacity for <code>n</code> elements. (Does not \xe2\x80\xa62DgCreates a new empty <code>String</code> with at least the specified \xe2\x80\xa6DdConstructs new <code>PlainStateReverts</code> with pre-allocated \xe2\x80\xa6ClCreates a new memory instance that can be shared between \xe2\x80\xa67665435210AaSets the chain IDEgConsumes <code>self</code> and returns a new <code>CfgEnv</code> with the specified \xe2\x80\xa60AnSet children on the ParseItem.AnSet comments on the ParseItem.AaSet the database.0AaSets the hardforkAiSet the host to serve on.BgSets whether to enable optimism supportAmSets the position of the log.00BhAppends code to the \xe2\x80\x9crun()\xe2\x80\x9d functionCcDo the callback within the context of a temp bufferCaWrap comments on <code>line_length</code> reached0DiConstruct a new <code>Uint</code> from the value saturating the value \xe2\x80\xa60CnWrites data to file, creating a file if it does not exist, \xe2\x80\xa600000CnWrites line to file, creating a file if it does not exist. \xe2\x80\xa600000CnWrite a comment to the buffer formatted. WARNING: This may \xe2\x80\xa6CgWrites heading to the buffer formatted as Markdown::H3.CcWrite potentially nested <code>if statements</code>CfWrite unformatted src and comments for given location.AlWrite the VRS to the output.0CnWrite an item section to the buffer. First write comments, \xe2\x80\xa6C`CLI arguments for <code>cast access-list</code>.AoEIP-2930 Access list item type.CmA list of addresses and storage keys that the transaction \xe2\x80\xa611AmAn EIP-2930 access list item.212200000ClCreate account: Actions: Mark account as created Revert: \xe2\x80\xa60000000CnLoading account does not mean that account will need to be \xe2\x80\xa60000000Al<code>afterInvariant</code>.DaThe <code>revm::Inspector</code> used when transacting in the evmClMinimum base fee for blobs, if price of the blob is less \xe2\x80\xa60ClDetails of a transaction generated by invariant strategy \xe2\x80\xa600CdContains the config for <code>forge bind-json</code>AbA block timestamp.000CgContainer for read and write buffer access information.CoThe client version: <code>anvil/v{major}.{minor}.{patch}</code>AhCommand leader characterCjConstantinople hard fork Activated at block 7280000 is \xe2\x80\xa6CaString identifier for the Constantinople hardfork10AlAn arena of recorded traces.00BeABI-encode a function with arguments.BfChange the password of a keystore fileCkError thrown by cheatcodes. Custom error with signature \xe2\x80\xa600000BbExclusive Bit-Slice Exact Chunking0BdA successful ChiselCommand ExecutionCgCompute the contract address from a given nonce and \xe2\x80\xa6AcConstantinople: \xe2\x80\xa6BnType alias for database error within a context0CkTrait for setting the transaction and block in the context.00000BlA type that executes all tests of a contract0AbA coverage report.00C`CLI arguments for <code>cast da-estimate</code>.BcGas cost for DATALOADN instruction.0AmDefault address for tx.originAlDeployments preprocessor id.0AnEVM database commit interface.00000CeResult alias with <code>DatabaseError</code> as error0000Bogeth\xe2\x80\x99s <code>debug_traceCall</code>  endpointAnDecode ABI-encoded input data.BnAdditional decoded data enhancing the CallLog.00BeThe account has been destroyed again.00000AcOn disk state cacheAoChisel dispatch result variantsBdGas cost for EOF CREATE instruction.0CmAn empty database that always returns default values when \xe2\x80\xa60000BgDefault types for Ethereum interpreter.0CmThe <code>PrecompileProvider</code> for ethereum precompiles.0BdUnsubscribe from an eth subscriptionCkThis type keeps track of the current value of a storage \xe2\x80\xa60AkCustom geth error code, \xe2\x80\xa6DdA miner that constructs a new block every <code>interval</code> tickCca revm::Database that\xe2\x80\x99s forked off another client0000BfA custom Error thrown by the Formatter0CbUseful extensions to <code>std::path::Path</code>.BmConvert a fixed point number into an integer.DeExecutes a single test function, returning a <code>TestResult</code>.AjThe outcome of a fuzz test00DjWrapper around an <code>Executor</code> which provides fuzzing support \xe2\x80\xa60000AiG1 add precompile address0AiG1 msm precompile address0AiG2 add precompile address0AiG2 msm precompile address0AoA <code>IERC20</code> instance.CeModule containing a contract\xe2\x80\x99s types and functions.00CmFetch the EIP-1967 implementation for a contract Can read \xe2\x80\xa6CkThere are changes in the account that exist only in memory.00000CmAn enum representing the different transports that can be \xe2\x80\xa6DbInspector EVM trait. Extends the <code>EvmTr</code> trait with \xe2\x80\xa60DeTrait that extends the <code>FrameTr</code> trait with additional \xe2\x80\xa60ChAn inspector that calls multiple inspectors in sequence.000C`Internal results that are not exposed externally0CeThrown when a tx was signed with a different chain_idChTransaction chain id does not match the config chain id.0CnWhen performing something that takes a U256 and casts down \xe2\x80\xa60BeAn invalid profile has been provided.Alsend invalid request object.AnAnti-Aliasing Iterator Adapter0CnTrait for tracking and reverting state changes in the EVM. \xe2\x80\xa600000AgMatches only start hex.CkThe bytecode has been analyzed for valid jump destinations.00000BaTrait needed for legacy bytecode.0CiLocal context used for caching initcode from Initcode \xe2\x80\xa600000BhContains the configuration of the loggerBnMinimum gas that must be provided to a callee.0CnThe minimum Solidity version of the <code>Vm</code> interface.CjMSM_MULTIPLIER specifies the division constant that is \xe2\x80\xa60CkType alias for a mainnet context with standard Ethereum \xe2\x80\xa60DjMainnet handler that implements the default <code>Handler</code> trait \xe2\x80\xa60BnThe memory limit of the EVM has been exceeded.0Anmethod does not exist or validAaMissing chain id.0CjUtility struct for parsing numbers and formatting them \xe2\x80\xa6AgOpcode not found error.AjUnknown or invalid opcode.10DhOtterscan\xe2\x80\x99s <code>ots_getApiLevel</code> endpoint Used as a simple \xe2\x80\xa6AnPartially-Owned Memory Element0C`Represents an access permission to a single pathAgMissing pragma solidityAdThe preprocessor id.0AfPretty print calldata.CdThe <code>0x3E</code> (\xe2\x80\x9cRETURNDATACOPY\xe2\x80\x9d) opcode.000CdThe <code>0x3D</code> (\xe2\x80\x9cRETURNDATASIZE\xe2\x80\x9d) opcode.000D`A regex that matches <code>{identifier-part}</code> placeholdersCeA regex that matches <code>${val}</code> placeholdersDiA recurrent prank triggered by a <code>vm.startPrank()</code> call is \xe2\x80\xa600000CgRepresents the result of a call either success or errorBgType alias for backwards compatibility.0CiDefault implementation of return data storage for the \xe2\x80\xa60AlRepresents a single endpoint0CfThe SemVer compatible version information for Foundry.BiThe system address used for system calls.000CnContainer for multiple SequenceProgress instances keyed by \xe2\x80\xa6CmHelper that saves the transactions sequence and its state \xe2\x80\xa6BjIf account is marked for self destruction.0BfSet the minimum gas price for the nodeBlErrors in signature parsing or verification.0BdA rustyline helper for Solidity codeCiLinter implementation to analyze Solidity source code \xe2\x80\xa6AiCoverage source analysis.00AbA source location.00AjShared Bit-Slice Splitting0AdSpurious Dragon: \xe2\x80\xa6BnAttempting to pop a value from an empty stack.000CbEVM State is a mapping from addresses to accounts.Eo<code>accounts</code>/<code>storages</code>/<code>contracts</code> for inclusion into database.000111AnRepresents all state snapshotsCnEntry used to track storage changes Action: Storage change \xe2\x80\xa60000000CbEVM cleared storage of this account, mostly by \xe2\x80\xa6000AfUnique subscription idBgThe identifier to use for subscriptions0AfData report by a test.ClThrown to ensure no one is able to specify a transaction \xe2\x80\xa6AhInternal transport errorCdWraps an unary operator mutated, to easily store \xe2\x80\xa6CaAn unknown section was encountered in a TOML file0CfVerify the deployed bytecode against its source on \xe2\x80\xa6BdVerify smart contracts on Etherscan.ClUtility cheatcode to set an EIP-2930 access list for all \xe2\x80\xa600000CeReturns true if the kind of account access is a call.DhGets all accessed reads and write slot from a <code>vm.record</code> \xe2\x80\xa600000AhAccount status tracking.0CkCreates a journal entry for when an account is accessed \xe2\x80\xa600000BhIngests a raw log into the bloom filter.0ChReturns the identifier of the currently active fork. \xe2\x80\xa600000Alall currently active filtersChReturns the currently active <code>ForkDB</code>, if any000DbReturns the <code>ForkId</code> that\xe2\x80\x99s currently used in the \xe2\x80\xa6000DgAdds an address to the <code>DelegationCapability</code> of the wallet.CaAdds a delegation to the active delegations list.000DkAdds a source file to the project. Prefer using <code>add_source</code> \xe2\x80\xa6EmReturns <code>None</code> if the first <code>col</code> chars of <code>s</code> contain a \xe2\x80\xa6CnAnalyze the bytecode to find the jumpdests. Used to create \xe2\x80\xa60BlRetrieves metadata about the Anvil instance.BgRollback the chain to a specific depth.AlSets the code of a contract.CaReturns the <strong>apparent</strong> call value.0CjDispatches the cheatcode call to the appropriate function.BlApplies this cheatcode to the given context.fPanics0C`Arithmetic shift right by <code>rhs</code> bits.0DfAsserts that two <code>bool</code> values are equal. Function with \xe2\x80\xa600000DjAsserts that two <code>bool</code> values are equal and includes error \xe2\x80\xa600000DiAsserts that two <code>uint256</code> values are equal. Function with \xe2\x80\xa600000DgAsserts that two <code>uint256</code> values are equal and includes \xe2\x80\xa600000DhAsserts that two <code>int256</code> values are equal. Function with \xe2\x80\xa600000DfAsserts that two <code>int256</code> values are equal and includes \xe2\x80\xa600000DiAsserts that two <code>address</code> values are equal. Function with \xe2\x80\xa600000DgAsserts that two <code>address</code> values are equal and includes \xe2\x80\xa600000DiAsserts that two <code>bytes32</code> values are equal. Function with \xe2\x80\xa600000DgAsserts that two <code>bytes32</code> values are equal and includes \xe2\x80\xa600000DgCompares two <code>uint256</code> values. Expects first value to be \xe2\x80\xa600000000000DfCompares two <code>int256</code> values. Expects first value to be \xe2\x80\xa600000000000111111111111000000000000111111111111DkCompares two <code>int256</code> values. Expects first value to be less \xe2\x80\xa600000000000222222222222000000000000CfAsserts that the artifacts dir and cache don\xe2\x80\x99t existCaCheck if a value is the same as an expected valueBlRuns the command and asserts that it failed.CiRuns the command and asserts that it resulted in success.CjAttach an EIP-4844 blob to the next call Function with \xe2\x80\xa600000CnPath to the directory that contains the bindings generated \xe2\x80\xa6000000CkPartitions a mutable bit-slice into maybe-contended and \xe2\x80\xa60BeCalculates the current blob gas priceChThe price paid by the eip-4844 transaction per blob gas.BhGas price for EIP-4844 blob transaction.0ClSets the blobhashes in the transaction. Not available on \xe2\x80\xa600000AjThe coinbase of the block.CkThe <code>block.coinbase</code> value during EVM execution.Bmthe block.coinbase value during EVM execution0CaThe size of the block explorer directory in bytesB`Gets block hash by block number.00000BbA task that listens for new blocksAcCreates new blocks.C`Returns the blocks receipts for the given numberBgReturns block receipts by block number.FbReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</codelEVM settingsCcCreates the environment to use when executing a \xe2\x80\xa6AnBundle account representation.0CdReturns current bytecode original slice. Used in \xe2\x80\xa60BmGiven a strategy, it generates a random call.000000BbAddress of the caller of the call.0BcReturns caller address of the call.AnReturns the set caller address221000ClReturns true if this field does not need to be passed to \xe2\x80\xa6AhCase sensitive matching.CgChecks if the given call sequence breaks the invariant.000BcReturns the current client version.CeOverride the code of an account. Format: address:codeDcSets <code>block.coinbase</code>. Container type for the return \xe2\x80\xa600000CmCollects inputs from given invariant run, if new coverage \xe2\x80\xa6AjCompiles target file path.CeGenerates and <code>SolcInput</code> from the source.BhFormats a string using the input values.0BnCompile-time version of <code>contains</code>.0DoReturns true if <code>search</code> is found in <code>subject</code>, false \xe2\x80\xa600000ClReturns true if this bloom filter is a possible superset \xe2\x80\xa60CmReturns a reference to the memory of the current context, \xe2\x80\xa60AmContract-level configuration.0ClUtility cheatcode to mark specific storage slot as cold, \xe2\x80\xa600000CmCopies the contents of one file to another. This function \xe2\x80\xa600000C`Minimal reproduction test case for failing test.CeMinimal reproduction test case for failing fuzz testsBoMinimal reproduction test case for failing test12221C`Wrapper for <code>std::fs::create_dir_all</code>CmCreates a nonce matcher function, which takes a reference \xe2\x80\xa6FcCreates a <code>Project</code> with the given <code>cached</code> and <code>no_artifacts</code> \xe2\x80\xa6BgCreates the receipt for the transactionClCustom print inspector, it has step level information of \xe2\x80\xa6CiReturns the number of decimal digits in the given number.AkDecodes the receipt payloadDkDecode an RLP-encoded VRS signature. Accepts <code>decode_parity</code> \xe2\x80\xa60AoThe decoded result of the call.00BiReturns a config for parity style traces.000CjDerives tx type from transaction fields and sets it to \xe2\x80\xa60DjSets <code>block.difficulty</code>. Not available on EVM versions from \xe2\x80\xa600000CkDisables the labels in the traces. Can only be set with \xe2\x80\xa6BbDisables the labels in the traces.AjDisable showing of labels.000BmReturns any arbitrary request on the provider000CkDrains balances from given account and return those values.0Di<code>ecrecover</code> precompile function. Read more about input and \xe2\x80\xa60DfConstructs a message according to EIP-191 (version <code>0x01</code>).0CcWhether to enable rpc storage caching for this fork0ChWhether caching should be enabled for the given chain id11Aiwhether to enable tracing0AjEnforces configured limitsDiEnsures that a corresponding <code>ForkId</code> exists for the given \xe2\x80\xa6000EhGets the environment variable <code>name</code> and parses it as <code>bytes</code>. \xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>int256</code>.00000111111111111111111111111111111CiReturns the chain\xe2\x80\x99s blockchain explorer and its API \xe2\x80\xa60AmCurrent memory expansion cost0nExpected calls000000nExpected emits000000BiFails the fuzzed test if a revert occurs.BnFails the invariant fuzzing if a revert occurs10CfFail on revert, used to check sequence when shrinking.B`Returns campaign failed replays.CeReturns an iterator over all files with the given \xe2\x80\xa6BdGet the byte offset of the next lineCmThe first of the two contracts for which to look selector \xe2\x80\xa6BaFlushes the DB to a specific file000DeSame as <code>forgetest</code> but returns an already initialized \xe2\x80\xa6Ciwe only use the gas limit value of the block if it is \xe2\x80\xa6BiReturns a mutable iterator over all Forks000CjFormats a U256 number to string, adding an exponential \xe2\x80\xa60CeFormats a message with a status and optional message.BePrints parts of the receipt to stdoutnfoundry-commonAeFoundry configurationnfoundry-configC`Creates counter example for a fuzz test failure.00BmAccess an entry by hash, including its index.0DdConstructs a <code>BitPtr</code> to the zeroth bit in the zeroth \xe2\x80\xa60BdParses a 65-byte long raw signature.0AjRaw Bit-Slice ConstructionCkConstructs a bit-vector handle from its constituent fields.DdCreates a new <code>String</code> from a pointer, a length and a \xe2\x80\xa6210DeConstructs a mutable <code>BitPtr</code> to the zeroth bit in the \xe2\x80\xa6DkConstructs an exclusive <code>&amp;mut BitSlice</code> reference over a \xe2\x80\xa610BhParse a string into a <code>Uint</code>.ChSee <code>Uint::from_str_radix</code> for documentation.10CjGiven a path, query the file system to get information \xe2\x80\xa600000DfFilesystem permissions for cheatcodes like <code>writeFile</code>, \xe2\x80\xa600000BaSupport for controlling fs accessClConfigures the permissions of cheat codes that touch the \xe2\x80\xa62BkThe number of functions in the source file.00CkReturns a Chain struct for specific alias Function with \xe2\x80\xa600000CmReturns a Chain struct for specific chainId Function with \xe2\x80\xa600000ClGets the label for the specified address. Container type \xe2\x80\xa600000CiGets the nonce of an account. Function with signature \xe2\x80\xa600000DcGet the nonce of a <code>Wallet</code>. Function with signature \xe2\x80\xa600000CjReturns addresses of available unlocked wallets in the \xe2\x80\xa600000CcReturns the underlying fork corresponding to the idCeReturns the full block for the given block identifier000BfGet the indent len for the given levelCfReturn mutable reference to key and value at an index.CbReturn mutable reference to the value at an index.10CfConverts a vector of tuples containing the ABI and \xe2\x80\xa6ClReturns an iterator over the JSON files and the contract \xe2\x80\xa6DiReturns the original <code>Filter</code> of an <code>eth_newFilter</code>BkReturns the remappings to add to the config0BjFind and parse remappings for the projectsBoReturns the configured rpc, or the fallback urlCmConsumes recorded account accesses and returns them as an \xe2\x80\xa6BlMutable getter for <code>states</code> field0ClCompiles target contract requesting only ABI and returns \xe2\x80\xa6BjWhen writing a newline apply state changesAkHandle the JSON-RPC RequestCkHelper function to check if a given node is or contains \xe2\x80\xa6CgReturns true if the given path has no submodules by \xe2\x80\xa6ClReturns true if there\xe2\x80\x99s an endpoint that couldn\xe2\x80\x99t be \xe2\x80\xa6CiReturns true if there\xe2\x80\x99s a config that couldn\xe2\x80\x99t be \xe2\x80\xa6BdStyle of underscores in hex literals0DkConfigures an <code>axum::Router</code> that handles JSON-RPC calls via \xe2\x80\xa6BaIdentifies an <code>Error</code>.00BaIdentifies an <code>Event</code>.00CcContainer type for the return parameters of the \xe2\x80\xa6oIgnored traces.000000DjUsed for <code>OPCODE_INFO</code> to set the immediate bytes number in \xe2\x80\xa6CaReturns the size of the immediate value in bytes.10gExampleCgAddress of the contract implementation that will be \xe2\x80\xa600000BnCall ids contained in current shrunk sequence.BhInfers the type from a variable\xe2\x80\x99s typeBnInit code hash of the contract to be deployed.CcThe init code hash for CREATE2 address computation.CdInner fuzzing Sequence coming from overriding calls.AbInserts an accountCmInserts Loaded (Or LoadedEmptyEip161 if account is empty) \xe2\x80\xa6BbInserts an account into the state.10ClInsert address into fuzz dictionary. If address is newly \xe2\x80\xa6DaAdds <code>console.sol</code> as a source under \xe2\x80\x9cconsole.sol\xe2\x80\x9dBlAdds DSTest as a source under \xe2\x80\x9ctest.sol\xe2\x80\x9dEeInsert a name as <code>[profile.name]</code>. Creating the <code>[profile]</code> \xe2\x80\xa6ClInspect the EVM with the given transaction and inspector \xe2\x80\xa6000BkInspect the EVM with the given transaction.000BoCreates a new <code>InternalError</code> error.CgConsumes the type and returns all precompile addresses.0ChConverts this <code>String</code> into a Box&lt;str&gt;.0CnConverts the result of the call into an <code>EvmError</code>.00CgConsumes the type and converts the list into a vec, \xe2\x80\xa60BjConsumes self and returns inner Inspector.0CkDecomposes a bit-vector into its constituent member fields.CmDecomposes a <code>String</code> into its raw components: \xe2\x80\xa610CbRecover the authority and transform the signed \xe2\x80\xa60CjConsumes the iterator, returning the remnant bit-slice \xe2\x80\xa60CbSee <code>ChunksExactMut::into_remainder()</code>.CbSee <code>RChunksExactMut::into_remainder()</code>2210BoCreates a new <code>InvalidParams</code> error.CfFuzzes any deployed contract and checks any broken \xe2\x80\xa600BnReturns the skipped result for invariant test.CgReturns true if the <code>id</code> is currently active000CbReturns whether the compiler version should be \xe2\x80\xa6CfReturns true if the transaction uses dynamic fees: \xe2\x80\xa6CaWhether the database is currently in forked mode.000ChKeeps track of whether the backed is already initialized0CaReturns true if only memory caching is supported.CnReturns true if script might be multi-chain. Returns false \xe2\x80\xa6CjReturns whether the underlying number is positive or zero.BgWhether the number is positive or zero.AoCheck if a string is PascalCaseBnReturns true if it is <code>STATICCALL</code>.CaReturns true if the call is CallKind::StaticCall.100DkReturns whether this opcode terminates execution, e.g. <code>STOP</code>\xe2\x80\xa60Bo<code>KECCAK256</code> opcode cost calculation.0CeUse the keystore by its filename in the given folder.00BfThe timestamp of the last block headerAdLibraries to deploy.ClVector of libraries that need to be deployed from sender \xe2\x80\xa6DfReturns the <code>BytePos</code> of the beginning of the current line.DkLoad a genesis JSON file\xe2\x80\x99s <code>allocs</code> into the in-memory EVM \xe2\x80\xa600000CjGiven a list of traces and artifacts, it returns a map \xe2\x80\xa600ClLoads the <code>Config</code> from the given root directory.DhEvent with signature <code>log_named_uint(string,uint256)</code> and \xe2\x80\xa600CcReturns the logs of the block that match the filterCmReturns the logs that match the filter in the given range \xe2\x80\xa6Ca<code>m3_2048</code> but with a pre-hashed input.0EbConverts the <code>EthEvm::transact</code> result to <code>EitherEvmResult</code>.DfMaps a <code>DBError</code> to a new error type using the provided \xe2\x80\xa60BhMarks an address with arbitrary storage.CfMerge current collected line coverage with the new \xe2\x80\xa600ClPrints out a message with a status to stderr. The status \xe2\x80\xa6BaReturns all receipts of the blockCbUse the private key from the given mnemonic index.CiMocks a call to an address, returning specified data. \xe2\x80\xa600000DfMocks a call to an address with a specific <code>msg.value</code>, \xe2\x80\xa600000111111000000AmModifies the context journal.0ClString containing the whole new expression (operator and \xe2\x80\xa6BmCreates a new log from an deserialized event.0CnCreates a new instance of the BlockchainDb and skips check \xe2\x80\xa6000CmCreates a new JournaledState by copying state data from a \xe2\x80\xa60ClReturns the current timestamp and updates the underlying \xe2\x80\xa6CaDo not auto-detect the <code>solc</code> version.0DjNormalize a path, removing things like <code>.</code> and <code>..</code>.Bathe oldest states written to diskEoReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</codeoReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</codebstates which data is moved to diskBgInvoked when a set of transactions (\xe2\x80\xa6CnThe number of runs specifies roughly how often each opcode \xe2\x80\xa600DkInserts the result of the <code>call</code> function in the entry if it \xe2\x80\xa6CnEnsures a value is in the entry by inserting the result of \xe2\x80\xa61101AnReturns the original bytecode.BgReturns original bytes without padding.10BoReturns the original value of the storage slot.BbOriginal value of the storage slotBjValue of the storage when it is first read2021200BmCalculate gas cost according to EIP-7883: \xe2\x80\xa60BhThe target directory for the doc output.0DbReturns configured fixtures for <code>param_name</code> fuzzed \xe2\x80\xa600DoParses the given <code>string</code> into <code>bytes</code>. Function with \xe2\x80\xa600000EgParses the given <code>string</code> into a <code>int256</code>. Container type for \xe2\x80\xa600000CmParses a fragment of solidity code with solang_parser and \xe2\x80\xa6CbDownload and parse the source code from Etherscan.eParseCmPost-execution operations including gas refunds and state \xe2\x80\xa6CaHandles the final steps of transaction execution.0100C`Prepare a runner for the Chisel REPL environmentAfInitial storage value.0CjPrompts the user for uint256 in the terminal. Function \xe2\x80\xa600000BgSets a timeout for vm.prompt cheatcodes00000CbSets a timeout in seconds for vm.prompt cheatcodes1CgCreates a coverage item for a given kind and source \xe2\x80\xa6EhReturns a random <code>bool</code>. Function with signature <code>randomBool()</code>\xe2\x80\xa600000ClFills this fixed byte array with the given random number \xe2\x80\xa6DcFills this <code>FixedBytes</code> with the given random number \xe2\x80\xa6DdFills this <code>Uint</code> with the given random number generator.2221022CgThe value as returned by <code>eth_getStorageAt</code>.DdReads the entire content of file to string. <code>path</code> is \xe2\x80\xa600000CmReads next line of file to string. Container type for the \xe2\x80\xa600000CkReads a symbolic link, returning the path that the link \xe2\x80\xa600000ClReads the JSON file and deserialize it into the provided \xe2\x80\xa6CaWrapper for <code>std::fs::read_to_string</code>.AiSingle-Bit Unaligned ReadDgReads the bit from <code>*self</code> using an unaligned memory access.10Cm\xe2\x9a\xa0\xef\xb8\x8f Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - \xe2\x80\xa60ClRecord all the transaction logs. Function with signature \xe2\x80\xa600000CkUpdate metrics for a fuzzed selector, extracted from tx \xe2\x80\xa600CnRecords a new memory length and calculates additional cost \xe2\x80\xa60CbWhether to include dependencies from dependencies.CnReturns the name of the referenced item and its arguments, \xe2\x80\xa6CmRegisters Solidity linter passes that can have both early \xe2\x80\xa6C`The project\xe2\x80\x99s remappings from the environment.0CkRemoves a file from the filesystem. This cheatcode will \xe2\x80\xa600000C`Wrapper for <code>std::fs::remove_dir_all</code>BkRemove the given transactions from the pool0DjRemove all matches of pattern <code>pat</code> in the <code>String</code>.0CaCreates a new reqwest client from this transport.CjResets the nonce of an account to 0 for EOAs and 1 for \xe2\x80\xa600000DcRetains all the coverage items specified by <code>predicate</code>.00CgEIP-211: New opcodes: RETURNDATASIZE and RETURNDATACOPY000Eh<code>revertTo</code> is being deprecated in favor of <code>revertToState</code>. It \xe2\x80\xa600000BmCollects address info of BundleState reverts.0CaRevert decoder. Contains all known custom errors.CgRevert decoder. Contains all known errors and their \xe2\x80\xa6111BmCollects storage info of BundleState reverts.0AlRevert string configuration.0CaHow to treat revert (and require) reason strings.EgApply the function <code>f</code> on the value in the <code>Right</code> variant if \xe2\x80\xa60CkUpdates the currently active fork to given block number \xe2\x80\xa600000CkUpdates the currently active fork to given transaction. \xe2\x80\xa600000CjUpdates the given fork to given block number. Function \xe2\x80\xa600000CgUpdates the given fork to block number of the given \xe2\x80\xa600000ChRuns a table test. The parameters dataset (table) is \xe2\x80\xa6DjSaturating absolute value. Computes <code>self.abs()</code>, returning \xe2\x80\xa60DfComputes <code>self + rhs</code>, saturating at the numeric bounds \xe2\x80\xa6DbSaturating integer addition. Computes <code>self + rhs</code>, \xe2\x80\xa610DbSaturating integer division. Computes <code>self / rhs</code>, \xe2\x80\xa60DfComputes <code>self * rhs</code>, saturating at the numeric bounds \xe2\x80\xa6DhSaturating integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa610EcSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if \xe2\x80\xa60DeRaises self to the power of <code>exp</code>, saturating on overflow.DkSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, \xe2\x80\xa610BoSaturating left shift by <code>rhs</code> bits.0DfComputes <code>self - rhs</code>, saturating at the numeric bounds \xe2\x80\xa6DeSaturating integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa610CbThe address of the script contract being executed.000B`Returns the scroll mainnet chainB`Returns the scroll sepolia chainCkInstantiate an unchecked seal. This should be used with \xe2\x80\xa60DkTakes a fork identifier created by <code>createFork</code> and sets the \xe2\x80\xa600000BmThe 4-byte function selector as a byte array.000BdGenerate bindings as separate files.D`Untagged serialization/deserialization support for Either&lt;\xe2\x80\xa60ClSerializes a key:value pair to a specific object. If the \xe2\x80\xa6nSession SourceDcThe <code>SessionSource</code> object that houses the REPL session.CiSets the nonce of an account. Must be higher than the \xe2\x80\xa600000BcSet chain data for a specific alias000AmSet the cheatcodes inspector.00CnSets the file path to write the Anvil node\xe2\x80\x99s config info \xe2\x80\xa6CfSets the value for the given slot of the given addressBeSets the balance of the given addressEeSigns <code>digest</code> with <code>privateKey</code> using the secp256r1 curve. \xe2\x80\xa600000C`Computes the signature hash used to sign the \xe2\x80\xa60Eh<code>snapshot</code> is being deprecated in favor of <code>snapshotState</code>. It \xe2\x80\xa600000AfCreates a new snapshotAmCreates a new state snapshot.ChCreates a new state snapshot at the current point of \xe2\x80\xa6000BcThe address of the launched server.BaReturns the Sophon testnet chain.AiSpawns the blocking task.ClSplits the bit-slice into mutable references to its last \xe2\x80\xa6CnReturns the last key-value pair and the rest of the slice, \xe2\x80\xa610CeThe debug trace node index when the recording starts.CdInterval in seconds at which the state and block \xe2\x80\xa6BiSupport for snapshotting different statesBgThe number of statements that were hit.00CkStops recording storage reads and writes. Function with \xe2\x80\xa600000BlThe storage layout of the contract on chain.CgContains the storage key and old values of that storage000CfCreates a journal entry for when a storage slot is \xe2\x80\xa600000AoInitializes the git submodules.CgSwaps two bits in a bit-slice, without bounds checking.0BmReturns the tag the commit first appeared in.BoTakes first N raw reverts from the BundleState.0C`Takes the remnant bit-slice out of the iterator.0CaSee <code>ChunksExactMut::take_remainder()</code>CbSee <code>RChunksExactMut::take_remainder()</code>2210BnStorage of this account address is being used.CgTarget address, this account storage is going to be \xe2\x80\xa610BcReturns target address of the call.21210BiWhere all the source files are written toDhEncodes a <code>bytes</code> value to a base64 string. Function with \xe2\x80\xa600000DiEncodes a <code>string</code> value to a base64 string. Function with \xe2\x80\xa600000DdConverts the given value to a <code>string</code>. Function with \xe2\x80\xa600000000000000000000000000000000000DgConverts the <code>val</code> into a <code>figment::Value::Array</code>CnConverts integers with specified decimals into fixed point \xe2\x80\xa6DhGenerate a <code>StateChangeset</code> from the bundle state without \xe2\x80\xa60CbConvert the SessionSource to a valid REPL contractCjConverts the PendingTransaction into the TxEnv context \xe2\x80\xa6AgTop level solidity codeCmIf used with a signature, the indexed fields of the event \xe2\x80\xa6ClTotal gas for all blobs. Max number of blocks is already \xe2\x80\xa600000CnCounts the number of bits from the end of the bit-slice to \xe2\x80\xa6CfReturns the number of trailing zeros in the binary \xe2\x80\xa6CeReturns the number of leading zeros in the binary \xe2\x80\xa6ChSee <code>Uint::trailing_zeros</code> for documentation.3210CjFetches the given transaction from the active fork and \xe2\x80\xa600000CiFetches the given transaction from the given fork and \xe2\x80\xa600000CbTransaction id, used to track when account was \xe2\x80\xa6ClTransaction id, used to track when storage slot was made \xe2\x80\xa6CbGlobal transaction id that represent number of \xe2\x80\xa600021000000AkReturns the transfer value.0DnAttempts to construct a shared <code>&amp;BitSlice</code> reference over a \xe2\x80\xa6ChFallibly constructs a new bit-vector from a slice of \xe2\x80\xa610CjSets <code>tx.gasprice</code>. Function with signature \xe2\x80\xa600000CnGet the transaction and journal. It is used to efficiently \xe2\x80\xa600000CmReturns the details of all transactions currently pending \xe2\x80\xa6CgReturns a summary of all the transactions currently \xe2\x80\xa6CmConst function for making an address by concatenating the \xe2\x80\xa60CbShortcut for <code>val.try_into().unwrap()</code>.0CcShortcut for <code>self.try_into().unwrap()</code>.0CfReturns the time since unix epoch in milliseconds. \xe2\x80\xa600000AiUnmarks the created flag.0AoUpdates campaign favored items.CcWhen creating or switching forks, we update the \xe2\x80\xa6BeCreate a chunk given a Visitable itemBbReturns configured Vyper compiler.CcReturns the configured VyperSettings that includes:ClUtility cheatcode to mark specific storage slot as warm, \xe2\x80\xa600000AgGet the warm addresses.BeReturns addresses of the precompiles.10ChBerlin warm and cold storage access cost for account \xe2\x80\xa60BmCheck if a chunk will fit on the current lineEhRemoves all contract files from <code>src</code>, <code>test</code>, <code>script</code>BfSets the block time to automine blocksD`Creates a new <code>AccountInfo</code> with the given code hash.0CiMarks the account as cold and returns self for method \xe2\x80\xa60AnSets the etherscan identifier.00AbSets the gas limitAbSets the gas priceCmGas price for legacy transactions, or max fee per gas for \xe2\x80\xa6CeConsumed self and returns new Evm type with given \xe2\x80\xa60DbCreates a new byte array with the last byte set to <code>x</code>.DoCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.111011ChIf set to <code>true</code> auto mining will be disabledDeDoes not apply <code>snapbox</code> redactions to the command output.BiOverrides the configured block timestamp.000BhSets the verbosity level of the decoder.00CmMarks the account as warm (not cold) and returns self for \xe2\x80\xa60AmWrite the final bindings fileAgWrite multiple commentsB`Writes a function to the buffer.CjWrites a subtitle to the bugger formatted as Markdown::H2.AiSingle-Bit Volatile WriteBoWrites a new bit using volatile I/O operations.10BaReturns the ZKSync testnet chain.CiAll implementors are required to have their alignment \xe2\x80\xa6000CjArbitrum L1 sender address of the first transaction in \xe2\x80\xa6Da<code>IndexMap</code> optimized for hashing <code>Address</code>.0Da<code>IndexSet</code> optimized for hashing <code>Address</code>.0EdError type for implementation of <code>TryDatabaseCommit</code> on <code>Arc</code>.00000CnContains which contracts are to be targeted or excluded on \xe2\x80\xa6000BjWrite function attributes multiline first.0AdAuthorization trait.000B`Size of the bloom filter in bits0CjTransfer balance between two accounts Action: Transfer \xe2\x80\xa60000000AaBn128 pair length000BjThis type reads broadcast files in the \xe2\x80\xa6ClThe transaction type (<code>txType</code>) of the broadcast.00000ChBundle retention policy for applying substate to the \xe2\x80\xa60CiGas cost for SLOAD when accessing a cold storage slot \xe2\x80\xa60BdWhat endpoints to enable caching forBlAn iterator over the variants of CmdCategoryAjReturns the code location.0AdThe comment positionCgDisplay constructor arguments used for the contract \xe2\x80\xa6Fe<code>ContractFactory</code> is a <code>DeploymentTxFactory</code> object with an <code>Arc</code>\xe2\x80\xa6ChContainer with artifacts data useful for identifying \xe2\x80\xa6000CiA visitor that walks the AST of a single contract and \xe2\x80\xa600BcCoverage summary for a source file.00BkAddress collision during contract creation.AaCreate collision.1101BbThe default profile: \xe2\x80\x9cdefault\xe2\x80\x9dBoreth\xe2\x80\x99s <code>debug_codeByHash</code> endpointAaDebugger builder.0AbDecoded call data.00BnDecrypt a keystore file to get the private keyCbDisables the next code item regardless of newlinesChDisables the next code (AST) item regardless of newlinesChDisables formatting between the next newline and the \xe2\x80\xa60AlThe content of the document.BbRemoves transactions from the poolDlWrapper that implements <code>Display</code> for a <code>DynSolValue</code>.BbEIP-7702 first version of bytecode0CdBytecode of delegated account, specified in EIP-77020DeAlias for result type returned by <code>Evm::transact</code> methods.CnEthereum instruction contains list of mainnet instructions \xe2\x80\xa60BmRepresents an ethereum Websocket subscriptionBeRepresents a single etherscan API keyCjEtherscanClient is a trait that defines the methods to \xe2\x80\xa6CjRepresents all info required to create an etherscan clientChJump forward in time by the given amount of time, in \xe2\x80\xa6BlMine a single block and return detailed dataB`Output of transaction execution.00BaResult of a transaction execution1110DkThe builder that allows to configure an evm <code>Executor</code> which \xe2\x80\xa6000CfErrors that can occur with <code>eth_feeHistory</code>CnRepresents the index of a fork in the created forks vector \xe2\x80\xa6B`Contains the config and rule set0B`Type alias for frame init result0DhTrait for converting a string to an <code>EVMError::Custom</code> error.0BnCLI arguments for <code>forge snapshot</code>.AjA Gas snapshot entry diff.BaThrown when calculating gas usageBaGenerate Fig autocompletion spec.00BmFull compilation output for the SessionSourceBmType alias for the result of generate_wallet.BbThe hardhat profile: \xe2\x80\x9chardhat\xe2\x80\x9dAlHyperfine JSON output formatAjHyperfine benchmark resultCiError that occurs when the number is too large or too \xe2\x80\xa60AhInvalid ERC-55 checksum.0AhInvalid FE opcode error.CiAn undefined bytecode value encountered during execution.10AnContains for invariant testing0DbThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.000BnVisitor struct for <code>LateLintPass</code>es0BjCache line number offsets for source filesCiContainer for the linked contracts and their dependenciesBaThe wallet options can either be:CaOpt-in mutable access to <code>Entry</code> keys.0CkRegistry of all available mutators (ie implementing the \xe2\x80\xa6Cclength of the name column for pretty formatting \xe2\x80\xa6CkAn Iterator over characters in a string slice which are \xe2\x80\xa6CgAn enum that represents either a serde_json::Number \xe2\x80\xa6CbA client that can request API data from OpenChain.CdOverflow payment. Not possible to happen on mainnet.AjOverflow in target accountAhPayment amount overflow.210AjPairing precompile address0AiTOML section for profilesAiInternal Transaction typeClRepresents a \xe2\x80\x9cpotential\xe2\x80\x9d revert reason from a single \xe2\x80\xa600000AaPrecompile error.BhError in precompiled contract execution.AfPrecompile error type.02100CcBuilder type to configure how to compile a project.BiCommon arguments for a project\xe2\x80\x99s paths.0CeHelper type to construct a <code>RetryProvider</code>BiHelpers for iterating over quoted stringsBjExclusive Bit-Slice Reverse Exact Chunking0BiDefault request timeout for http requestsDiA builder for computing where in an <code>IndexMap</code> a key-value \xe2\x80\xa60BaDebug trace with storage changes.00AeMatches only end hex.AiRPC endpoint wrapper typeCgRepresents a JSON-RPC request which is considered a \xe2\x80\xa6CnRAII structure used to release the shared read access of a \xe2\x80\xa6CdSpurious Dragon hard fork Activated at block 2675000CbString identifier for the Spurious Dragon hardfork10Ch<code>forge script --broadcast</code> execution context.00000000CkCache for function, event and error signatures. Used by \xe2\x80\xa6000ChA filter that excludes matching contracts from the buildBoA spinner used as <code>report::Reporter</code>AnAnti-Aliasing Iterator Adapter0BlThe result of a single test in a test suite.BjExtension trait for <code>Function</code>.CdThere are more than 256 warnings. Ignoring the rest.ClTrace identifiers figure out what ABIs and labels belong \xe2\x80\xa600BgA default executor with tracing enabled000CfRepresents all relevant information of an executed \xe2\x80\xa6BmTransaction types of all Ethereum transaction0000000CgState of accounts in transition between transaction \xe2\x80\xa600000CdThe error type for <code>try_reserve</code> methods.0AiInvariant corpus manager.BjError type for building <code>TxEnv</code>0CfError type for unknown hardfork names. Returned by \xe2\x80\xa60CeUpload the given signatures to https://openchain.xyz.CjThe short version message information for the Foundry CLI.0AgCustom validation errorBcCheck verification status argumentsEcWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.000AaABI encoded args.CiCreates a journal entry for when a new account is created00000ClCreates a journal entry for when an account is \xe2\x80\x9ctouched\xe2\x80\xa600000BbThe currently active fork databaseCfReturns the currently active <code>Fork</code>, if any000CgReturns the Fork url that\xe2\x80\x99s currently used in the \xe2\x80\xa6000CgLocks inner Mutex and adds a signer to the MultiWallet.00AdAdd the source maps.00BbAdds a new transaction to the poolCcAdds a transaction to Pending queue of transactionsBkAdds a new transactions to the ready queue.BhAdd transitions to the transition state.0BnRetrieves the Anvil node configuration params.AnSets the reported block numberAmSets the nonce of an address.CaDecodes the input data and applies the cheatcode.CgApplies output of revm execution and create account \xe2\x80\xa60BbReturns the arbitrum goerli chain.CmViews the bit-slice as a half-open range of bit-pointers, \xe2\x80\xa60CnDefines a method that returns ParseSource inner element if \xe2\x80\xa6CjAccess the underlying store as a mutable little-endian \xe2\x80\xa60CfExplicitly views the bit-array as a mutable bit-slice.CkMutably views the remaining unyielded bits in the iterator.CgExplicitly views the bit-vector as a mutable bit-slice.CjViews the remaining unyielded bits as a mutable bit-slice.CdExplicitly views the bit-box as a mutable bit-slice.43210DhAsserts that two <code>string</code> values are equal. Function with \xe2\x80\xa600000DfAsserts that two <code>string</code> values are equal and includes \xe2\x80\xa600000DgAsserts that two <code>bytes</code> values are equal. Function with \xe2\x80\xa600000DkAsserts that two <code>bytes</code> values are equal and includes error \xe2\x80\xa600000DkAsserts that two arrays of <code>bool</code> values are equal. Function \xe2\x80\xa600000DeAsserts that two arrays of <code>bool</code> values are equal and \xe2\x80\xa600000AnAsserts that two arrays of \xe2\x80\xa600000DhAsserts that two arrays of <code>uint256</code> values are equal and \xe2\x80\xa600000DdAsserts that two arrays of <code>int256</code> values are equal. \xe2\x80\xa600000DgAsserts that two arrays of <code>int256</code> values are equal and \xe2\x80\xa600000DeAsserts that two arrays of <code>address</code> values are equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>address</code> values are equal and \xe2\x80\xa600000DeAsserts that two arrays of <code>bytes32</code> values are equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>bytes32</code> values are equal and \xe2\x80\xa600000DdAsserts that two arrays of <code>string</code> values are equal. \xe2\x80\xa600000DgAsserts that two arrays of <code>string</code> values are equal and \xe2\x80\xa600000DcAsserts that two arrays of <code>bytes</code> values are equal. \xe2\x80\xa600000DfAsserts that two arrays of <code>bytes</code> values are equal and \xe2\x80\xa600000CcContainer type for the return parameters of the \xe2\x80\xa6CnCreates a journal entry for when an account\xe2\x80\x99s balance is \xe2\x80\xa600000BmCalculate gas cost according to EIP 2565: \xe2\x80\xa60CoSets <code>block.blobbasefee</code> Function with signature \xe2\x80\xa600000CoReturn <code>blob_excess_gas</code> header field. See EIP-4844.00000B`Returns block with given number.AdThe block gas limit.CkThe <code>block.gaslimit</code> value during EVM execution.Bmthe block.gaslimit value during EVM execution0ClBlock on a future using the current tokio runtime on the \xe2\x80\xa60AkThe timestamp of the block.ClThe <code>block.timestamp</code> value during EVM execution.Bnthe block.timestamp value during EVM execution0CjConstants specifying the precompile addresses for each \xe2\x80\xa60BoUtility functions for the BLS12-381 precompiles0DeConverts a boolean to a left-padded 32-byte <code>Bytes</code> value.0AmPrint spaces between brackets0CfHas the next call (at this call depth only) create \xe2\x80\xa600000ChHas the next call (at this call depth only) create a \xe2\x80\xa600000000000CjOutput path to directory that build info files will be \xe2\x80\xa60DgThe path to the <code>build-info</code> directory that contains the \xe2\x80\xa6CjBuilds <code>Inspector</code> with the configured options.CiCalculates the relative delta for an absolute difference.CdHelper macro to call the same method on multiple \xe2\x80\xa600BlDecodes calldata-encoded hex input or outputCmPerforms ABI encoding to produce the hexadecimal calldata \xe2\x80\xa6CkEnsures that an address is well-aligned to its referent \xe2\x80\xa60CnAttempts to compile the flattened content locally with the \xe2\x80\xa6ChChecks the status of a txhash by first polling for a \xe2\x80\xa6CgTurn a chunk and its surrounding comments into a stringAkClears all known addresses.00BmRemoves this project\xe2\x80\x99s artifacts directory.CnCloses file for reading, resetting the offset and allowing \xe2\x80\xa600000AmConfigure the code size limitCiEIP-170: Contract code size limit in bytes. Useful to \xe2\x80\xa610000CmCompile the project in the root directory, and return the \xe2\x80\xa6AlThe CompilerOutput componentgExampleCkThe address of the contract that was called or created. \xe2\x80\xa600000CdRender the full source code for the current session.DfUtility cheatcode to copy storage of <code>from</code> contract to \xe2\x80\xa600000DeCreates a new <code>Bytes</code> instance from a slice by copying it.0CmCreates a new, empty directory at the provided path. This \xe2\x80\xa600000CbCreates a ScriptSequence object from the given \xe2\x80\xa6CmCreate a new temporary buffer based on an existing buffer \xe2\x80\xa6ChReturns created address if frame is create otherwise \xe2\x80\xa6BcCreate frame has a created address.CnReturns created address if execution is Create transaction \xe2\x80\xa6CfReturns the address that this create call will create.3210CfReturns mutable references to both the context and \xe2\x80\xa6000BeReturns balance of the given account.BoReturn the balance of account after transition.0ClNumber of state values initially collected from db. Used \xe2\x80\xa6CnFetches all possible signatures and attempts to abi decode \xe2\x80\xa60AeDecodes a call trace.00CaWhether to identify internal functions in traces.BfIdentify internal functions in traces.BoWhether to enable steps tracking in the tracer.0CfDecodes the given function or event selector using \xe2\x80\xa60DkDeploys a contract using the given <code>env</code> and commits the new \xe2\x80\xa600ChSets the derivation path of the child key to be derived.ClDerive a private key from a provided mnenomic string (or \xe2\x80\xa600000000000000000000000CjDetects the language for verification from source file \xe2\x80\xa6CkHandling multiple accounts/new contracts in a multifork \xe2\x80\xa6000ClEIP-3607 rejects transactions from senders with deployed \xe2\x80\xa6000CdBytecode of the test contract that generated the \xe2\x80\xa6DgDump a genesis JSON file\xe2\x80\x99s <code>allocs</code> to disk. Container \xe2\x80\xa600000C`Returns the location where to dump the state to.CcContainer type for the return parameters of the \xe2\x80\xa60BcEnable Optimism deposit transaction0CkReturns ENS namehash for provided string. Function with \xe2\x80\xa600000CgEnsures that fork url exists and returns its reference.EgGets the environment variable <code>name</code> and parses it as <code>bool</code>. \xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000DjGets the environment variable <code>name</code> and returns true if it \xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>string</code>.00000222222EhGets the environment variable <code>name</code> and parses it as <code>uint256</code>\xe2\x80\xa600000333333CmGets all the logs according to specified filter. Function \xe2\x80\xa600000BmHeaders that should be used for any rpc callsBmTimeout that should be used for any rpc callsB`The excess blob gas of the block000AkExpected revert information000000CiExtends the decoder with the given ABI\xe2\x80\x99s custom errors.AnUpdates the cache from an ABI.10110FcMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> \xe2\x80\xa60CnApplies the filters and sorts the broadcasts by descending \xe2\x80\xa6BmReturns the permission for the matching path.AgThe weight for fixtures000CjFormats a U256 number to string, adding an exponential \xe2\x80\xa60DaSolidity ABI-related utilities and <code>sol!</code> definitions.ofoundry-linkingofoundry-walletsBbReturns the fraxtal testnet chain.AfUnpacks an EVM result.00BbConvert a pt::Expression to a TypeCfDeserializes the input into a U256, accepting both \xe2\x80\xa6ChConverts an ECDSA verifying key to its corresponding \xe2\x80\xa60ChCompute the largest valid Lehmer update matrix for a \xe2\x80\xa60ClConverts a slice of bytes to a string, including invalid \xe2\x80\xa60BaFile to rerun fuzz failures from.ChGenerates a random K-256 signing key and derives its \xe2\x80\xa6DeHelper function that creates a <code>GenesisAccount</code> from a \xe2\x80\xa6ChNative token balance of every genesis account in the \xe2\x80\xa600CcReturns the commit hash of the project if it existsDnReturns the path to the <code>foundry.toml</code> of this <code>Config</code>.CnFilter a collection of comments and only return the custom \xe2\x80\xa6CkReturns an array of all logs matching filter with given id.CkGet an entry in the map by index for in-place manipulation.0BgGet the precompiles for the given spec.BmMutable getter for <code>reverts</code> field0CfReturns the EIP-712 struct hash for provided name, \xe2\x80\xa6CcReturns the path for a struct, with the format: \xe2\x80\xa6EdReturns the <em>pending</em> transaction for that <code>hash</code> if it exists \xe2\x80\xa6Bnchecks both pools for the matching transactionBdReturns the transaction for the hash000DgGiven a <code>VerifyBundle</code> and contract details, it tries to \xe2\x80\xa6CeReturns all semver git tags sorted in ascending orderChstores whether there are pending transactions (if known)CjHas EIP-161 state clear enabled (Spurious Dragon hardfork)00000CgDetermines the sign of a 256-bit signed integer and \xe2\x80\xa60AoIdentifies <code>Error</code>s.00AoIdentifies <code>Event</code>s.00CnIgnore initcode contract bytecode size limit introduced by \xe2\x80\xa6CeSets whether to ignore EIP-3860 initcode size limits.CfWhether to ignore the contract initcode size limit \xe2\x80\xa6CdImplements crate::Cheatcode for pairs of cheatcodes.B`How many states to store at mostCjThe flag indicating whether to include values from storage0BeAccess the index of an entry by hash.0ClThe starting backoff delay to use after the first failed \xe2\x80\xa6AbAn initial balanceCjThe initial balance for each one of the deployed smart \xe2\x80\xa6BoThe initial balance of deployed test contracts.Cbthe initial balance of each deployed test contractCcThe initial balance of each deployed test contract.0BlInserts the account\xe2\x80\x99s code into the cache.0EaInserts a <em>new</em> <code>ForkDB</code> and issues a new local fork identifier000CbAdds a command to run after the project is cloned.CiReturns the directory in which dependencies should be \xe2\x80\xa6DeConverts the element-wise <code>Domain</code> into the equivalent \xe2\x80\xa60C`Consumes the account and returns its components.BbDissolves account into components.10CiTracks whether the API key provides was marked as invalid0Citracks whether the API key provides was marked as invalidC`Creates a new <code>InvalidRequest</code> error.AoCreates the invariant strategy.000DdReturns true if <code>forge</code> command was executed in given \xe2\x80\xa600000ChChecks if the call scheme corresponds to any sort of \xe2\x80\xa6CgA development contract is either a Script or a Test \xe2\x80\xa6CnIf true, then the branch anchor is the first opcode within \xe2\x80\xa600DbReturns true if the given <code>path</code> is the project\xe2\x80\x99s \xe2\x80\xa6000CoReturns true if the <code>addr</code> is currently impersonated0BoReturns whether the transaction is impersonatedBhReturn true of account info was changed.0CfAccount is not modified and just loaded from database.0CmReturns whether the result is a success or revert (not an \xe2\x80\xa60CjReturns true if the given path is allowed, if any path \xe2\x80\xa600CkReturns true if access to the specified path is allowed \xe2\x80\xa61EjReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.0CgReturns <code>true</code> if the present value is zero.0CkReturns <code>true</code> if this trace was a selfdestruct.00000BoTransform Visitable items to the list of chunksBoEVM State with journaling support and database.0CoJournaled state trait <code>JournalTr</code> and related types.11BmThe journaled_state state at a specific point221220000EfChecks if <code>key</code> exists in a JSON object <code>keyExists</code> is being \xe2\x80\xa600000CgKnown contracts linked with computed library addresses.AmKnown fully linked contracts.BbKnown contracts to search through.0CfGets the gas used in the last call from the callee \xe2\x80\xa600000CjKeeps track of (start_node_idx, start_item_idx) of the \xe2\x80\xa6CfThe entire inputs of the last run of the invariant \xe2\x80\xa6000AhReturn left or a default0C`Returns the location of the natspec as a string.DgEvent with signature <code>log_named_bytes(string,bytes)</code> and \xe2\x80\xa600oMake call frame0DnSimilar to <code>map_either</code>, with an added context <code>ctx</code> \xe2\x80\xa60CoConverts the <code>EthEvm::transact_commit</code> result to \xe2\x80\xa6ChThis will check off the markers of pending transactions.CiReturns maximum fee that can be paid for the transaction.0AhSet the max fee per gas.11101CnIf non-zero, give up the shrinking process after this many \xe2\x80\xa600DjHow often to retry a failed request. If <code>None</code>, defaults to \xe2\x80\xa6ChMerges the given coverage result into <code>self</code>.Cmmarkers required and have not been satisfied yet by other \xe2\x80\xa6ChAutomatically generates a BIP39 mnemonic phrase, and \xe2\x80\xa6CkMocks multiple calls to an address, returning specified \xe2\x80\xa600000CfMocks multiple calls to an address with a specific \xe2\x80\xa600000BkReturns true if the opcode modifies memory.0ClOnly run tests in contracts matching the specified regex \xe2\x80\xa6CaCreates a <code>console.log(string)</code> event.BhCreates a new raw <code>Bytecode</code>.0CiCreates a new memory instance with a given shared buffer.0CgDisables interactive prompts that might appear when \xe2\x80\xa6CgOverride the nonce of an account. Format: address:nonceClAttempts to canonicalize (see std::fs::canonicalize) the \xe2\x80\xa6000Blnotifies all listeners about the transactionF`Returns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code`Returns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code`Returns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</codebReturns the optimism goerli chain.oOriginal callerAoOriginal <code>tx.origin</code>CcOrigin of the transaction in the outer EVM context.CaComputes the absolute value of <code>self</code>.0CkCalculates $\\mod{\\mathtt{self} + \\mathtt{rhs}}_{2^{BITS}}$.BoCalculates <code>self</code> + <code>rhs</code>10BoCalculates <code>self</code> / <code>rhs</code>0BnCalculates the multiplication of self and rhs.BoCalculates <code>self</code> * <code>rhs</code>10BmCalculates $\\mod{-\\mathtt{self}}_{2^{BITS}}$.CmNegates self, overflowing if this is equal to the minimum \xe2\x80\xa610DhRaises self to the power of <code>exp</code> and if the result would \xe2\x80\xa6DiRaises self to the power of <code>exp</code>, using exponentiation by \xe2\x80\xa610BoCalculates <code>self</code> % <code>rhs</code>0ClLeft shift by <code>rhs</code> bits with overflow detection.BjShifts self left by <code>rhs</code> bits.CiSee <code>Uint::overflowing_shl</code> for documentation.210CnRight shift by <code>rhs</code> bits with underflow detection.BkShifts self right by <code>rhs</code> bits.CiSee <code>Uint::overflowing_shr</code> for documentation.210CkCalculates $\\mod{\\mathtt{self} - \\mathtt{rhs}}_{2^{BITS}}$.BoCalculates <code>self</code> - <code>rhs</code>10EnFormats <code>input</code> with <code>style</code> into <code>out</code>, without checking \xe2\x80\xa6EdReturns the <code>TracingInspectorConfig</code> for <code>TraceType::VmTrace</code>.000EeParses the given <code>string</code> into a <code>bool</code>. Container type for \xe2\x80\xa600000CfABI-encodes a JSON object. Function with signature \xe2\x80\xa600000DjABI-encodes a JSON object at <code>key</code>. Function with signature \xe2\x80\xa600000CeABI-encodes a TOML table. Function with signature \xe2\x80\xa600000DiABI-encodes a TOML table at <code>key</code>. Function with signature \xe2\x80\xa600000EhParses the given <code>string</code> into a <code>uint256</code>. Container type for \xe2\x80\xa600000CnParse a TOML string and return an array of all keys at the \xe2\x80\xa6ClReturns the index of the partition point of a sorted map \xe2\x80\xa6ClReturns the index of the partition point of a sorted set \xe2\x80\xa6101010CeThe contract address, or the path to an ABI DirectoryClVector of wallets that require an action to be unlocked. \xe2\x80\xa6CjPopulates the traces with decoded data by mutating the \xe2\x80\xa600ClConfigures the API request to the sourcify API using the \xe2\x80\xa6CjPretty print calldata and if available, fetch possible \xe2\x80\xa60BjPrevious account status before the change.CfMostly needed when previous status Loaded/LoadedEmpty.1010101010CkGet the path of the current project root. Function with \xe2\x80\xa600000CgOptional signer provided as <code>--sender</code> flag.000CjReturns a random byte array value of the given length. \xe2\x80\xa600000DgReturns a random <code>int256</code> value. Function with signature \xe2\x80\xa600000DkReturns a random <code>int256</code> value of given bits. Function with \xe2\x80\xa600000BhReturns EIP-2718 encoded raw transactionEgReads the current <code>msg.sender</code> and <code>tx.origin</code> from state and \xe2\x80\xa600000ClReads the directory at the given path recursively, up to \xe2\x80\xa600000DcSee <code>readDir(string)</code>. Container type for the return \xe2\x80\xa600000000000CmReads next 16 bits as signed integer from the bytecode at \xe2\x80\xa60ClReads next 16 bits as unsigned integer from the bytecode \xe2\x80\xa60AiRead all bytes until EOF.0Cm\xe2\x9a\xa0\xef\xb8\x8f Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - \xe2\x80\xa60BgRecords storage slots reads and writes.AnRegenerates the bytecode hash.0ClAdds a private key to the local forge wallet and returns \xe2\x80\xa600000ClRemoves a directory at the provided path. This cheatcode \xe2\x80\xa600000DfGiven a <code>Project</code>\xe2\x80\x99s output, removes the matching ABI, \xe2\x80\xa60Cgamount of required markers that are inherently providedCkResets the backend to a fresh in-memory state, clearing \xe2\x80\xa6CkResolves VerificationContext object either from entered \xe2\x80\xa6AeRuns the system call.000oSee SafeUnwrap.0DiConstruct a new <code>Uint</code> from the value saturating the value \xe2\x80\xa60CnThe second of the two contracts for which to look selector \xe2\x80\xa6CbSets the maximum number of stats we keep in memoryBcSets the current working directory.BbSets the mining mode to operate inCmSets whether the next print should clear the current line \xe2\x80\xa6BoConfigure whether the tracer should record logs000CfConfigure whether the tracer should record state diffs000BlContracts deployed with <code>setUp()</code>CkWhether execution should continue after inspecting this \xe2\x80\xa6CkShrinks the failure case to its smallest sequence of calls.AlReturns the shutdown signal.CnHelper function to sign and attach (if needed) an EIP-7702 \xe2\x80\xa6CgEncodes and signs the typed data according EIP-712. \xe2\x80\xa6AgSigns data via EIP-712.ClSigner accounts that can sign messages/transactions from \xe2\x80\xa60BcSkip Cargo.toml consistency checks.AjSkips on-chain simulation.nSolidityHelperAhCreate a source providerCmSplits the bit-slice into mutable references of its first \xe2\x80\xa6CkReturns the first key-value pair and the rest of the slice,10CjIterates over subslices separated by bits that match a \xe2\x80\xa60BnEnable recording of individual stack snapshots000AkThe changeset of the state.00BmOverride the state of an account. Format: \xe2\x80\xa6BmReturns all snapshots created in this backendC`Contains state snapshots made at a certain point101010BjHolds the state snapshots of a blockchain.BlThe number of statements in the source file.00EhResets subsequent calls\xe2\x80\x99 <code>msg.sender</code> to be <code>address(this)</code>. \xe2\x80\xa600000CnAn ordered list of storage accesses made during an account \xe2\x80\xa600000CkCreates a journal entry for when a storage slot is modified00000BmReturns the inner <code>Authorization</code>.0BdUsed for submitting mining hashrate.B`Individual test suites progress.CnReturns an iterator over coverage summaries by source file \xe2\x80\xa600BeThe name of the contract in the file.BiThe name of the contract you want to run.DgConverts the given <code>string</code> value to Lowercase. Function \xe2\x80\xa600000DgConverts the given <code>string</code> value to Uppercase. Function \xe2\x80\xa600000DfConverts the <code>Uint</code> to a big-endian byte vector of size \xe2\x80\xa6CiSee <code>Uint::to_be_bytes_vec</code> for documentation.10CkEncodes an Ethereum address to its EIP-55 checksum into \xe2\x80\xa60CkReturns the number expressed as a string in exponential \xe2\x80\xa60DiConverts the <code>Uint</code> to a little-endian byte vector of size \xe2\x80\xa60ClHelper to convert the fractional part of a number into a \xe2\x80\xa6DjReturns <strong>all</strong> addresses in the recorded traces, that is \xe2\x80\xa600CaTransact the transaction and commit to the state.00000AeThe transaction hash.00000DeReturns <code>true</code> if the call will transfer a non-zero value.0DiAttempts to view <code>self</code> as a mutable bit-slice region with \xe2\x80\xa6000DeTries to collect the elements of an iterator into a <code>Vec</code>.0CiTries to create a new fixed byte array with the given \xe2\x80\xa6DgTries to create a new <code>FixedBytes</code> with the given random \xe2\x80\xa6111011CkTries to write the table to the buffer. Doesn\xe2\x80\x99t write \xe2\x80\xa6BnCompute the two\xe2\x80\x99s complement of this number.0oThe unknown key0BlPassword for the JSON keystore in cleartext.CgPassword for the JSON keystore in cleartext This is \xe2\x80\xa600ClCurrent password for the JSON keystore in cleartext This \xe2\x80\xa6CnValidate that a source snippet is closed (i.e., all braces \xe2\x80\xa6ClValidate transaction against block and configuration for \xe2\x80\xa60BnSingle-Type <code>BitOrder</code> Verification0BnMap of version name -&gt; full version detailsBbDraws the layout in vertical mode.Cnmapping of the markers of a transaction to the hash of the \xe2\x80\xa6BiReturns the cache file for the given hashBeSets the path where states are cachedAjSets the init state if anyDeSets whether to print <code>console.log</code> invocations to stdout.CaDon\xe2\x80\x99t include a summary at the end of the trace0ClCreates a new bit-pointer at a specified offset from the \xe2\x80\xa60CnWrites data to file, creating a file if it does not exist, \xe2\x80\xa600000CiWrite a serialized JSON object to a file. If the file \xe2\x80\xa600000DmWrite a serialized JSON object to an <strong>existing</strong> JSON file, \xe2\x80\xa600000CnWrites line to file, creating a file if it does not exist. \xe2\x80\xa600000CgTakes serialized JSON, converts to TOML and write a \xe2\x80\xa600000000000CkSets whether contract creation codes and deployed codes \xe2\x80\xa600BcWrites the object as a JSON object.CjWrites a list item to the buffer indented by specified \xe2\x80\xa6AmWrite semicolon to the bufferAjSingle-Bit Unaligned WriteCiWrites a bit into memory, tolerating unaligned addresses.10CiAccess list type is introduced in EIP-2930, and every \xe2\x80\xa6000CjMark account to be destroyed and journal balance to be \xe2\x80\xa60000000AgCan create dev accounts0BaSet the executor (sponsor) walletBcHolds data about arbitrary storage.BbSize of the bloom filter in bytes.0DbError for <code>from_base_le</code> and <code>from_base_be</code>.BkError from <code>Uint::from_base_be</code>.10CkA benchmark project that represents a cloned repository \xe2\x80\xa6AlAggregated benchmark resultsDiThrown when the block\xe2\x80\x99s <code>blob_gas_price</code> is greater than \xe2\x80\xa6ChExecution skipped because it exceeded the blob gas limitCkrelevant identifying markers in the context of BlockchainDb000CmState after we have broadcasted the script. It is assumed \xe2\x80\xa6CiIterator over opcodes in a bytecode, skipping immediates.0AdEVM call stack limit000AgThe call trace decoder.000CaCustom Clap value parser for <code>Chain</code>s.0AgChisel input dispatcherAiChisel binary subcommandsAnAnti-Aliasing Iterator Adapter0AjContains all fork metadataCeHelpers for iterating over comment containing stringsBnType alias for database errors from a context.BkType alias for frame error within a context10CdThe programming language used for smart contract \xe2\x80\xa6AcCould not read TOML0AdA coverage reporter.CbCLI arguments for <code>cast creation-code</code>.BaDefault mnemonic for dev accountsCnWalks through the CallTraceSteps attempting to match JUMPs \xe2\x80\xa6BgDecimal separator for number formatting0C`Additional decoded data enhancing the CallTrace.00EeFor a delete expr x <code>delete foo</code>, replace x with <code>assert(true)</code>Bi<code>deployedBytecode</code> is unlinked0CaThe account has been destroyed and then modified.00000BoVisitor struct for <code>EarlyLintPass</code>es0DgAlias for result type returned by <code>Evm::transact_commit</code> \xe2\x80\xa6CkReturns an array of all logs matching filter with given id.AgSigns data via EIP-712.BaThe name of an Ethereum hardfork.BoContainer type for Etherscan API keys and URLs.BdA rate limit aware Etherscan client.DjExtension of the <code>ExecuteEvm</code> trait that adds a method that \xe2\x80\xa600000AjThe type of expected call.CiThe name of the directory foundry reserves for itself \xe2\x80\xa6AmFoundry versions to benchmarkCdFrontier Thawing hard fork Activated at block 200000CcString identifier for the Frontier Thawing hardfork10CmDetermines what providers should be used when loading the \xe2\x80\xa6ChDecode ABI-encoded calldata using https://openchain.xyz.Dh<code>bytes32(&quot;failed&quot;)</code>, as a storage slot key into \xe2\x80\xa6000BfA general entry in a gas snapshot fileBeA type for creating geth style traces00BeInitial base fee for EIP-1559 blocks.CeEach of the modexp length inputs (length_of_BASE, \xe2\x80\xa60CbAn index provided was out-of-bounds for the slice.0AeAn inline config item0CiContains data about the state of outer/main EVM which \xe2\x80\xa6ClInspectCommitEvm is a API that allows inspecting similar \xe2\x80\xa6000DfTrait that extends <code>Handler</code> with inspection functionality.000CnInstruction table is list of instruction function pointers \xe2\x80\xa6000AbInterpreter types.CmTrait defining the component types used by an interpreter \xe2\x80\xa60100ChContains invariant metrics for a single fuzzed selector.00BhContains data for an invariant test run.00ChWhen running tests, we deploy all external libraries \xe2\x80\xa6ClListens for new blocks and matching logs emitted in that \xe2\x80\xa6ClHow many request can time out before we decide this is a \xe2\x80\xa6BfContainer type for a mined transactionCdThe type that manages connections in the background.0000BgStyle of underscores in number literals0CkPADDED_FP_LENGTH specifies the number of bytes that the \xe2\x80\xa60CkPADDED_G1_LENGTH specifies the number of bytes that the \xe2\x80\xa60CkPADDED_G2_LENGTH specifies the number of bytes that the \xe2\x80\xa60DfPair element length. <code>PAIR</code> elements are composed of an \xe2\x80\xa60CkKZG point evaluation precompile, containing address and \xe2\x80\xa60BgThe PointEvaluation precompile address.AdPrompt arrow string.CkWrite function parameters multiline first when there is \xe2\x80\xa60CiThe error type that is returned when parsing a signed \xe2\x80\xa60AkPrecompile execution output000BbA precompile operation result type000CjEthereum hardfork spec ids. Represents the specs where \xe2\x80\xa60CnContainer for all the <code>Precompiles</code> function calls.CmKeeps data about project contracts definitions referenced \xe2\x80\xa6Cg<code>prevrandao</code> is not set for Merge and above.0CeContains a map of RPC urls to single instances of \xe2\x80\xa6CaRepresents a connection to a client via websocketCkThe general purpose trait for handling RPC requests and \xe2\x80\xa60AnAnti-Aliasing Iterator Adapter0ClRecovery an EIP-7702 authority from a Authorization JSON \xe2\x80\xa6ClWhen performing SSTORE the gasleft is less than or equal \xe2\x80\xa60BeResolved compiler within the project.BnRepresents possible diagnostic cases on revertClAn inspector that tracks call context to enhances revert \xe2\x80\xa60100111CmCommon parameters for expected or assumed reverts. Allows \xe2\x80\xa6CfRuntime transport that only connects on first request.CmRAII structure used to release the exclusive write access \xe2\x80\xa6ChDeterministic fuzzer seed used for gas snapshots and \xe2\x80\xa6Db<code>IndexMap</code> optimized for hashing <code>Selector</code>.0Db<code>IndexSet</code> optimized for hashing <code>Selector</code>.0BoCloneable wrapper around SequenceProgressState.CjHolds a signed EIP-7702 authorization for an authority \xe2\x80\xa600000EcBundles multiple <code>SkipBuildFilter</code> into a single <code>FileFilter</code>>>AjTransaction gas limit cap.0CfA contract identified as target for invariant testing.00AcTest function kind.BbConfiguration for the test runner.CmA convenience provider to retrieve a toml file. This will \xe2\x80\xa6BbA collection of trace identifiers.00DhTrace transaction endpoint for parity\xe2\x80\x99s <code>trace_transaction</code>BgAn inspector that collects call traces.00000BaTransaction validity error types.0ChModes that determine the transaction ordering of the \xe2\x80\xa6BmStructure used for EIP-1153 transient storage0EnImplements <code>TryFrom&lt;Primitive&gt;</code> for a <code>#[repr(Primitive)] enum</code>\xe2\x80\xa60BnContainer type for signed, typed transactions.BeError when encountering unlinked code0EhEnum to represent the type of verification: <code>full</code> or <code>partial</code>\xe2\x80\xa6CjGenerate warnings for unknown sections and deprecated keys0BcReturns the Abstract testnet chain.ClUtility cheatcode to set an EIP-2930 access list for all \xe2\x80\xa600000CmRetrieves the activation block for the specified hardfork \xe2\x80\xa6ChReturns the identifier of the currently active fork. \xe2\x80\xa600000CgLocks inner Mutex and adds a signer to the MultiWallet.00AlAdds new active subscriptionAoDeals ERC20 tokens to a addressCkCreate a buffer that represents all state on the chain, \xe2\x80\xa6CnAppend chain state buffer to current chain. Will overwrite \xe2\x80\xa6AkApply EIP-2930 access list.BlApplies evm transitions to transition state.0BcReturns the arbitrum mainnet chain.BcReturns the arbitrum sepolia chain.BcReturns the arbitrum testnet chain.CiFilters contracts to be fuzzed through their artifact \xe2\x80\xa6CkProduces a range of mutable bit-pointers to each bit in \xe2\x80\xa60ClViews the bit-array as a mutable slice of its underlying \xe2\x80\xa6CbViews the type as a mutable slice of its elements.CmViews the bit-vector as a mutable slice of its underlying \xe2\x80\xa61CjViews the bit-box as a mutable slice of its underlying \xe2\x80\xa632102FcConverts a <code>U256</code> value to a <code>u64</code>, saturating to <code>MAX</code> if the \xe2\x80\xa60EgConverts a <code>U256</code> value to a <code>usize</code>, failing the instruction \xe2\x80\xa60DkAsserts that two <code>bool</code> values are equal. Container type for \xe2\x80\xa600000DjAsserts that two <code>bool</code> values are equal and includes error \xe2\x80\xa600000DjAsserts that two <code>uint256</code> values are equal. Container type \xe2\x80\xa600000DgAsserts that two <code>uint256</code> values are equal and includes \xe2\x80\xa600000DiAsserts that two <code>int256</code> values are equal. Container type \xe2\x80\xa600000DfAsserts that two <code>int256</code> values are equal and includes \xe2\x80\xa600000DjAsserts that two <code>address</code> values are equal. Container type \xe2\x80\xa600000DgAsserts that two <code>address</code> values are equal and includes \xe2\x80\xa600000DjAsserts that two <code>bytes32</code> values are equal. Container type \xe2\x80\xa600000DgAsserts that two <code>bytes32</code> values are equal and includes \xe2\x80\xa600000DgCompares two <code>uint256</code> values. Expects first value to be \xe2\x80\xa600000000000DfCompares two <code>int256</code> values. Expects first value to be \xe2\x80\xa600000000000111111111111000000000000111111111111DkCompares two <code>int256</code> values. Expects first value to be less \xe2\x80\xa600000000000222222222222000000000000CkAsserts that the given condition is true. Function with \xe2\x80\xa600000CiAsserts that the given condition is true and includes \xe2\x80\xa600000DgCreates a temporary file, passes it to <code>f</code>, then asserts \xe2\x80\xa6CjAssume next call can revert and discard fuzz run if it \xe2\x80\xa6000000CkAttach an EIP-4844 blob to the next call Container type \xe2\x80\xa600000CgWhether to autodetect the solc compiler version to use.CkEnables automatic impersonation on startup. This allows \xe2\x80\xa6CjCreates a journal entry for a balance transfer between \xe2\x80\xa600000BiTrack the baseline version for comparisonAdBenchmark forge testCdSearch over a sorted map with a comparator function.CdSearch over a sorted set with a comparator function.101010ClSets the blobhashes in the transaction. Not available on \xe2\x80\xa600000CfReturns the path where the cache file should be storedAeThe block difficulty.CmThe <code>block.difficulty</code> value during EVM execution.Bothe block.difficulty value during EVM execution0BbReturns the DB block_hashes length000CmThe block prevrandao value. NOTE: Before merge this field \xe2\x80\xa6DcBefore merge the <code>block.max_hash</code>, after merge it is \xe2\x80\xa6CjPrevious block beacon chain random value. Before merge \xe2\x80\xa60ClWrites a breakpoint to jump to in the debugger. Function \xe2\x80\xa600000CkWrites a conditional breakpoint to jump to in the debugger.00000CnGrab number from buffer. Used for something like \xe2\x80\x9810k\xe2\x80\x99 \xe2\x80\xa6CgStores fuzz state for use with fuzz_calldata_from_state00AoInserts all logs into the bloomCaReturns the size hint for the inner bundle state.0CnAddress of the bytecode that is being executed. This field \xe2\x80\xa6CgThe account address of bytecode that is going to be \xe2\x80\xa610CjReturns bytecode address of the call. For DELEGATECALL \xe2\x80\xa621210AmConstructor call args offset.ChIterates over non-overlapping mutable subslices of a \xe2\x80\xa60CmClones a source account code, state, balance and nonce to \xe2\x80\xa600000AnGets account code by its hash.00000AfCollects all warnings.ChSets whether to color calls to the cheatcode address \xe2\x80\xa600DaThe <code>solc</code> version to use to build the smart contract.CnConfigures the env for the given RPC transaction. Accounts \xe2\x80\xa6000AjThe constructor arguments.CmReturn the optional encoded constructor arguments. If the \xe2\x80\xa6CcThe constructor args to generate the creation code.BfThe ABI-encoded constructor arguments.AoConstructor parameters, if any.CiChecks if the access list contains the specified address.0CnTrue if the bloom filter contains a log with given address \xe2\x80\xa60CjChecks if a specific storage slot within an account is \xe2\x80\xa60CfContract address created, or None if not a deployment.ClOnly run tests in contracts matching the specified regex \xe2\x80\xa600ClConvert fixed bytes and address values to bytes in order \xe2\x80\xa6DhWrites the big-endian representation of the <code>Uint</code> to the \xe2\x80\xa60DkWrites the little-endian representation of the <code>Uint</code> to the \xe2\x80\xa60BeReturns the CREATE2 deployer address.AmThe CREATE2 deployer address.10CkThe CREATE2 deployer address to use, this will override \xe2\x80\xa6BdThe CREATE2 deployer address to use.322BaThe CREATE2 deployer\xe2\x80\x99s address.40DfCreates a new fork with the given endpoint and the <em>latest</em> \xe2\x80\xa600000ClCreates a new fork with the given endpoint and block and \xe2\x80\xa600000CiCreates a new fork with the given endpoint and at the \xe2\x80\xa600000BoCreate the cache directory if it does not existCfReturns mutable references to both the context and \xe2\x80\xa6000CkGet the current written position (this does not include \xe2\x80\xa6BiReturns the receipts of the current blockBnOptional identifier of individual trace steps.000CkReturns traces for the transaction for geth\xe2\x80\x99s tracing \xe2\x80\xa6CgDecodes the given function or event selectors using \xe2\x80\xa6CnDecodes the given function, error or event selectors using \xe2\x80\xa6CjDeploys a contract from an artifact file. Takes in the \xe2\x80\xa600000000000000000000000CgDeploys a contract from an artifact file, using the \xe2\x80\xa600000000000000000000000BaStatus of selfdestruction revert.0000000DjSets <code>block.difficulty</code>. Not available on EVM versions from \xe2\x80\xa600000CbDisables base fee checks for EIP-1559 transactions000AjDispatches a ChiselCommandBjRemoves a single transaction from the poolCmSet whether to enable the call isolation. For description \xe2\x80\xa6BeSet whether to enable call isolation.CkWhether to enable call isolation. In isolation mode all \xe2\x80\xa62100210DaReturns an error if the <code>exit</code> code is <em>not</em> okEhGets the environment variable <code>name</code> and parses it as <code>address</code>\xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000EhGets the environment variable <code>name</code> and parses it as <code>bytes32</code>\xe2\x80\xa600000111111EhGets the environment variable <code>name</code> and parses it as <code>bytes</code>. \xe2\x80\xa600000222222CiFetches source code of verified contracts from etherscan.CnEvaluate multiple Solidity source files contained within a \xe2\x80\xa6BeProcesses the final execution output.000CmExpects a call to an address with the specified calldata. \xe2\x80\xa600000ChExpects given number of calls to an address with the \xe2\x80\xa600000DjExpects a call to an address with the specified <code>msg.value</code> \xe2\x80\xa600000111111DjExpect a call to an address with the specified <code>msg.value</code>, \xe2\x80\xa600000222222CkExpects the deployment of the specified bytecode by the \xe2\x80\xa600000ChPrepare an expected log with (bool checkTopic1, bool \xe2\x80\xa600000CiSame as the previous method, but also checks supplied \xe2\x80\xa600000CjPrepare an expected log with all topic and data checks \xe2\x80\xa600000111111CkExpect a given number of logs with the provided topics. \xe2\x80\xa600000CnExpect a given number of logs from a specific emitter with \xe2\x80\xa600000CiExpect a given number of logs with all topic and data \xe2\x80\xa600000111111A`Expected creates000000CkAlternative explorer API URL to use that adheres to the \xe2\x80\xa6Ca<code>EXTCODECOPY</code> opcode cost calculation.0CiExtends the decoder with the given ABI\xe2\x80\x99s custom errors.000CmExtends the location to the next instance of a character. \xe2\x80\xa6GbConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>\xe2\x80\xa60DkApproximates <code>factor * e ** (numerator / denominator)</code> using \xe2\x80\xa60DgReturns the path to the <code>foundry.toml</code> file, the file is \xe2\x80\xa6CeFind the next instance of the character in source \xe2\x80\xa6CgReturns the canonicalized target path for the given \xe2\x80\xa6ClPretty-prints the given value into a string suitable for \xe2\x80\xa60A`foundry-debuggerCeReturns the path to foundry\xe2\x80\x99s global TOML file: \xe2\x80\xa6A`foundry-evm-coreA`foundry-evm-fuzzBbConvert from a bits value exactly.0EhConverts a <code>Box&lt;[T]&gt;</code> into a <code>BitBox&lt;T, O&gt;</code>, in place.0CkCreate new instance of Comment from DocCommentTag if it \xe2\x80\xa6DlConstructs an exclusive <code>&amp;mut BitSlice</code> reference over an \xe2\x80\xa60ChConverts fixed point number into specified number of \xe2\x80\xa6CmReturns a config for geth style traces based on the given \xe2\x80\xa6000CiConstruct a new integer from little-endian a slice of \xe2\x80\xa60CfConverts an ECDSA signing key to its corresponding \xe2\x80\xa60CjCompute the Lehmer update matrix in full 64 bit precision.0DgDecode a native endian UTF-16\xe2\x80\x93encoded slice <code>v</code> into a \xe2\x80\xa60BlResolves the sender from the wallet options.CjGiven a path, query the file system to get information \xe2\x80\xa600000ChReturns fuzzed contract abi and fuzzed function from \xe2\x80\xa600ClReturns flatten target contract address and functions to \xe2\x80\xa600AhThe priority fee per gasAhSet the gas priority fee1101CdGenerate all mutant corresponding to a given contextAdThe generated outputDjAccounts that will be initialised with <code>genesis_balance</code> in \xe2\x80\xa6CaSigner accounts that will be initialised with \xe2\x80\xa60ClReturns the most recent broadcast for the given contract \xe2\x80\xa600000ClReturns a Chain struct for specific alias Container type \xe2\x80\xa600000CnReturns a Chain struct for specific chainId Container type \xe2\x80\xa600000ChGets the nonce of an account. Container type for the \xe2\x80\xa600000DiGet the nonce of a <code>Wallet</code>. Container type for the return \xe2\x80\xa600000DkReturns state diffs from current <code>vm.startStateDiffRecording</code>\xe2\x80\xa600000CjReturns addresses of available unlocked wallets in the \xe2\x80\xa600000CmReturns the account information including balance, nonce, \xe2\x80\xa6BcGet the capabilities of the wallet.0DjAttempts to get mutable references to <code>N</code> values in the map \xe2\x80\xa6DhReturn the values for <code>N</code> keys. If any key is duplicated, \xe2\x80\xa6DhGet an array of <code>N</code> key-value pairs by <code>N</code> indices210BeRead preprocessor result from contextCjReturns MultiWallet container configured with provided \xe2\x80\xa6CnReturns the command\xe2\x80\x99s stdout if execution is successful, \xe2\x80\xa6BiReturns an iterator over all transactionsCaGenerate a geth-style traces for the call tracer.00CnHelper function to analyze and extract bytecode dependency \xe2\x80\xa6CjReturn new contract bytecode if it is changed or newly \xe2\x80\xa60ClStrips the 0x prefix from a hex string and decodes it to \xe2\x80\xa6Ccuploads selectors to OpenChain using the given data0C`Flag marking if we are in the inner EVM context.ChReturns <code>true</code> if reverts should be retained.0BbInitialize the global thread pool.0CcAttempts to convert inline links to markdown links.CmInsert values from initial db state into fuzz dictionary. \xe2\x80\xa6CjReturns list of addresses and storage keys used by the \xe2\x80\xa600CnReturns the resulting <code>DynSolType</code> of indexing selfClConverts the bit-box back into an ordinary boxed element \xe2\x80\xa6CmConverts into a boxed slice of all the key-value pairs in \xe2\x80\xa6CiConverts into a boxed slice of all the values in the set.210FkConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if \xe2\x80\xa60CmConverts the bundle state into a <code>StateChangeset</code>.0CkSearch for transactions in the broadcast that match the \xe2\x80\xa6BbReturns the invariant test result.ChReturns true if the account is marked as persistent. \xe2\x80\xa600000DgReturns <code>true</code> if the given function calldata (including \xe2\x80\xa6DfReturns <code>true</code> if this function is a test that should fail.0C`Returns true if it is <code>DELEGATECALL</code>.0CjReturns whether this type is a dynamic array (can call \xe2\x80\xa6BoMatches file only if the filter does not apply.DeReturns <code>true</code> if the function is a test function that \xe2\x80\xa6ChReturns <code>true</code> if the original value is zero.0CkThis means storage is known, it can be newly created or \xe2\x80\xa60CkReturns the base item ID and all the coverage items for \xe2\x80\xa600C`Generate test report in JUnit XML report format.BkThe decoder used to decode traces and logs.DkLoad a genesis JSON file\xe2\x80\x99s <code>allocs</code> into the in-memory EVM \xe2\x80\xa600000CiDeserialize and add all chain data to the backend storageDiEvent with signature <code>log_named_string(string,string)</code> and \xe2\x80\xa600BbMark a symbol as used in a source.CjMatch the first word of the comment with the expected. \xe2\x80\xa6C`Returns whether the contract should be included.0CcReturns the maximum number of blobs allowed per \xe2\x80\xa6CkBlob max count. EIP-7840 Add blob schedule to EL config \xe2\x80\xa61011101011ChReturns the maximum runtime code size, excluding dev \xe2\x80\xa6CeReturns the configured limit on shrinking iterations.CdGive up on shrinking if more than this number of \xe2\x80\xa61010CiThe maximum number of test case rejections allowed by \xe2\x80\xa60Bimaximum number of transactions in a blockBghow many transactions to mine per block1CmIt finds the deployer from the running script and uses it \xe2\x80\xa6BgWhether this is a call to a precompile.00BmReturns the state root if possible to computeBoEnable recording of individual memory snapshots000AaAttempt to lookupBlMerge original toml table with the override.C`Creates a new <code>MethodNotFound</code> error.CbUse the private key from the given mnemonic index.00CiMocks a call to an address, returning specified data. \xe2\x80\xa600000DfMocks a call to an address with a specific <code>msg.value</code>, \xe2\x80\xa600000111111000000EhWhenever a call is made to <code>callee</code> with calldata <code>data</code>, this \xe2\x80\xa600000CnMocked functions. Maps target address to be mocked to pair \xe2\x80\xa6000000BiImplements the gas schedule for G1/G2 \xe2\x80\xa60ClCreates a filter in the node, to notify when a new block \xe2\x80\xa6AoCreate new LoadedEmpty account.0E`Creates a new <code>OutFrame</code> from a raw pointer to a type <code>T</code>.0C`Creates new account and mark it as non existing.BcCreates a new non-existing account.10BoReturns a URL that has access to archive state.CjCalculates the smallest value greater than or equal to \xe2\x80\xa60AlReturns the next WS RPC URL.ClUtility cheatcode to remove any EIP-2930 access list set \xe2\x80\xa600000BkExecutes the future on a new blocking task.FaReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</codecReturns the optimism mainnet chain.BcReturns the optimism sepolia chain.ChProgress bar counting completed / remaining test suites.ChPrint space in state variable, function and modifier \xe2\x80\xa60EhReturns the <code>TracingInspectorConfig</code> for <code>TraceType::StateDiff</code>\xe2\x80\xa6000EdParses the given <code>string</code> into an <code>address</code>. Function with \xe2\x80\xa600000EcParses the given <code>string</code> into a <code>bytes32</code>. Function with \xe2\x80\xa600000EhParses the given <code>string</code> into <code>bytes</code>. Container type for the \xe2\x80\xa600000DfParses a string of JSON data at <code>key</code> and coerces it to \xe2\x80\xa600000DfParses a string of TOML data at <code>key</code> and coerces it to \xe2\x80\xa600000CcParse doc comments from the within specified range.CkParses a list of tokens into function, event, and error \xe2\x80\xa6EfParses all libraries in the form of <code>&lt;file&gt;:&lt;lib&gt;:&lt;addr&gt;</code>CnPauses collection of call traces. Useful in cases when you \xe2\x80\xa600000DkExtends the <code>Visit</code> trait functionality with a hook that can \xe2\x80\xa6C`Return the balance of account before transition.0DeSets <code>block.prevrandao</code>. Not available on EVM versions \xe2\x80\xa600000000000CkPrompts the user for a hidden string value in the terminal.00000CkPrompts the user for uint256 in the terminal. Container \xe2\x80\xa600000ClReturns protocol version encoded as a string (quotes are \xe2\x80\xa6CiProve an account\xe2\x80\x99s existence or nonexistence in the \xe2\x80\xa6Ckmarkers that are provided by <code>ReadyTransaction</code>sDeReturns a random <code>bool</code>. Container type for the return \xe2\x80\xa600000CgReturns a random fixed-size byte array of length 4. \xe2\x80\xa600000CgReturns a random fixed-size byte array of length 8. \xe2\x80\xa600000CkReturns a random uint256 value. Function with signature \xe2\x80\xa600000CkReturns random uint256 value between the provided range \xe2\x80\xa600000DgReturns a random <code>uint256</code> value of given bits. Function \xe2\x80\xa600000CjCreates a raw entry builder for the <code>IndexMap</code>.000DhReconfigures all fields using the given <code>config</code>. This is \xe2\x80\xa6CkRecord all the transaction logs. Container type for the \xe2\x80\xa600000DjRecovers a <code>VerifyingKey</code> from this signature and the given \xe2\x80\xa60CjReturns unused gas costs to the transaction sender\xe2\x80\x99s \xe2\x80\xa60BeReimburses the caller for unused gas.110CkRemoves a file from the filesystem. This cheatcode will \xe2\x80\xa600000Cemarkers that aren\xe2\x80\x99t yet provided by any transactionCjResets the nonce of an account to 0 for EOAs and 1 for \xe2\x80\xa600000AiReturn right or a default0CkUpdates the currently active fork to given block number \xe2\x80\xa600000CkUpdates the currently active fork to given transaction. \xe2\x80\xa600000CkUpdates the given fork to given block number. Container \xe2\x80\xa600000CgUpdates the given fork to block number of the given \xe2\x80\xa600000AkCurrently running artifact.000000CiChecks the incoming raw log against the expected logs \xe2\x80\xa6DkTakes a fork identifier created by <code>createFork</code> and sets the \xe2\x80\xa600000CnSelects the functions to fuzz based on the contract method \xe2\x80\xa600AmReturns the selected profile.AcSends a transactionAgSerialized JSON values.000000AfGet the current state.AiReturns the current stateCiSet blockhash for the current block. It only sets the \xe2\x80\xa600000BdSets the block base fee if provided.000AeSets the block numberBdSet a refund value for final refund.0BkUpdates the pinned block to fetch data from000BaSet a storage slot of an account.00ChWe only broadcast transactions if \xe2\x80\x93broadcast or \xe2\x80\x93\xe2\x80\xa6CeThe maximum number of attempts to shrink the sequence0A`Shrink run limitDhConverts the <code>sig</code> argument into the corresponding file path.Cjsigns a transaction request using the given account in \xe2\x80\xa6AcSigns a transactionCgSort the map\xe2\x80\x99s key-value pairs in place using the \xe2\x80\xa6CiSort the set\xe2\x80\x99s values in place using the comparison \xe2\x80\xa610BoSplit the comment at first word. Useful for \xe2\x80\xa6DhSets all subsequent calls\xe2\x80\x99 <code>msg.sender</code> to be the input \xe2\x80\xa600000000000DkSets all subsequent delegate calls\xe2\x80\x99 <code>msg.sender</code> to be the \xe2\x80\xa600000000000ClStops recording storage reads and writes. Container type \xe2\x80\xa600000BeStrips BuildMetadata from the VersionDjRemove the key-value pair equivalent to <code>key</code> and return it \xe2\x80\xa6ClRemove the value from the set return it and the index it \xe2\x80\xa610C`Returns and clears all reverts from BundleState.0CfTakes the next action from the control and returns it.0CkReference to which contract we want a fuzzed calldata from.000DiEncodes a <code>bytes</code> value to a base64 string. Container type \xe2\x80\xa600000DjEncodes a <code>string</code> value to a base64 string. Container type \xe2\x80\xa600000DiConverts the given value to a <code>string</code>. Container type for \xe2\x80\xa600000000000000000000000000000000000CdConvert the SessionSource to a valid Script contractBnSerialize the config type as a String of TOML.BiSerialize the config as a String of TOML.CjReturns the total difficulty of the chain until this blockCbThe total difficulty of the chain until this blockBntotal difficulty of the chain until this blockAiGet the total indent sizeCjFetches the given transaction from the active fork and \xe2\x80\xa600000CiFetches the given transaction from the given fork and \xe2\x80\xa600000CnExecutes a given TransactionRequest, commits the new state \xe2\x80\xa6000BcThe transaction index in the block.00000CfReturns the transaction hash we forked off of, if any.BnThe transaction hash we forked off of, if any.BiReturns the transaction hash to fork fromAaTransaction Hash.AfTransaction type enum.0ClBlock state, it aggregates transactions transitions into \xe2\x80\xa60AlTransition state management.11111101111BaReturns the RLP for this account.DkSets <code>tx.gasprice</code>. Container type for the return parameters \xe2\x80\xa600000BnReturns the gas limit cap for the transaction.CaConfigures the gas limit cap for the transaction.1011101011BcReturns the Unichain mainnet chain.BcReturns the Unichain sepolia chain.CjHandler for ETH RPC call: <code>eth_uninstallFilter</code>CfRemoves the filter identified with the <code>id</code>AoUpdates the fork\xe2\x80\x99s entire env000DiReturns the <code>lib/paths</code> of the dependencies that have been \xe2\x80\xa6CaUpdates the env\xe2\x80\x99s block with the block\xe2\x80\x99s dataCaThe verifier API KEY, if using a custom provider.CiGiven the broadcast log, it matches transactions with \xe2\x80\xa6AaVerify KZG proof.0ClVisit the right side of an assignment. The function will \xe2\x80\xa6CmTraverses a set of pendings and either finds receipts, or \xe2\x80\xa6ChReturns an infinite parallel iterator which yields a \xe2\x80\xa6AfWarms the precompiles.00000DkReturns the <code>watchexec::Config</code> necessary to bootstrap a new \xe2\x80\xa6BmCreates a new <code>watchexec::Config</code>.11CmHelper function to execute a closure with the database at \xe2\x80\xa6CeSets the <code>eth_rpc_url</code> to use when forkingCiSets the <code>fork_choice</code> to use to fork off fromBgAppends global-level code to the sourceCnCreates a new context with a new journal type. New journal \xe2\x80\xa60CeConsumes self and returns new Evm type with given \xe2\x80\xa60EfConstructs a <code>Config</code> only differing from the <code>default()</code> in \xe2\x80\xa600BbSets state diff recording to true.000CiReturns true of the difference between the gas values \xe2\x80\xa6CmWrap a fixed-size byte array in a newtype, delegating all \xe2\x80\xa60DiWrite a quoted string. See <code>Formatter::quote_str</code> for more \xe2\x80\xa6BiThe kind of account access that occurred.00000CnDepending on previous state of account info this will tell \xe2\x80\xa60AhAccount state diff info.DhNote the correct name for BSC should be <code>BNB Smart Chain</code> \xe2\x80\xa6mBlake2 errors000CaStores the blockchain data (blocks, transactions)AnThe cheatcode handler address.000ChMaximum size in bytes (0x6000) that a contract can have.BnAn iterator over the variants of ChiselCommandCaCommon behaviour of legacy and EOF create inputs.AdCould not write TOML0ClCustom print Inspector, it has step level information of \xe2\x80\xa6000BjThe default gas limit for all transactions0CnFor some cheatcodes we may internally change the status of \xe2\x80\xa6BoDecodes a raw signed EIP 2718 typed transactionCmError type for deriving transaction type used as error in \xe2\x80\xa60Bc<code>DynSolValue</code> formatter.ClCreates a filter in the node, to notify when a new block \xe2\x80\xa6DeAn async service that takes care of the <code>FeeHistory</code> cacheChFourbyte tracing inspector that records all function \xe2\x80\xa600BnType alias for frame initialization or result.0CjAdditional filters that can be applied on the test resultsB`Gets the current mining behaviorEaA <code>RpcHandler</code> that expects <code>EthRequest</code> rpc calls via httpAaThe cost per word0BmInitial default gas price for the first blockChAn address identified by a <code>TraceIdentifier</code>.00ClWrapper error struct that catches config parsing errors, \xe2\x80\xa60CeResult of executing an EVM instruction. This enum \xe2\x80\xa60CfRepresents the inability to cover max cost + value \xe2\x80\xa6BnDifferent kinds of internal functions tracing.00CjActions that the interpreter can request from the host \xe2\x80\xa6000BgThe result of an interpreter operation.000CiOut of gas error encountered while calling an invalid \xe2\x80\xa60BdEncountered invalid parse tree item.0BnTest contract which is testing its invariants.00DgWrapper around any <code>Executor</code> implementer which provides \xe2\x80\xa60000ChStores information about failures and reverts of the \xe2\x80\xa6000CcContains data collected during invariant test runs.00CkSubRoutine checkpoint that will help us to go back from \xe2\x80\xa60CgUsed only as intermediate representation for legacy \xe2\x80\xa6000C`The account is loaded and empty, as per EIP-161.00000BoThe account has been loaded but does not exist.00000BbEIP-3860: Limit and meter initcodeClBy default the limit is <code>0x12000</code> (73_728 bytes).0100AbMin blob gas price0CiHelper trait get access to the full state data of the \xe2\x80\xa6BlRepresents the outcome of mining a new blockmModexp errors000AcModexp mod overflow000DkAn AST visitor that finds the first <code>Item</code> that starts after \xe2\x80\xa6DjA HIR visitor that finds the first <code>Item</code> that starts after \xe2\x80\xa6ClPADDED_FP2_LENGTH specifies the number of bytes that the \xe2\x80\xa60AeA Parse Tree FragmentCmPlain state reverts are used to easily store reverts into \xe2\x80\xa6000CeSame as LinkedState, but also contains ExecutionData.CnObject-safe trait that enables injecting extra precompiles \xe2\x80\xa60CiFirst state basically containing only inputs of the user.AnAnti-Aliasing Iterator Adapter000DjA view into a vacant raw entry in an <code>IndexMap</code>. It is part \xe2\x80\xa60Cftransactions that are ready to be included in a block.CfTuple containing multiple execution results and state.0BfSets the ERC20 allowance for a spenderCgSets the mining behavior to interval with the given \xe2\x80\xa6CmKeeps possible overrides for default settings which users \xe2\x80\xa60DgA type that\xe2\x80\x99s used to signaling the <code>MultiForkHandler</code> \xe2\x80\xa6Bj<code>SELECTOR_LOOKUP_URL</code> response.BmA non-exhaustive list of solidity error codesCaTrace arena keeping track of ignored trace items.00AmExclusive Bit-Slice Splitting0ClHow much of the stack to record. Nothing, just the items \xe2\x80\xa600000CgA collection of contracts identified as targets for \xe2\x80\xa600BaRepresents a test summary report.CdConvert an address to a checksummed format (EIP-55).ClAccount Created when EVM state is merged to cache state. \xe2\x80\xa600000BlEVM database commit interface that can fail.00000BlCLI arguments for <code>cast tx-pool</code>.CkGas cost for SSTORE reset operation on a warm storage slot.0BkCLI arguments for <code>cast wallet</code>.CjPerforms packed ABI encoding based off of the function \xe2\x80\xa6ChABI-encodes the error using <code>Revert(string)</code>.ClCreates a journal entry for when an account is destroyed \xe2\x80\xa600000BoThe generator used to generate the dev accounts0BdIncreases the balance of an account.BcModifies the balance of an account.AjEnable or disable logging.AhSets the backend rpc urlDkReturns existing or set a default <code>ArbitraryStorage</code> option. \xe2\x80\xa6BaAddresses with arbitrary storage.010001010ClMap over contract name -&gt; Vec&lt;(bytecode, build_id, \xe2\x80\xa6000DiAsserts that two <code>string</code> values are equal. Container type \xe2\x80\xa600000DfAsserts that two <code>string</code> values are equal and includes \xe2\x80\xa600000DhAsserts that two <code>bytes</code> values are equal. Container type \xe2\x80\xa600000DkAsserts that two <code>bytes</code> values are equal and includes error \xe2\x80\xa600000DbAsserts that two arrays of <code>bool</code> values are equal. \xe2\x80\xa600000DeAsserts that two arrays of <code>bool</code> values are equal and \xe2\x80\xa600000AnAsserts that two arrays of \xe2\x80\xa600000DhAsserts that two arrays of <code>uint256</code> values are equal and \xe2\x80\xa600000DdAsserts that two arrays of <code>int256</code> values are equal. \xe2\x80\xa600000DgAsserts that two arrays of <code>int256</code> values are equal and \xe2\x80\xa600000DeAsserts that two arrays of <code>address</code> values are equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>address</code> values are equal and \xe2\x80\xa600000DeAsserts that two arrays of <code>bytes32</code> values are equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>bytes32</code> values are equal and \xe2\x80\xa600000DdAsserts that two arrays of <code>string</code> values are equal. \xe2\x80\xa600000DgAsserts that two arrays of <code>string</code> values are equal and \xe2\x80\xa600000DcAsserts that two arrays of <code>bytes</code> values are equal. \xe2\x80\xa600000DfAsserts that two arrays of <code>bytes</code> values are equal and \xe2\x80\xa600000ClAsserts that the given condition is false. Function with \xe2\x80\xa600000CjAsserts that the given condition is false and includes \xe2\x80\xa600000DjAsserts that two <code>bool</code> values are not equal. Function with \xe2\x80\xa600000DhAsserts that two <code>bool</code> values are not equal and includes \xe2\x80\xa600000DhAsserts that two <code>uint256</code> values are not equal. Function \xe2\x80\xa600000DkAsserts that two <code>uint256</code> values are not equal and includes \xe2\x80\xa600000DgAsserts that two <code>int256</code> values are not equal. Function \xe2\x80\xa600000DjAsserts that two <code>int256</code> values are not equal and includes \xe2\x80\xa600000DhAsserts that two <code>address</code> values are not equal. Function \xe2\x80\xa600000DkAsserts that two <code>address</code> values are not equal and includes \xe2\x80\xa600000DhAsserts that two <code>bytes32</code> values are not equal. Function \xe2\x80\xa600000DkAsserts that two <code>bytes32</code> values are not equal and includes \xe2\x80\xa600000CkGiven the executor state, asserts that no invariant has \xe2\x80\xa6CdWhether to enable legacy (non-reverting) assertions.00000BhWhether failed assertions should revert.1CaHelper function to attach an EIP-7702 delegation.CmReturns a list of addresses available to use with current \xe2\x80\xa6CkOverride the balance of an account. Format: address:balanceBlReturns the Berachain Bepolia testnet chain.CmThe best block number of the state, can be different from \xe2\x80\xa6Djbitcoin_secp256k1 implementation of <code>ecrecover</code>. More about \xe2\x80\xa60DeSets <code>block.blobbasefee</code> Container type for the return \xe2\x80\xa600000CfHas the next call (at this call depth only) create \xe2\x80\xa600000ChHas the next call (at this call depth only) create a \xe2\x80\xa600000000000ChConstructs the <code>RetryProvider</code> with a wallet.DcCreate a new builder for constructing a <code>TxEnv</code> with \xe2\x80\xa60DbCalculates the maximum [EIP-4844] <code>data_fee</code> of the \xe2\x80\xa600000BeLength of call sequence to be shrunk.ClCanonicalize a path, returning an error if the path does \xe2\x80\xa6BeMapping of chain IDs to their aliases000000CnChecks that the generated bindings are up to date with the \xe2\x80\xa6CiChecks to see if the current opcode can either mutate \xe2\x80\xa6CcCommits the changes made since the last checkpoint.AgCommits the checkpoint.111011CcReverts the changes made since the last checkpoint.CdReverts all changes to state until given checkpoint.111011DhEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</codeiReturns configured MultiCompilerSettings.DhReturns <code>true</code> if a configuration is present at the given \xe2\x80\xa6DkReturns <code>true</code> if a configuration is present at the function \xe2\x80\xa6AnSource map of contract sources0DfUtility cheatcode to copy storage of <code>from</code> contract to \xe2\x80\xa600000Bl<code>*COPY</code> opcodes cost calculation.0DfReturns a copy of this account with the <code>Bytecode</code> removed.0BnThe description of the Rust crate to generate.DdComputes the <code>CREATE2</code> address of a smart contract as \xe2\x80\xa60BiA macro that initializes multiple walletsDhCreates the first <code>FrameInput</code> from the transaction, spec \xe2\x80\xa60DjMacro that triggers <code>unreachable!</code> in debug builds but uses \xe2\x80\xa60BaAddress of the delegated account.0ClReturns reference to bytes of contract deployed code, if \xe2\x80\xa6AfContract runtime code.ClDerive a private key from a provided mnenomic string (or \xe2\x80\xa600000000000000000000000AlThe weight of the dictionary0BbClears global code from the sourceClReturns ENS namehash for provided string. Container type \xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>string</code>.00000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000DkSame as <code>Self::project()</code> but sets configures the project to \xe2\x80\xa6CnGets all the logs according to specified filter. Container \xe2\x80\xa600000BfThe Etherscan (or equivalent) API key.BeThe Etherscan (or equivalent) API keyCjReturns the chain\xe2\x80\x99s blockchain explorer\xe2\x80\x99s API key, \xe2\x80\xa60Dfetherscan API key, or alias for an <code>EtherscanConfig</code> in \xe2\x80\xa6BkCreates a Project from an Etherscan source.BiAll event definitions within the contractChJump forward in time by the given amount of time, in \xe2\x80\xa6CcMine blocks, instantly and return the mined blocks.AmAll contracts to also excludeBnReturns the call context\xe2\x80\x99s execution address00CkExpects the deployment of the specified bytecode by the \xe2\x80\xa600000CdExtracts function selectors, arguments and state \xe2\x80\xa6Bmdata required for <code>eth_feeHistory</code>BdReturns the configured history limitAknumber of items to considerBemax number of items kept in fee cacheChReturns the default figment enhanced with additional \xe2\x80\xa6CcPad and squeeze the state into <code>output</code>.0CbReturns the root path to set for the project root.ChRemoves the pending transaction spinner and advances \xe2\x80\xa6CmCreates initial frame input using transaction parameters, \xe2\x80\xa6000CjFetch state from a specific block number over a remote \xe2\x80\xa60Bhpins the block number for the state forkBiPins the block number for the state fork.0CjUtility function to convert an identifier to pascal or \xe2\x80\xa6DdPretty-prints a slice of tokens using <code>format_token_raw</code>.0ClFormats the given number of Wei as the given unit with a \xe2\x80\xa6CbFormats the given number of Wei as the given unit.10DkReturns the path to foundry\xe2\x80\x99s cache dir: <code>~/.foundry/cache</code>\xe2\x80\xa6EbReturns a list of <em>unique</em> paths to all folders under <code>root</code> \xe2\x80\xa6DkCreates a new <code>Chain</code> from the given ID, without checking if \xe2\x80\xa6ChIterates over script transactions and collects RPC urls.CmIdentifies fuzzed contract and function based on given tx \xe2\x80\xa600CcAdditional traces used for gas report construction.CmAdditional traces used for gas report construction. Those \xe2\x80\xa6BhAdditional traces to use for gas report.12221CaEnable/disable recording of gas snapshot results.Bewhether to emit gas snapshots to diskAeGenerate the bindingsAgGenesis block timestamp0CjGets the blockhashes from the current transaction. Not \xe2\x80\xa600000CjReturns the path to the json artifact depending on the \xe2\x80\xa6ChThe path provided to this function should point to a \xe2\x80\xa6CfReturns contract name for a given contract identifier.BoMutable getter for <code>contracts</code> field0BeReturns a remapping for the given dirAmGet the current forge versionBjuses the fork block number from the config00CnConstructs a provider with a 100 millisecond interval poll \xe2\x80\xa6CnGiven an event without indexed parameters and a rawlog, it \xe2\x80\xa6CkGets a reference to the entry\xe2\x80\x99s key and value in the map.0CkGets the hit map for the current contract, or inserts a \xe2\x80\xa6CmMutably indexes into a bit-slice without doing any bounds \xe2\x80\xa6ClGets a mutable reference to a single bit or a subsection \xe2\x80\xa610BlTrue if it supports broadcasting in batches.0CkHistorical states of accounts and storage at particular \xe2\x80\xa6BdDraws the layout in horizontal mode.BcIdentifies a <code>Function</code>.00BjReturns the Immutable zkEVM testnet chain.CnReturns the hash if the transaction is impersonated (using \xe2\x80\xa6BnWhether to create docs for external libraries.BkWhether to include libraries to the output.CfWhether to capture inherited contracts from libraries.10DiIncrement balance by <code>balance</code> amount. Assume that balance \xe2\x80\xa60CjInfers a custom type\xe2\x80\x99s true type by recursing up the \xe2\x80\xa6CkInitializes a frame with the given context and precompiles.0BmCalled before the interpreter is initialized.0B`Sets remaining gas to gas limit.110Bhinserts a blockhash for the given numberBjRun execution loop with inspection support000CnRun the frame from the top of the stack. Returns the frame \xe2\x80\xa60CkInspect the EVM with the current inspector and previous \xe2\x80\xa6000CnInstalls the dependency as an ordinary folder instead of a \xe2\x80\xa6CjReturns the instruction table that is used by EvmTr to \xe2\x80\xa6CkTable containing instruction implementations indexed by \xe2\x80\xa6CaReturns the instruction table for the given spec.02100CjType traits and definitions for interpreter customization.0CfConsumes the Inspector and returns a GethTraceBuilder.000BiConsumes Wallets and returns MultiWallet.00BhConsumes the type and prints the traces.CjSplits a Signed into its absolute value and negative flag.0CjFlattens the test outcome into a list of individual tests.BiReturns true if this setting was enabled.D`Returns <code>true</code> if this function is an invariant test.0ChTakes a u8 and returns true if it is a jump destination.0CnChecks if an expression is a low-level call that should be \xe2\x80\xa6DfReturns <code>true</code> if the new value is equal to the present \xe2\x80\xa60BdIs account marked for self destruct.0CgEnsures the <code>Account</code> is loaded and touched.DeChecks if <code>key</code> exists in a JSON object. Function with \xe2\x80\xa600000DdChecks if <code>key</code> exists in a TOML table. Function with \xe2\x80\xa600000AfThe keystore password.AaLabeled addressesB`Map of addresses to their labels111CfGets the gas used in the last call from the callee \xe2\x80\xa600000ChProcesses the result of the initial call and handles \xe2\x80\xa6000ClLoad persisted filter (with last test run failures) from \xe2\x80\xa6DbCreate a new byte array from the given slice <code>src</code>, \xe2\x80\xa6DoCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, \xe2\x80\xa6111011BmSets the <code>legacy_assertions</code> flag.DfReturns whether <code>failed()</code> should be called on the test \xe2\x80\xa610DhWhether <code>failed()</code> should be invoked to check if the test \xe2\x80\xa61DjWhether <code>failed()</code> should be called on the test contract to \xe2\x80\xa63BkReturns jump table if bytecode is analyzed.0CmGets code of <code>address</code> and if the account is cold.AgLoads the account code.00AlLoad account code, calls \xe2\x80\xa60211100BnLoads a single Solidity file into the prelude.CjDeserialize and add all blocks data to the backend storageDkEvent with signature <code>log_named_address(string,address)</code> and \xe2\x80\xa600DkEvent with signature <code>log_named_array(string,uint256[])</code> and \xe2\x80\xa600DjEvent with signature <code>log_named_array(string,int256[])</code> and \xe2\x80\xa600DkEvent with signature <code>log_named_array(string,address[])</code> and \xe2\x80\xa600DkEvent with signature <code>log_named_bytes32(string,bytes32)</code> and \xe2\x80\xa600AbMake create frame.0BeMarks the account as self destructed.0CdReturns the max initcode size for the given spec id.000AlMax initcode size, calls \xe2\x80\xa60111100CgThe maximum number of individual inputs that may be \xe2\x80\xa600Bhmaximum amount of states we keep on diskChTake all transitions and merge them inside bundle state.0CfMerges the set filter globs with the config\xe2\x80\x99s valuesBlReturns the traces for the given transactionCiIf provided, the private key will be derived from the \xe2\x80\xa6CkMocks multiple calls to an address, returning specified \xe2\x80\xa600000CfMocks multiple calls to an address with a specific \xe2\x80\xa600000AnModifies the context database.0BaModifies the context transaction.0DgReturns <code>true</code> if the reporter needs source maps for the \xe2\x80\xa6CcPrepares the shared memory for a new child context.0BjCreates new account that is newly created.0BmCreate a new builder with the given database.0AjUse only a set of mutatorsCnReturns the smallest power of two greater than or equal to \xe2\x80\xa60AnReturns the next HTTP RPC URL.CnDo not generate the remappings.txt file. Instead, keep the \xe2\x80\xa6CbDisables rate limiting for this node\xe2\x80\x99s provider.CgDisables rate limiting entirely. This overrides any \xe2\x80\xa6BdDisables RPC rate limiting entirely.0CmTracks calls with calldata that target an address without \xe2\x80\xa6000DhNormalize fixture parameter name, for example <code>_Owner</code> to \xe2\x80\xa6BgStyle of underscores in number literals0FbReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code`Returns the next account status on selfdestruct.0CmBuffered readers for files opened for reading (path =&gt; \xe2\x80\xa6CkSwitch optimizer components on or off in detail. The \xe2\x80\x9c\xe2\x80\xa6CmAs per the latest Otterscan source code, at least version \xe2\x80\xa6EeParses a string of JSON data at <code>key</code> and coerces it to <code>bool</code>.00000CfReturns an array of all the keys in a JSON object. \xe2\x80\xa600000DfParses a string of JSON data at <code>key</code> and coerces it to \xe2\x80\xa600000ClABI-encodes a JSON object. Container type for the return \xe2\x80\xa600000DiABI-encodes a JSON object at <code>key</code>. Container type for the \xe2\x80\xa600000EeParses a string of TOML data at <code>key</code> and coerces it to <code>bool</code>.00000CnReturns an array of all the keys in a TOML table. Function \xe2\x80\xa600000DfParses a string of TOML data at <code>key</code> and coerces it to \xe2\x80\xa600000CkABI-encodes a TOML table. Container type for the return \xe2\x80\xa600000DhABI-encodes a TOML table at <code>key</code>. Container type for the \xe2\x80\xa600000CiParse an Ethereum address, verifying its EIP-55 checksum.0CgParses the creation bytecode and returns one of the \xe2\x80\xa6BdParses an ether value from a string.CiParse a TOML string and return the value at the given \xe2\x80\xa6CnGiven linked and compiled artifacts, prepares data we need \xe2\x80\xa6CnCreates an entry for a EVM CALL in the folded stack trace. \xe2\x80\xa600ClGet the path of the current project root. Container type \xe2\x80\xa600000ClContracts that are part of the project but have not been \xe2\x80\xa6CmPrompts the user for an address in the terminal. Function \xe2\x80\xa600000DkDerives secp256r1 public key from the provided <code>privateKey</code>. \xe2\x80\xa600000DbReturns a random <code>address</code>. Function with signature \xe2\x80\xa600000CjReturns a random byte array value of the given length. \xe2\x80\xa600000DfReturns a random <code>int256</code> value. Container type for the \xe2\x80\xa600000DgReturns a random <code>int256</code> value of given bits. Container \xe2\x80\xa600000ChIterates over non-overlapping mutable subslices of a \xe2\x80\xa60EgReads the current <code>msg.sender</code> and <code>tx.origin</code> from state and \xe2\x80\xa600000ClReads a list of gas snapshot entries from a gas snapshot \xe2\x80\xa6CkClap\xe2\x80\x99s value parser for genesis. Loads a genesis.json \xe2\x80\xa6C`Contract addresses that have a receive function.000Cm\xe2\x9a\xa0\xef\xb8\x8f Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - \xe2\x80\xa60AnWhether to record state diffs.00000BlRecover the authority for the authorization.0ClA prefix to add to each dependency name in the left part \xe2\x80\xa6ClAdds a private key to the local forge wallet and returns \xe2\x80\xa600000CiWrites a new value into a bit, returning the previous \xe2\x80\xa60AgResets the instance ID.BiWe manage 2 namespaces for JSON bindings:BkThe underlying operator used by this mutantCeUnpauses collection of call traces. Function with \xe2\x80\xa600000ClRevert the state of the EVM to a previous snapshot Takes \xe2\x80\xa600000CfReturns all rpc urls and their aliases as structs. \xe2\x80\xa600000CkRuntime transport that connects on first request, which \xe2\x80\xa6Cb<code>SELFDESTRUCT</code> opcode cost calculation.0ClBroadcasts the contract deployment transaction and after \xe2\x80\xa6CfSerializes a key and value to a JSON object stored \xe2\x80\xa600000CmSerialize all states to a list of serializable historical \xe2\x80\xa6AoSets the bytecode and its hash.0BgSets address info of BundleState state.0BgSets storage info of BundleState state.0DfSets the address of the <code>DSTest</code> contract that is being \xe2\x80\xa6000BeSets the block timestamp if provided.000CjSets the uninitialized bits of a bit-vector to a known \xe2\x80\xa60DjRemove the key-value pair equivalent to <code>key</code> and return it \xe2\x80\xa6ClRemove the value from the set return it and the index it \xe2\x80\xa610BfSigns data with a <code>Wallet</code>.00000EaSigns <code>digest</code> with <code>privateKey</code> using the secp256k1 curve.00000DfSigns <code>digest</code> with signer provided to script using the \xe2\x80\xa600000000000CnBuilds separate runners and environments for each RPC used \xe2\x80\xa6AaSlots in an epoch000ClSnapshot the current state of the evm. Returns the ID of \xe2\x80\xa600000ChStops collecting onchain transactions. Function with \xe2\x80\xa600000CnSubtracts gas consumed by the children function calls from \xe2\x80\xa6CiReturns whether the chain supports the Shanghai hardfork.0DdRemove and return the key-value pair equivalent to <code>key</code>.CkRemove and return the key, value pair stored in the map \xe2\x80\xa6001000BbRemove the key-value pair by indexAiRemove the value by index10DeFunction with signature <code>targetSenders()</code> and selector \xe2\x80\xa600ChExtends the contracts and selectors to fuzz with the \xe2\x80\xa600DkCasts the current <code>W</code> writer or the current temp buffer as a \xe2\x80\xa6AkHow many requests timed outDkEncodes a <code>bytes</code> value to a base64url string. Function with \xe2\x80\xa600000DgEncodes a <code>string</code> value to a base64url string. Function \xe2\x80\xa600000DhConverts the given <code>string</code> value to Lowercase. Container \xe2\x80\xa600000DhConverts the given <code>string</code> value to Uppercase. Container \xe2\x80\xa600000BlReturns the previous value to set on revert.0BlReturns the traces for the given transactionCjReturns traces for the transaction hash via parity\xe2\x80\x99s \xe2\x80\xa6CnReturns a mutable reference to the tracing inspector if it \xe2\x80\xa6000CjExecute the transaction configured in <code>env.tx</code>.00EhCreates a <code>AnyRpcTransaction</code> as it\xe2\x80\x99s expected for the <code>eth</code> \xe2\x80\xa6CnReturns the number of transactions sent from given address \xe2\x80\xa6AgIndex within the block.BjHow transactions are sorted in the mempoolBhHow transactions are ordered in the pool1CcTransient storage that is discarded after every \xe2\x80\xa6000000000CgCreates a new integer from a big endian slice of bytes.0CkSee <code>Uint::try_from_be_slice</code> for documentation.110CjCreates a new integer from a little endian slice of bytes.0CkSee <code>Uint::try_from_le_slice</code> for documentation.110DfTry to reserve capacity for <code>additional</code> more key-value \xe2\x80\xa6DdTry to reserve capacity for <code>additional</code> more values, \xe2\x80\xa6CfTries to reserve the minimum capacity for at least \xe2\x80\xa6210ChAttempts to view a memory region as a mutable bit-slice.000DgCreates a new empty <code>String</code> with at least the specified \xe2\x80\xa60CiReturns whether the transaction\xe2\x80\x99s chain ID check is \xe2\x80\xa6BnWhether to check the transaction\xe2\x80\x99s chain ID.1011101011CfChecks if all configuration lines use a valid profile.BlSets the \xe2\x80\x9callow origin\xe2\x80\x9d header for CORS.ClConvenience function that overrides the configured block \xe2\x80\xa6000BdSets the block hashes for the state.0BeOverrides the configured block number000CkMarks the account as newly created and returns self for \xe2\x80\xa60CdTakes DatabaseRef and wraps it with WrapDatabaseRef.0DgSets the <code>fork_headers</code> to use with <code>eth_rpc_url</code>BdReturns the memory limit of the nodeBaSet preprocessors on the builder.BgSets whether to print traces to stdout.CaSet <code>should_build</code> flag on the builderClMarks the account as touched and returns self for method \xe2\x80\xa60CiWrite a serialized JSON object to a file. If the file \xe2\x80\xa600000DmWrite a serialized JSON object to an <strong>existing</strong> JSON file, \xe2\x80\xa600000CgTakes serialized JSON, converts to TOML and write a \xe2\x80\xa600000000000CfWrite and hex literals according to the configuration.CjWrite and format numbers. This will fix underscores as \xe2\x80\xa6DjWrite a raw comment. This is like <code>write_comment</code> but won\xe2\x80\x99\xe2\x80\xa6DeAdd an address to the <code>DelegationCapability</code> of the walletCjNumber of block hashes that EVM can access in the past \xe2\x80\xa6000BoRepresents a transaction\xe2\x80\x99s broadcast details.00000BhRepresents a single bytecode dependency.BiCommonly used aliases for solidity repos,BkGas cost for conditional jump instructions.0CgHelper trait for obtaining complete revm::Inspector \xe2\x80\xa6000CnWrapper type that maps an address to a contract identifier \xe2\x80\xa6BjInvalid profile. Profile should be a table0AmCoverage reports to generate.CmDefault user agent set as the header for requests that don\xe2\x80\xa6EkThe default <code>BuildHasher</code> used by <code>HashMap</code> and <code>HashSet</code>.0ChHash of EF01 bytes that is used for EXTCODEHASH when \xe2\x80\xa60oBytecode errors0AgSigns data via EIP-712.ChSigns data via EIP-712, and includes full support of \xe2\x80\xa6CfRemoves the filter, returns true if the filter was \xe2\x80\xa6CaTuple containing evm execution result and state.s0CcContainer for data being collected after execution.AlThe type of expected revert.DeRepresents a failed attempt to extract <code>Config</code> from a \xe2\x80\xa6AoThe commit of forge-std to use.BkFatal external error. Returned by database.AnFatal external error occurred.10ClRepresents an error that can occur when constructing the \xe2\x80\xa6BkDetermines the status of file system accessBcEIP-3860 : Limit and meter initcode0BmBn128 pair precompile with ISTANBUL gas rules0CcEIP-1884: Repricing for trie-size-dependent opcodes0BgWhether the version is a nightly build.BlThe to field of the transaction was invalid.Chsend transactions impersonating specific account and \xe2\x80\xa6ChThrown when a legacy tx was signed for a different chainBcInit and floor gas from transaction000ChThe error emitted when failing to insert into a profile.ClContext passed to instruction implementations containing \xe2\x80\xa6000CbIntermediate output for the compiled SessionSourceBjInvalid EVM Object Format (EOF) init code.0AmTransaction validation error.0ChThe maximum positive value for a 256-bit signed integer.0ChThe minimum negative value for a 256-bit signed integer.0AcMocked return data.AdModexp base overflow000CbHolds the sequences of multiple chain deployments.BoAnother Solc version used when compiling tests.DiOtterscan\xe2\x80\x99s <code>ots_getBlockDetails</code> endpoint Given a block \xe2\x80\xa6BfTwo indices provided were overlapping.0B`Address of secp256r1 precompile.0BiBase cost of updating authorized account.0BgA type for creating parity style traces00BfParses a string from bytes32 encoding.CiContainer type for parsing contract identifiers from CLI.AbQueued transactionAePlain Storage Revert.000BhA reference to a transaction in the poolCkSame as ExecutedState, but also contains ExecutionArtifactsBnProvider for precompiled contracts in the EVM.0ChPreprocessor output. Wraps all existing preprocessor \xe2\x80\xa60BlDeprecated alias for <code>Signature</code>.0DiA builder for computing where in an <code>IndexMap</code> a key-value \xe2\x80\xa60CgRepresents the outcome of an attempt to recover the \xe2\x80\xa60DiA recurrent broadcast triggered by a <code>vm.startBroadcast()</code> \xe2\x80\xa600000CiA figment provider that checks if the remappings were \xe2\x80\xa60CmSCALAR_LENGTH_BITS specifies the number of bits needed to \xe2\x80\xa60AoResult of a selfdestruct action000AgMatches a single regex.AhThe solang parser failedCkState of ProgressBars displayed for the given test run. \xe2\x80\xa6AcUninitialized fieldAcUnsupported version0CeCLI arguments for <code>forge verify-bytecode</code>.BjA map of wallet capabilities per chain ID.CfCurrently active EIP-7702 delegations that will be \xe2\x80\xa6000000ChReturns the currently active <code>ForkDB</code>, if any000CiAdds a new transaction listener to the pool that gets \xe2\x80\xa6DfFunction with signature <code>afterInvariant()</code> and selector \xe2\x80\xa600ClReturns an iterator over all test functions in contracts \xe2\x80\xa6CmMap of context depths to memory offset ranges that may be \xe2\x80\xa6000000AjSets the coinbase address.AjReturns the config variantAjReturns the string variantFeConverts a <code>U256</code> value to a <code>isize</code>, saturating to <code>isize::MAX</code> \xe2\x80\xa60FeConverts a <code>U256</code> value to a <code>usize</code>, saturating to <code>MAX</code> if the \xe2\x80\xa60DgAsserts that two <code>string</code> values are not equal. Function \xe2\x80\xa600000DjAsserts that two <code>string</code> values are not equal and includes \xe2\x80\xa600000DkAsserts that two <code>bytes</code> values are not equal. Function with \xe2\x80\xa600000DiAsserts that two <code>bytes</code> values are not equal and includes \xe2\x80\xa600000DfAsserts that two arrays of <code>bool</code> values are not equal. \xe2\x80\xa600000DiAsserts that two arrays of <code>bool</code> values are not equal and \xe2\x80\xa600000DiAsserts that two arrays of <code>uint256</code> values are not equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>uint256</code> values are not equal \xe2\x80\xa600000DhAsserts that two arrays of <code>int256</code> values are not equal. \xe2\x80\xa600000DkAsserts that two arrays of <code>int256</code> values are not equal and \xe2\x80\xa600000DiAsserts that two arrays of <code>address</code> values are not equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>address</code> values are not equal \xe2\x80\xa600000DiAsserts that two arrays of <code>bytes32</code> values are not equal. \xe2\x80\xa600000DhAsserts that two arrays of <code>bytes32</code> values are not equal \xe2\x80\xa600000DhAsserts that two arrays of <code>string</code> values are not equal. \xe2\x80\xa600000DkAsserts that two arrays of <code>string</code> values are not equal and \xe2\x80\xa600000DgAsserts that two arrays of <code>bytes</code> values are not equal. \xe2\x80\xa600000DjAsserts that two arrays of <code>bytes</code> values are not equal and \xe2\x80\xa600000ClAsserts that the given condition is true. Container type \xe2\x80\xa600000CiAsserts that the given condition is true and includes \xe2\x80\xa600000CmRuns the command and asserts that it resulted in success, \xe2\x80\xa6ClList of authorizations, that contains the signature that \xe2\x80\xa6AfList of authorizationsAjSet the authorization list122210122BcSearch over a sorted map for a key.000BnReturns a <em>full</em> block with given hash.CkConstructs a new box with uninitialized contents on the \xe2\x80\xa60CmWrites a breakpoint to jump to in the debugger. Container \xe2\x80\xa600000CkWrites a conditional breakpoint to jump to in the debugger.00000ClFetches all receipts for the blocks\xe2\x80\x99s transactions, as \xe2\x80\xa6BoBuilds an unsigned RLP-encoded raw transaction.CiCalculate the gas cost for the modexp precompile with \xe2\x80\xa60ClCalculates the blob gas price from the header\xe2\x80\x99s excess \xe2\x80\xa6000ChCalculate the transaction cost floor as specified in \xe2\x80\xa60CmPushes an arbitrary length slice of bytes onto the stack, \xe2\x80\xa60DkChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, \xe2\x80\xa60DjChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>\xe2\x80\xa60CmRemoves the transactions from the ready queue and returns \xe2\x80\xa6CmClones a source account code, state, balance and nonce to \xe2\x80\xa600000CkCollects reference identified as bytecode dependency of \xe2\x80\xa6ClExecutes the given transaction and commits state changes \xe2\x80\xa6DhReturns the <code>Config</code> as spit out by <code>forge config</code>CfConfigures the given executor with this configuration.ClReturns a mutable reference to the memory of the current \xe2\x80\xa60CfAdd new line at start and end of contract declarations0CjGiven a list of nodes, find a \xe2\x80\x9cContractDefinition\xe2\x80\x9d \xe2\x80\xa6AgThe contracts bytecode.0DoCopies all bits from <code>src</code> into <code>self</code>, using batched \xe2\x80\xa60DfCreates a new fork with the given endpoint and the <em>latest</em> \xe2\x80\xa600000ClCreates a new fork with the given endpoint and block and \xe2\x80\xa600000CiCreates a new fork with the given endpoint and at the \xe2\x80\xa600000CkDerives a private key from the name, labels the account \xe2\x80\xa600000CkGenerates a wallet from the private key and returns the \xe2\x80\xa600000CgGenerates a wallet from the private key, labels the \xe2\x80\xa600000BgSends <code>eth_createAccessList</code>CmThis method creates an EIP2930 type accessList based on a \xe2\x80\xa6BhCreate a new history entry for the blockCcCreates a snapshot of the currently active databaseBcCreates and also selects a new fork0BjCreates and then also selects the new fork11CmGet the current indent size. level * tab_width for spaces \xe2\x80\xa6AhReturns code by its hash0CjMacro for defining lints and relevant metadata for the \xe2\x80\xa6AdDecode a single log.000ClFetches an event signature given the 32 byte topic using \xe2\x80\xa60BeDecodes given DynSolType from memory.BcDecode a collection of call traces.00Co<code>deleteSnapshot</code> is being deprecated in favor of \xe2\x80\xa600000DkReturns <code>(root, paths, overridden_deps_with_abosolute_paths)</code>\xe2\x80\xa6CjDeploys a contract from an artifact file. Takes in the \xe2\x80\xa600000000000000000000000CgDeploys a contract from an artifact file, using the \xe2\x80\xa600000000000000000000000BbWhether the test failed to deploy.BeDeserializes a number from hex or intB`Evaluate a single Solidity line.Bo\xe2\x9a\xa0\xef\xb8\x8f Compute single limb normalized division.0Bo\xe2\x9a\xa0\xef\xb8\x8f Compute double limb normalized division.0Cg\xe2\x9a\xa0\xef\xb8\x8f In-place Knuth normalized long division with \xe2\x80\xa60CkPrints suite result summary and removes it from overall \xe2\x80\xa6EhGets the environment variable <code>name</code> and parses it as <code>address</code>\xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000EhGets the environment variable <code>name</code> and parses it as <code>bytes32</code>\xe2\x80\xa600000111111BkWhether <code>stderr</code> supports color.DfFunction with signature <code>excludeSenders()</code> and selector \xe2\x80\xa600BgThe excluded functions of the contract.00CmExpects a call to an address with the specified calldata. \xe2\x80\xa600000ChExpects given number of calls to an address with the \xe2\x80\xa600000DjExpects a call to an address with the specified <code>msg.value</code> \xe2\x80\xa600000111111DjExpect a call to an address with the specified <code>msg.value</code>, \xe2\x80\xa600000222222CkExpects the deployment of the specified bytecode by the \xe2\x80\xa600000ChPrepare an expected log with (bool checkTopic1, bool \xe2\x80\xa600000CiSame as the previous method, but also checks supplied \xe2\x80\xa600000CjPrepare an expected log with all topic and data checks \xe2\x80\xa600000111111CkExpect a given number of logs with the provided topics. \xe2\x80\xa600000CnExpect a given number of logs from a specific emitter with \xe2\x80\xa600000CiExpect a given number of logs with all topic and data \xe2\x80\xa600000111111CgExpects an error on next call with any revert data. \xe2\x80\xa600000CjExpects an error on next call that exactly matches the \xe2\x80\xa600000000000CiExpects an error with any revert data on next call to \xe2\x80\xa600000CmExpects an error from reverter address on next call, with \xe2\x80\xa600000CmExpects an error from reverter address on next call, that \xe2\x80\xa600000DjExpects a <code>count</code> number of reverts from the upcoming calls \xe2\x80\xa600000000000000000000000DkExtends <code>self</code> by copying an internal range of its bit-slice \xe2\x80\xa6DeCopies elements from <code>src</code> range to the end of the string.10BhExtra output to write to separate files.0CjIf set, a separate JSON file will be emitted for every \xe2\x80\xa6CnContract addresses that have fallback functions, mapped to \xe2\x80\xa6000DjSets the unused bits outside the <code>BitBox</code> buffer to a fixed \xe2\x80\xa60ClDefines a method that filters ParseItem\xe2\x80\x99s children and \xe2\x80\xa6C`Finds the anchor corresponding to a branch item.00CkFind an anchor representing the first opcode within the \xe2\x80\xa600BoFinds name of contract that contains given loc.00CnFind the artifact of the contract with the specified name. \xe2\x80\xa6DgApply the prank by setting <code>used</code> to true if it is false \xe2\x80\xa6ChFlattens given CallTraceArena into a list of DebugNodes.CaTransactions to force include in the forked chainCnTransactions included into the pool before any others are. \xe2\x80\xa6AiThe initial retry backoffBmInitial retry backoff on encountering errors.D`Sets the initial <code>fork_retry_backoff</code> for rate limits21AfInitial retry backoff.0BfFormat transaction details for displayAbfoundry-cheatcodesBfHelpers for formatting Ethereum types.Abfoundry-evm-tracesAbfoundry-test-utilsCgPrepares the shared memory for returning from child \xe2\x80\xa60CfConvert from a bits value, unsetting any unknown bits.0CgReturns the TracingInspectorConfig depending on the \xe2\x80\xa6000AjRaw Bit-Slice Construction0E`Decode a UTF-16BE\xe2\x80\x93encoded slice <code>v</code> into a <code>String</code>, \xe2\x80\xa60E`Decode a UTF-16LE\xe2\x80\x93encoded slice <code>v</code> into a <code>String</code>, \xe2\x80\xa60ChNumber of runs to execute and include in the gas report.000Bklist of contracts to ignore for gas reportsBjCheck gas snapshots against previous runs.Cnwhether to check for differences against previously stored \xe2\x80\xa6ChFind all applicable mutators for a given context and \xe2\x80\xa6DhGets the current <code>block.blobbasefee</code>. You should use this \xe2\x80\xa600000DkGets the current <code>block.number</code>. You should use this instead \xe2\x80\xa600000ClReturns the most recent broadcast for the given contract \xe2\x80\xa600000DfReturns all deployments for the given contract on <code>chainId</code>00000DkReturns state diffs from current <code>vm.startStateDiffRecording</code>\xe2\x80\xa600000BbReturns all configured remappings.CjPolling method for a filter, which returns an array of \xe2\x80\xa6CcReturns the underlying fork corresponding to the idClGiven a function name, address, and args, tries to parse \xe2\x80\xa6AjReturns the genesis numberDjInserts a value computed from <code>f</code> into the set if the given \xe2\x80\xa60DgReturns the <code>UiFmt::pretty()</code> formatted attribute of the \xe2\x80\xa60BeReturns the configured rpc jwt secretCbReturns Vec containing imports of the target file.CjReturns a byte slice of the memory region at the given \xe2\x80\xa60BoWhen an <code>EXTCODESIZE</code> opcode occurs:CjIdentify unknown addresses in the specified call trace \xe2\x80\xa6CkAttempts to identify an address in one or more call traces.1001BbIdentifies <code>Function</code>s.00Allist of file paths to ignoreChThe flag indicating whether to include push bytes values0CmIterates over received balances and increment all account \xe2\x80\xa60BlInject precompiles into the EVM dynamically.0ClConditionally inject additional precompiles into the EVM \xe2\x80\xa6CfInserts a new instruction into the instruction table.s0CiInsert values from call log topics and data into fuzz \xe2\x80\xa6CmInitializes the frame for the given frame input. Frame is \xe2\x80\xa60AjReturn Instruction result.BnReturns a reference to the instruction result.DhRetrieves a reference to the <code>InstructionResult</code> from the \xe2\x80\xa6CkReturns <code>InstructionResult</code> if action is return.AjReturns instruction result43210CiTypes for interpreter actions like calls and contract \xe2\x80\xa60BhReturns reference to interpreter result.0CnConverts into a mutable reference to the entry\xe2\x80\x99s key and \xe2\x80\xa60CkReturns <code>InterpreterResult</code> if action is return.0CkConsumes the inspector and returns the map of addresses \xe2\x80\xa600ChConsumes the inspector and returns the trace results \xe2\x80\xa600C`Invariant function present in the test contract.00ChReturns true if the account is marked as persistent. \xe2\x80\xa600000E`Returns <code>true</code> if this function is an <code>afterInvariant</code> \xe2\x80\xa60AjIs account locally created0CnReturns true if the code hash is the Keccak256 hash of the \xe2\x80\xa60EbReturns <code>true</code> if the <code>Backend</code> is currently in forking mode000DfCalculates whether <code>element</code> is within the range of the \xe2\x80\xa6DgReturns <code>true</code> if the original value is equal to the new \xe2\x80\xa60D`Returns <code>true</code> if EVM cleared storage of this account0BeConvert a JSON value to a TOML value.AfThe keystore password.00EeStores the <code>ForkId</code> of the fork the <code>Backend</code> launched with \xe2\x80\xa6000BcList the data in the foundry cache.AiLoad the ABI from a file.DjGet a mutable reference to the <code>CacheAccount</code> for the given \xe2\x80\xa60CiReturns an iterator over all contracts that match the \xe2\x80\xa6")