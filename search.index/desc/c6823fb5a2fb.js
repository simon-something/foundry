rd_("DkConditionally enable styling based on whether the <code>Condition</code>\xe2\x80\xa60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BgSets the ABI to use for error decoding.B`Add known errors to the decoder.10110BlCreates a new context with a new chain type.0CgConstructs FoundryEvm and runs a given closure with it.BdSet formatter config on the builder.BbSet formatter config on the ParserCiSet the git instance to be used for submodule operations.AhSets the ipc path to useAnSet the JWT for the transport.ClInfers the host from the provided url and adds it to the \xe2\x80\xa6000BcReturns the signature parity value.0CiABI encode the given function argument, excluding the \xe2\x80\xa6DkSame as <code>All</code> but writes function params multiline even when \xe2\x80\xa60A`Mutable Bit View000BoThe <code>0x40</code> (\xe2\x80\x9cBLOCKHASH\xe2\x80\x9d) opcode.0BcGas cost for BLOCKHASH instruction.110BnByzantium hard fork Activated at block 4370000BlString identifier for the Byzantium hardforkAiByzantium spec introducedCh<code>modexp</code> precompile with BYZANTIUM gas rules.BmBn128 add precompile with BYZANTIUM gas rulesBmBn128 mul precompile with BYZANTIUM gas rulesBnBn128 pair precompile with BYZANTIUM gas rules6542103AcInvalid HTTP headerAbInvalid URL schemeAmBit-Level Access Instructions0AfBit-Slice Partitioning0AoRead-Only Shared-Mutable Handle0BoJust a manual blank line \xe2\x80\x9c\\n\\n\xe2\x80\x9d, for layoutCo<code>*</code> in block comment end <code>&quot;*/&quot;</code>Co<code>/</code> in block comment end <code>&quot;*/&quot;</code>mA block hash.000BjContainer type that gathers all block dataDkA one time broadcast triggered by a <code>vm.broadcast()</code> call is \xe2\x80\xa600000CnThe buffered writer. Writes various display items into the \xe2\x80\xa60BkCLI arguments for <code>forge build</code>.BeContainer for the compiled contracts.nByzantium: \xe2\x80\xa6BoThe <code>0x34</code> (\xe2\x80\x9cCALLVALUE\xe2\x80\x9d) opcode.0C`Additional gas cost when a call transfers value.110B`The static cheatcode definition.000000BkCLI arguments for <code>forge cache</code>.jCall Frame0AfInput enum for a call.000BmA trace of a call with optional decoded data.00kCall value.000BbChain data for getChain cheatcodesBbInformation on the chain and fork.00000DkSpecification of a single cheatcode. Extends <code>Function</code> with \xe2\x80\xa60AiCheatcode implementation.BlExpects revert from the next cheatcode call.22AlExclusive Bit-Slice Chunking0BkCLI arguments for <code>forge clean</code>.BkCLI arguments for <code>forge clone</code>.A`Code block item.0BoCheck for selector collisions between contractsAhConcatenate hex strings.CdTrait that defines the context of the EVM execution.00000DaProvides additional path context for <code>fs::create_dir</code>.0B`Database account representation.000BiModifies the ERC20 balance of an account.ClRepresents a part of the execution frame before the next \xe2\x80\xa60CkThe result of the <code>stopDebugTraceRecording</code> call00000BhDecode ABI-encoded input or output data.AdDerive tx type error0AoThe account has been destroyed.AfStorage was destroyed.1001101001AhMaintains developer keysoNothing changed0CbContains the config for parsing and rendering docsDgDummy host that implements <code>Host</code> trait and  returns all \xe2\x80\xa60CkSerializes the current state (including contracts code, \xe2\x80\xa6Di<code>ecrecover</code> precompile, containing address and function to \xe2\x80\xa60CoAddress with all <code>0xee..ee</code> in it. Used for testing.000Dd<code>EitherEvm</code> delegates its calls to one of the two evm \xe2\x80\xa6AlList of JSON-RPC error codesAiKind of cheatcode errors.000AnRepresents a poll based filterB`Represents ethereum JSON-RPC APICnRevert the state of the blockchain to a previous snapshot. \xe2\x80\xa6CgError which occurred during execution of a transaction.00C`Execution skipped because could exceed gas limitAeExternal test builderChA draining, filtering iterator over the entries of a \xe2\x80\xa6CaAn extracting iterator for <code>IndexMap</code>.CaAn extracting iterator for <code>IndexSet</code>.DhA draining, filtering iterator over the items of a <code>HashSet</code>.3210CoAddress with all <code>0xff..ff</code> in it. Used for testing.000AmFile name of config toml fileCeFP_LENGTH specifies the number of bytes needed to \xe2\x80\xa60CnFP_PAD_BY specifies the number of bytes that an FP_ELEMENT \xe2\x80\xa60BiThe result of a <code>tryFfi</code> call.00000CkType alias for filters identified by their id and their \xe2\x80\xa6CgGet the block number closest to the provided timestamp.A`Formatter error.0AdA Solidity formatter0jFrame Data0CcThe initialization type used to create a new frame.0CgInitialization data for creating a new execution frame.110AlError converting from bytes.0BgPossible errors when running fuzz tests000CfType alias for a hash map that uses the Fx hashing \xe2\x80\xa60CfType alias for a hash set that uses the Fx hashing \xe2\x80\xa60CeG1_LENGTH specifies the number of bytes needed to \xe2\x80\xa60CaRecords the <code>snapshotGas*</code> cheatcodes.CaRepresents the gas report for a set of contracts.Clreturned if the transaction is specified to use less gas \xe2\x80\xa6AlThe git source preprocessor.CdThe git source output. The git url of the item path.01BnHomestead hard fork Activated at block 1150000BlString identifier for the Homestead hardforknFrontier spec.210nHomestead: \xe2\x80\xa6nInitial state.AiEVM hooks into execution.CeThe inspector type used for inspecting EVM execution.10CeThe inspector type used for EVM execution inspection.21210BoGenerate a Solidity interface from a given ABI.AbAn invariant test.kBit Seeking0CkTrait that contains database and journal of all changes \xe2\x80\xa600000DgA table of valid <code>jump</code> destinations. Cheap to clone and \xe2\x80\xa6000BoThe <code>0x20</code> (\xe2\x80\x9cKECCAK256\xe2\x80\x9d) opcode.0BhBase gas cost for KECCAK256 instruction.110BfSimple <code>Keccak-256</code> hasher.000BaPerform a left shifting operationDkAdds state previously dumped with <code>DumpState</code> to the current \xe2\x80\xa6BeLeast-Significant-First Bit Traversal000AlFailed to lock the transportC`Minus one (multiplicative inverse) of this type.0CgUtility struct that speeds up calculation of memory \xe2\x80\xa60CeOut of gas error encountered during memory expansion.0ClThe Sender half of multi fork pair. Can send requests to \xe2\x80\xa60000AnDefault port the rpc will openCgAn error that can occur when launching a anvil instanceBhExtension trait for <code>Output</code>.CkHelper trait to abstract over a solang type that can be \xe2\x80\xa6A`The parsed item.0BmErrors that can occur in the transaction poolAbA Transaction PoolBmGet the public key for the given private key.BiPublish a raw transaction to the network.AeRIPEMD-160 precompile0BeExclusive Bit-Slice Reverse Splitting0DjFS access is allowed, this includes <code>read</code> + <code>write</code>DaProvides additional path context for <code>fs::remove_dir</code>.0BjRetry arguments for contract verification.AoAll the selectors of this enum.000000000000000000000CbCheatcodes that interact with how a script is run.000CgExtracts function selectors and arguments from bytecodeAlFunction selector utilities.AhSets the backend rpc urlAlAn Ethereum ECDSA signature.0AmExclusive Bit-Slice Splitting0AbDump the raw stackCkRepresents the \xe2\x80\x93state flag and where to load from, or \xe2\x80\xa6ClState load information that contains the data and if the \xe2\x80\xa600000AhA statement in the code.00CnDeserialized <code>git submodule status lib/dep</code> output.CfTangerine Whistle hard fork Activated at block 2463000CdString identifier for the Tangerine Whistle hardfork10BoThe <code>0x42</code> (\xe2\x80\x9cTIMESTAMP\xe2\x80\x9d) opcode.000Bd<code>table*</code>, with arguments.nTangerine: \xe2\x80\xa6CjTest group execution context (test, coverage or snapshot).00000000AkThe result of a test setup.CjAdd an underscore every thousand, if greater than 9999 \xe2\x80\xa60B`Right-pads hex data to 32 bytes.CbNormalize the input to lowercase, 0x-prefixed hex.BjConvert a number to a hex-encoded uint256.AlSpecifies the kind of trace.00De\xe2\x9a\xa0\xef\xb8\x8f Workaround for Rust issue #50133. Use <code>TryFrom</code> \xe2\x80\xa60BgUpdates the block the entire block env,BaGeneric, uncategorized utilities.000BgAll the custom errors in this contract.00000CnSolidity source for the <code>Vm</code> interface in forge-stdCmA mutable iterator over the values of a <code>HashMap</code>.CoA mutable iterator over the values of an <code>IndexMap</code>.10AdThe verbosity level.CiVisitable trait for <code>solang_parser::pt</code> types.CgProvides additional path context for the new JSON file.0Cnmarker for the <code>Contract</code> type to create afterwardsCdEnsures that all rpc resources get flushed properly.0BmAdds multiple coverage items to this summary.00BfThe address of the running rpc server.BeA list of valid delegation contracts.CcReturns an iterator over the precompiles addresses.0CfAddresses that already had their PUSH bytes collected.AoReturns all the coverage items.00AgAll the coverage items.BiAbstract global allocator implementation.CbSpecify the <code>alloy</code> revision on GitHub.CjIf present, relax the requirement that topic 0 must be \xe2\x80\xa6CkReturns the path to anvil dir <code>~/.foundry/anvil</code>ianvil-rpcC`Applies a mutable transformation to the builder.0DcErrors that can occur when working with <code>solc</code> artifactsChReturns the path to the project\xe2\x80\x99s artifacts directory.CfGets a raw pointer to the zeroth bit of the bit-slice.ClCreates an unsafe shared bit-pointer to the start of the \xe2\x80\xa610B`Returns the signer if available.AbAuthority address.CmReturns an optional address based on the current state of \xe2\x80\xa61101DeCreates a new call builder for the [<code>balanceOf</code>] function.AoGets basic account information.00000BdReturns the Berachain mainnet chain.BjReturns the current best hash of the chainAeThe current best hashBnConfiguration for <code>forge bind-json</code>B`Transaction blob hash, calls \xe2\x80\xa60BdImplements the BLOBHASH instruction.110oThe block hash.00000BmReturns a reference to the block environment.CdThe block environment containing block-specific dataAeThe block environment210210210BeImplements the BLOCKHASH instruction.0DiBLS12-381 precompiles added in <code>EIP-2537</code> For more details \xe2\x80\xa60BbThe ID that identifies the branch.0AeThe current branch ID1CiAbsolute Path to broadcast dir i.e project_root/broadcastB`Current broadcasting information10AjBroadcast the transaction.2121AlBroadcasts the transactions.BkBroadcasts transactions from all sequences.4343DkSets up broadcasting from a script using <code>new_origin</code> as the \xe2\x80\xa6Bcwhere the broadcast logs are stored65CmBuilds TransactionRequest without filling missing fields. \xe2\x80\xa6AlReturns raw bytes reference.0BgReturns precompiles for Byzantium spec.0AjThe Chisel Cache DirectoryBdImplements the CALLCODE instruction.0CaCalculate call gas cost for the call instruction.0AkOptional decoded call data.00AnReturns the current call kind.AjThe type of expected call.BeImplements the CALLVALUE instruction.0ClResets the command to the default <code>cast</code> command.BgThe chain and fork the access occurred.00000AeGet the chain mutably00000AgGet the chain reference00000CcReturns bytecode hash associated with this account.DiHash of the raw bytes in <code>code</code>, or <code>KECCAK_EMPTY</code>.AjGets code hash of account.0021000CnCommit current transaction journal and returns transaction \xe2\x80\xa6CkPrepare for next transaction, by committing the current \xe2\x80\xa6111011DfCompile time for loops with a <code>const</code> variable for testing.0AlGlobal constants for the EVM0AhCommonly used constants.BhTracks all contracts by their code hash.BdAll created contracts in this block.AaCreated contracts10DbVector of contracts by bytecode hash. <strong>not</strong> sorted.1203BoAddresses identified to be a specific contract.AlReturns the known contracts.CeAll contracts that were analyzed grouped by their \xe2\x80\xa6CnMapping of contract name to JsonAbi, creation bytecode and \xe2\x80\xa6765765456432AoThe contracts source directory.0BkCommonly used contract types and functions.Be<code>contract name -&gt; info</code>656AfCompilation artifacts.CmCalculates the gas cost for copy operations based on data \xe2\x80\xa60EfCopies <code>count</code> bits from the region starting at <code>src</code> to the \xe2\x80\xa60CjReturns the default config that uses dapptools style pathsCeThe output directory/file to expand source tree into.Bltransaction that failed and became discardedCiConfigures the path on disk where the states will cached.BhClears the \xe2\x80\x9crun()\xe2\x80\x9d function\xe2\x80\x99s codeAkFunction with signature \xe2\x80\xa6DkFunction with signature <code>ecmul(uint256,uint256,uint256)</code> and \xe2\x80\xa6CfRecover the public key from a signature and a message.00000ChEmits lints (when possible with fix suggestions) for \xe2\x80\xa6CgProduces an empty bit-slice with an arbitrary lifetime.0AiEnd the last indent groupAlThe end token of the commentBbSupport for multiple RPC-endpointsAcEndpoints to cache.B`Suffix for the contract address.BcSuffix regex pattern or hex string.CdTests if the bit-slice ends with the given sequence.0CeChecks if there are any failures and failures are \xe2\x80\xa6CdReturns the width of the terminal in spaces, if any.CnReturns the block with the given hash in the format of the \xe2\x80\xa6BdAll recorded ETH <code>deal</code>s.000000BhThe optional Etherscan trace identifier.BeWhether to clean the Etherscan cache.1AbEtherscan options.BdSupport for multiple Etherscan keys.C`Multiple etherscan api configs and their aliases4BcReturn the current Journaled state.0BbEVM execution logic and utilities.CnCreates and executes the initial frame, then processes the \xe2\x80\xa60100CcEVM executor abstractions, which can execute calls.00EaFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.0BkStop running tests after the first failure.DbSets <code>block.basefee</code>. Container type for the return \xe2\x80\xa600000CfPerforms a foreign function call via the terminal. \xe2\x80\xa600000mThe file nameBiReturns the file name of the artifact ID.CiFills the bit-slice with bits produced by a generator \xe2\x80\xa60CdGets a mutable reference to the first bit of the \xe2\x80\xa6ClGet the first key-value pair, with mutable access to the \xe2\x80\xa60100DhFinds the index of the first bit in the bit-slice set to <code>1</code>.0ClFix foundry.toml files. Making sure any implicit profile \xe2\x80\xa6BmUse the Flashbots RPC URL with fast mode (\xe2\x80\xa60BnConverts the list into a vec, expected by revm0ClIf transaction is a Call and Prague is enabled floor_gas \xe2\x80\xa6000BiReturns the path to the forge executable.CaThe module for generating Solidity documentation.AlFormatter (<code>fmt</code>)BoA macro to generate a new integration test caseAbFormat parsed code0AdA Solidity formatternThe formatter.CiHandles the end of a frame by calling the appropriate \xe2\x80\xa60CnRun the frame from the top of the stack. Returns the frame \xe2\x80\xa600000AjConvert from a bits value.0CkTreat the message as a file containing JSON typed data. \xe2\x80\xa6AhAccess an entry by hash.000D`The bitwise or (<code>|</code>) of the bits in each flags value.DoConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value \xe2\x80\xa6DkCreate an <code>IndexMap</code> from the sequence of key-value pairs in \xe2\x80\xa6210ClGet a flags value with the bits of a flag with the given \xe2\x80\xa60AlConvert a pt::Type to a TypeB`Converts UTF-8 text input to hexCdConverts a vector of bytes to a <code>String</code>.0CmCreates an Ethereum address from an EVM word\xe2\x80\x99s upper 20 \xe2\x80\xa6CnCreates an Ethereum function from an EVM word\xe2\x80\x99s lower 24 \xe2\x80\xa610ChWhether to commit FS changes such as file creations, \xe2\x80\xa6000000CfPath which can be used to reference this struct in \xe2\x80\xa6AkFunction name if it exists.00AdAll known functions.DaReturns a map of all the <code>Function</code>s of this contract.CdFunction name -&gt; Function signature -&gt; GasInfo12CkFilter children items for [ParseSource::$variant] variants.2222222233CkSet seed used to generate randomness during your fuzz runs.CjGas floor calculated from EIP-7623 Increase calldata cost.0AmDefault gas limit for all txsAdThe block gas limit.AkReturns the block gas limit0CeReturns the gas limit for a non forked anvil instance3AkThe gas limit of the block.CbThe maximum amount of gas the transaction can use.AjThe gas limit of the blockBaThe gas limit of the transaction.1AnGas limit for the transaction.0AfTransaction gas limit.AaSet the gas limit35656CeBlock gas limit, calls ContextTr::block().gas_limit()AjThe gas limit of the call.AiThe gas limit of the call2101AlSets the executor gas limit.C`Returns the gas limit for calls and deployments.;:98977658:;:;432432310BhGas limit of the current cheatcode call.88A`Block gas limit.2nThe gas limit.BhThe gas limit for calls and deployments.51AlReturns the gas limit to useAdThe block gas limit.109AnDefault gas price for all txs.AmDefault gas price for all txsnThe gas price.B`The base price to use Pre LondonBhReturns the gas pric of this transactionAmReturns the current gas price4ClGas price for the transaction. It is only applicable for \xe2\x80\xa6BaThe gas price of the transaction.AaSet the gas price122AbSet the gas price.7773212330777AlReturns the gas price to use88CmGas price for legacy transactions, or max fee per gas for \xe2\x80\xa609Cd<code>tx.gasprice</code> value during EVM execution.::3:Bjthe tx.gasprice value during EVM execution0BkGets chain information for the given alias.CnGiven an error signature string, it tries to parse it as a \xe2\x80\xa6CnGiven an event signature string, it tries to parse it as a \xe2\x80\xa6AmGet a key-value pair by indexAdGet a value by indexAnGet a key-value pair by index.AeGet a value by index.3210B`Returns the nonce of the addressB`Returns the nonce of an account.00AmGets paths in the formats \xe2\x80\xa60ClReturns the configured prank at given depth or the first \xe2\x80\xa6000AoSends <code>eth_getProof</code>CkReturns the account and storage values of the specified \xe2\x80\xa6ClReturns a slice of key-value pairs in the given range of \xe2\x80\xa6ChReturns a slice of values in the given range of indices.101010AoPrevious value of storage slot.BiPrevious value of transient storage slot.1010B`Whether the account had a value.0212121212100BbHandles incoming Websocket upgradeB`Calculates hash of the bytecode.BjCalculate the seal hash, this may be slow.10BdHighlights a Solidity source string.BgReturns precompiles for Homestead spec.0CcRun a command with hyperfine and return the resultsC`Determines the sign of a 256-bit signed integer.0CcThe instruction counter to program counter mapping.BdImmediate data following the opcode.BjReturns the Immutable zkEVM mainnet chain.DkMutably indexes into a bit-slice, panicking if <code>self</code> is out \xe2\x80\xa6CmReturns a mutable reference to the value corresponding to \xe2\x80\xa6ClReturns a mutable reference to the value at the supplied \xe2\x80\xa6210BiInit code of the contract to be deployed.BnThe init code for CREATE2 address computation.AmThe init code of the contract000AmSize of the initcode in bytesClInserts the new state snapshot at the given <code>id</code>.CgAdds <code>Vm.sol</code> as a source under \xe2\x80\x9cVm.sol\xe2\x80\x9dCjAnvil specific <code>revm::Inspector</code> implementationCkInspector of the EVM it is used to inspect the EVM. Its \xe2\x80\xa6000BmReturns a mutable reference to the inspector.BiReturns a reference to the EVM inspector.222210AhCheatcode EVM inspector.1AiThe Revm inspector stack.AjStyle of uint/int256 types0CmInterface for the precompiles. It contains the precompile \xe2\x80\xa60C`Returns the output data of the execution output.CjConsumes the stack and returns the underlying data buffer.10BmConsume the input, converting it to the hash.0DhConsumes the <code>Journal</code> and returns <code>JournalInner</code>.0BgConvert the inner value to an iterator.CnCreates a consuming iterator, that is, one that moves each \xe2\x80\xa60100CiCreates a consuming iterator visiting all the keys in \xe2\x80\xa6CjReturn an owning iterator over the keys of the map, in \xe2\x80\xa6CiReturn an owning iterator over the keys of the map slice.210AoReturns the kind of this chain.DcConsumes <code>self</code> and returns the logs if execution is \xe2\x80\xa60CaConverts the implementing type into a U256 value.0CbLeft-pads the address to 32 bytes (EVM word size).CdRight-pads the function to 32 bytes (EVM word size).10BcConfiguration for invariant testing0CnReturns true if the path exists on disk and is pointing at \xe2\x80\xa600000BgTrue if this metadata is for a symlink.AoWhether the entry is a symlink.1010101010BkReturns whether the dependency is a branch.BfReturns true if frame is create frame.CgReturns true if the transaction is a contract creation.BnReturns <code>true</code> if action is create.210BoReturns true if the transaction type is custom.0BfCheck if this comment is a custom tag.CdReturns true whether this tx is a legacy transactionBoReturns true if the transaction type is legacy.0CkReturns whether the chain implements EIP-1559 (with the \xe2\x80\xa60CeReturns true if client is actively mining new blocks.AkWhether this node is miningCgReturns true if the output mode is <code>Normal</code>.CiReturns true if this is the StackSnapshotType::Pushes \xe2\x80\xa6000CmCheck to see if a string is quoted. This will return true \xe2\x80\xa6CaReturns true if the option is <code>Remove</code>000BiReturns true if this is a result variant.0BnReturns <code>true</code> if action is return.0BgReturns whether the result is a revert.BiReturns true if the transaction reverted.CcReturns whether the instruction result is a revert.BlReturns true if the status code is a revert.32100CbReturns <code>true</code> if the number is signed.0CmWhether the call is a static call, or is initiated inside \xe2\x80\xa6CcWhether the current execution context is static \xe2\x80\xa61CkReturns true if the current execution context is static \xe2\x80\xa62120FeReturns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>\xe2\x80\xa6EhReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>\xe2\x80\xa610BaWhether to enable call isolation.B`Whether to enable call isolationAgThe original item path.0CnReturn an iterator over the key-value pairs of the map, in \xe2\x80\xa60DfEnumerates the index of each bit in a bit-slice set to <code>1</code>.0ChCheckpoint to where on revert we will go back to and \xe2\x80\xa60CnSimple interface to the <code>Keccak-256</code> hash function.00BeImplements the KECCAK256 instruction.1110CfHow long we keep a live the filter after the last pollChReturns all wallets read from the provided keystores \xe2\x80\xa6CmLabels an address in call traces. Function with signature \xe2\x80\xa600000BgGet the last char written to the bufferCjStores the last line we put in the items collection to \xe2\x80\xa6ClFinds the index of the last bit in the bit-slice cleared \xe2\x80\xa60AcRun HIR-based lintsBhReturns the size of this array in bytes.CeReturns the size of this byte array (<code>N</code>).111011AoThe path to the library folder.0CeThe lib/dependency directories to scan for remappings0BiLibrary addresses used to link contracts.AlPaths to external libraries.0BeLibraries used to link the contracts.AiSet pre-linked libraries.00Ailibrary addresses to linkCkResolved library addresses. Contains both user-provided \xe2\x80\xa6BbThe number of lines that were hit.00ClLoads account and its code. If account is already loaded \xe2\x80\xa60AmGet the local context mutably00000AoGet the local context reference00000DhFunction with signature <code>log(address,address,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,uint256,address)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes10)</code> and selector \xe2\x80\xa600DiFunction with signature <code>log(address,address,address)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,address,string)</code>\xe2\x80\xa600DbFunction with signature <code>log(bytes11)</code> and selector \xe2\x80\xa600DhFunction with signature <code>log(string,address,bool,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,address,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,address,bool,uint256)</code> and \xe2\x80\xa600DfFunction with signature <code>log(bool,uint256,address)</code> and \xe2\x80\xa600DcEvent with signature <code>log_bytes(bytes)</code> and selector \xe2\x80\xa600BcLogs stats about the current state.00iLow word.000CnMaps the item variant using the provided function, leaving \xe2\x80\xa60EgApply the function <code>f</code> on the value in the <code>Right</code> variant if \xe2\x80\xa60AjMarks the account as cold.CcMarks the storage slot as cold. Does not change \xe2\x80\xa610CjMaps an address that copies storage with the arbitrary \xe2\x80\xa6Bgdisambiguate tag if it is a version tagCbMax call depth reached during next call execution.BcHow often to retry a failed requestBnMerges two <code>Option&lt;HitMaps&gt;</code>.00CeUse the mnemonic phrases of mnemonic files at the \xe2\x80\xa600AnModifies the context database.0BaModifies the context transaction.0CfHelper function to extract value of a given named arg.CcCreates a new TxEnv with benchmark-specific values.0CcCreate new frame action with the given frame input.0DgCreates a new <code>Gas</code> struct with the given gas limit, but \xe2\x80\xa60AeNew value that is set000AfCurrent storage value.0CeDo not de-duplicate (repeats all shared dependencies)DkDisable auto, interval mining mode uns use <code>MiningMode::None</code>\xe2\x80\xa6ChDisable auto and interval mining, and mine on demand \xe2\x80\xa61ChDon\xe2\x80\x99t initialize the salt with a random value, and \xe2\x80\xa6DhA <code>info!</code> helper macro that emits to the target, the node \xe2\x80\xa6CfReturns a mutable reference to the nodes in the arena.00CmReturns number of words what would fit to provided number \xe2\x80\xa6000F`Returns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</codeoCalled when there was a revert.000EkReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</codebReturn only constructor arguments.DcReturns the <code>Optimizer</code> based on the configured settingsAmWhether to activate optimizerCiInserts the given default value in the entry if it is \xe2\x80\xa6ClEnsures a value is in the entry by inserting the default \xe2\x80\xa6CnInserts the given default key and value in the entry if it \xe2\x80\xa6CjEnsures a value is in the entry by inserting if it was \xe2\x80\xa63210ClSee: https://eips.ethereum.org/EIPS/eip-7823 Gas cost of \xe2\x80\xa60BfOverwrite existing generated bindings.CkParses a string slice into a signed integer. If base is \xe2\x80\xa6CiParse source code, returning a list of diagnostics on \xe2\x80\xa6AhSends a new post requestCkWrite a styled fragment with the default color. Use the \xe2\x80\xa60AaConfig providers.AoPushes B256 value to the stack.0EcFormat a quoted string as <code>prefix&quot;string&quot;</code> where the quote \xe2\x80\xa6CnFills this fixed byte array with the default cryptographic \xe2\x80\xa6DeFills this <code>FixedBytes</code> with the default cryptographic \xe2\x80\xa6DfFills this <code>Uint</code> with the default cryptographic random \xe2\x80\xa62221022BhIterates over all possible index values.BkIterates over all possible selector values.10CmDecomposes a bit-pointer into its element address and bit \xe2\x80\xa60DgReturns the complementary error variant for <code>fs::read_link</code>.BlWrapper for <code>std::fs::read_link</code>.BaTrue if gas recording is enabled.AnRecursively update submodules.CiGets the remnant bit-slice that the iterator will not \xe2\x80\xa6000BdReturns the amount of gas remaining.0CjRemoves the state snapshot with the given <code>id</code>.CmThe coverage reporters to use. Constructed from the other \xe2\x80\xa6FaReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</codejMacro that matches all successful instruction results. \xe2\x80\xa60CnRight-pads the given slice with zeroes until <code>LEN</code>.0AlRolls the block of the fork.BgUpdates the fork to given block number.DkThis is effectively the same as <code>Self::create_select_fork()</code> \xe2\x80\xa6102102102CmPerforms an Ethereum JSON-RPC request to the current fork \xe2\x80\xa600000CfPerforms an Ethereum JSON-RPC request to the given \xe2\x80\xa600000CjRuns the given async closure in a loop, retrying if it \xe2\x80\xa6AjRun the modexp precompile.0CcExecutes the interpreter until it returns or stops.0CjRun all tests that matches the filter predicate from a \xe2\x80\xa6CgRuns all tests for a contract whose names match the \xe2\x80\xa6CkTest runner based on <code>ui_test</code>. Adapted from \xe2\x80\xa6CmReturns a sanitized version of the Config where are paths \xe2\x80\xa6CfPath to save the generated vanity contract address to.CjSeal the object by calculating the hash. This may be slow.0Bb<code>ecrecover</code> precompile.0AmRIP-7212 secp256r1 Precompile0AnHolds the last sha3 result \xe2\x80\xa6BkSupport for handling/identifying selectors.BoReturns the character used as decimal separator0DiFunctions to serialize and deserialize an <code>IndexMap</code> as an \xe2\x80\xa60CkSerializes an <code>IndexMap</code> as an ordered sequence.0EbFunction with signature <code>setUp()</code> and selector <code>0x0a9254e4</code>.00nSet the block.00mSet the block00BkSets the block for the relevant inspectors.22211100BgWhether to run <code>forge build</code>AoSets the Chain of this instance0CgConfigures the chain and sets the etherscan key, if \xe2\x80\xa6AdSets the chain value22AiSet invariant test error.00BcSets the nonce of the given address0CeSets the <code>AccountInfo</code> <code>nonce</code>.AlSet the nonce of an account.100CjSet a spent value. This overrides the current spent value.0CmConfigure whether individual opcode level steps should be \xe2\x80\xa6000BiPrints a raw formatted message to stderr.Djshow <code>console.log</code> in fuzz test, defaults to <code>false</code>0CjShrinks the capacity of the map with a lower limit. It \xe2\x80\xa6CbShrink the capacity of the map with a lower limit.CbShrink the capacity of the set with a lower limit.CjShrinks the capacity of the set with a lower limit. It \xe2\x80\xa6DdShrinks the capacity of this <code>String</code> with a lower bound.43210AeSigns the given hash.0BhReturns the Signature of the transactionAhThe signature to verify.DbGets the <code>signature</code> for the authorization. Returns \xe2\x80\xa6AgThe function signature.B`Function signature if it exists.DhThe standard function signature used to calculate <code>selector</code>.BlThe function signature of the Solidity test.41231123ChThe approximate size of changes needed to store this \xe2\x80\xa6CiReturns the approximate size of changes in the bundle \xe2\x80\xa61101DcSuspends execution of the main thread for <code>duration</code> \xe2\x80\xa600000CjReturns a byte slice of the memory region at the given \xe2\x80\xa6A`Memory slice len1011CkReturns a slice of self that is equivalent to the given \xe2\x80\xa60Bbwhere the gas snapshots are storedClSort the map\xe2\x80\x99s key-value pairs by the default ordering \xe2\x80\xa60CmSort the key-value pairs of the map and return a by-value \xe2\x80\xa6CmSort the values of the set and return a by-value iterator \xe2\x80\xa610nThe source ID.00AnThe source ID of the contract.CfLaunches an ipc server at the given path in a new taskAiSpends all remaining gas.0DiSplits the given <code>string</code> into an array of strings divided \xe2\x80\xa600000CjIterates over mutable subslices separated by bits that \xe2\x80\xa60CeSplits the bit-vector in half at an index, moving \xe2\x80\xa6BmSplits the bytes into two at the given index.CbSplits the collection into two at the given index.0CcSplits the string into two at the given byte index.32110CjStores a value to an address\xe2\x80\x99 storage slot. Function \xe2\x80\xa600000CmSets up a subscription to the given filter and writes the \xe2\x80\xa6DeIf the RPC type and endpoints supports <code>eth_subscribe</code> \xe2\x80\xa6ClReturns an iterator over all individual succeeding tests \xe2\x80\xa60CmRemoves and returns the value in the set, if any, that is \xe2\x80\xa60ClNumber of spaces per indentation level. Ignored if style \xe2\x80\xa60A`Removes the forkAgTake logs from journal.A`Returns the logs111011BgThe path where to create the tempdir inDeExecutes <em>all</em> tests that match the given <code>filter</code>.ClThe fully-qualified name of the test being run, as would \xe2\x80\xa600BcThe timestamp of the genesis block.BbThe timestamp for the forked blockBkThe initial timestamp for the genesis blockBmThe UNIX timestamp to search for, in seconds.CkThe timestamp of the block in seconds since the UNIX epoch.CjThe timestamp of the block in seconds since the UNIX epoch011CeBlock timestamp, calls ContextTr::block().timestamp()0BeImplements the TIMESTAMP instruction.32233110BlCopies a bit-slice into an owned bit-vector.0CgConverts a number into int256 hex string with 0x prefixEdcreates an unique identifier for aan (<code>nonce</code> + <code>Address</code>) \xe2\x80\xa6BlReturns the checksum of a formatted address.CbConverts the given value to a <code>String</code>.10ChTolerates gas deviations up to the specified percentage.DbDual to <code>try_left!</code>, see its documentation for more \xe2\x80\xa60BdCreates the node and runs the serverCgAttempts to lock this lock with exclusive write access.C`Computes the two\xe2\x80\x99s complement of a U256 value.0AgThe transaction origin.BhThe tx.origin value during EVM executionBhthe tx.origin value during EVM execution0AmReturns the type as a string.FeReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>\xe2\x80\xaoUnsets the environment variable <code>k</code> for the command.CjUnwind the chain state back to the given block in storage.EgUpdates the <code>foundry.toml</code> file for the given <code>root</code> based on \xe2\x80\xa6CfUtility function that precompiles use, padding and \xe2\x80\xa60Bftype used to validate before inclusionCkFilter children items for [ParseSource::$variant] variants.oVerbosity level0BdVerbosity level of the log messages.0BjReturns the currently set verbosity level.DkGets the verbosity of the shell when <code>OutputMode::Normal</code> is \xe2\x80\xa6BnThe verbosity level to use for message output.A`verbosity to useCfVerbosity mode of EVM output as number of occurrences.066C`Views a memory region as an immutable bit-slice.000DeExecutes a <code>Watchexec</code> that listens for changes in the \xe2\x80\xa6DfReturns <code>10^self</code>, which is the number of Wei in this unit.0CfHelper function to check if frame execution will exit.BhSets the ABIs to use for error decoding.000CdCreates a copy of the number with the provided base.CkCreates a new <code>AccountInfo</code> with the given code.0BdSet formatted code on the ParseItem.BgSets the host the server will listen onCgSets account info and returns self for method chaining.0BoSpecify the path where to create the tempdir inAdSets the port to useAiSet the port to serve on.CeCreates a new Config that adds additional context \xe2\x80\xa6CcCreates a <code>fx</code> hasher with a given seed.DkInitializes this <code>FoldHasher</code> with the given per-hasher seed \xe2\x80\xa6DjGenerates a <code>SeedableRandomState</code> with the given per-hasher \xe2\x80\xa6DaCreates a <code>FixedState</code> with the given per-hasher-seed.21DaCreates a <code>FixedState</code> with the given per-hasher seed.DjConstructs a new <code>FxSeededState</code> that is initialized with a \xe2\x80\xa654324310EgConsumes <code>self</code> and returns a new <code>CfgEnv</code> with the specified \xe2\x80\xa60CgVariant of with_warm_mark that doesn\xe2\x80\x99t return the \xe2\x80\xa60AeCurrent memory length0ClWrites a value to one bit in a memory element, returning \xe2\x80\xa60BiWrite AsDoc implementation to the buffer.BaWrites raw content to the buffer.CnWrite a raw string to the buffer. This will ignore indents \xe2\x80\xa6BoMatches Ethereum addresses that are not stringsBhCreate an access list for a transaction.BaAccessList as defined in EIP-29300BdIncreases the balance of an account.D`<code>HashMap</code> optimized for hashing <code>Address</code>.0D`<code>HashSet</code> optimized for hashing <code>Address</code>.0m(type, index)CiFor an initializer x, of type bool: replace x with !x \xe2\x80\xa6EcAn iterator over <code>BitSlice</code> that yields <code>&amp;bool</code> directly.0AoRead-Only Shared-Mutable Handle00000DnAn iterator over <code>BitSlice</code> that yields <code>bool</code> directly.0AmA simple in-memory blockchainBoInput to the <code>Bloom::accrue</code> method.0CmUsed to keep track of which buffer is currently active to \xe2\x80\xa6BdAll the cheatcodes in this contract.00000AiMatches Solidity commentsCfCache state contains both modified and original values00000AbInputs for a call.000AeThe result of a call.00lCall scheme.000EgA modification applied to either <code>msg.sender</code> or <code>tx.origin</code>. \xe2\x80\xa600000CmA representation of data for a given chain in the foundry \xe2\x80\xa6CnAn EVM inspector that handles calls to various cheatcodes, \xe2\x80\xa60BcFoundry cheatcodes. Learn more: \xe2\x80\xa61101101CfThe cheatcode context, used in <code>Cheatcode</code>.00BfClear the cache of all stored sessionsCiClear all cached chisel sessions from the cache directoryBdRepresents a fork of a remote clientClCode changed Action: Account code changed Revert: Revert \xe2\x80\xa60000000CiThe natspec comment tag explaining the purpose of the \xe2\x80\xa60BlCLI arguments for <code>forge config</code>.BcFormats a value using a FormatSpec.0BbA unique identifier for a contract00CkA wrapper around <code>Backend</code> that ensures only \xe2\x80\xa60000BlCLI arguments for <code>forge create</code>.CoProvides additional path context for <code>File::create</code>.0CnRepresents a <em>fork</em> of a remote chain whose data is \xe2\x80\xa6000AjCreates a new ForkBackend.CkEstimates the data availability size of a given opstack \xe2\x80\xa6C`The <code>0x44</code> (\xe2\x80\x9cDIFFICULTY\xe2\x80\x9d) opcode.000BdRecords <code>deal</code> cheatcodesCgA git dependency which will be installed as a submodule0AfA contract deployment.0CiThe cheatcode has been deprecated, meaning it will be \xe2\x80\xa6000CkA lazy iterator producing elements in the difference of \xe2\x80\xa6000CkDisables formatting for any code that precedes this and \xe2\x80\xa60CkBuild Solidity documentation for a project from natspec \xe2\x80\xa60CnThis is currently used to remember last scroll position so \xe2\x80\xa6BaThe ECPairing precompile address.BaThe ECRecover precompile address.BlCLI arguments for <code>forge eip712</code>.DeThrown when there are no <code>blob_hashes</code> in the transaction.CfThere should be at least one blob in Blob transaction.0AfKey equivalence trait.0ChAn RPC log object. Returned by <code>eth_getLogs</code>.00000B`Represents ethereum JSON-RPC APIC`Container type for either a request or a pub subCnSets the specific timestamp Accepts timestamp (Unix epoch) \xe2\x80\xa6ClAn account\xe2\x80\x99s Storage is a mapping from 256-bit integer \xe2\x80\xa60CeTrait for errors that can occur during EVM execution.000ChExecute EVM transactions. Main trait for transaction \xe2\x80\xa600000AeDebugger exit reason.0Dc<code>IndexMap</code> optimized for hashing fixed-size byte arrays.0Dc<code>IndexSet</code> optimized for hashing fixed-size byte arrays.0BbStores the fee related informationCcCheatcodes that interact with the OS or filesystem.000BaThe filter to use during testing.0n(type, length)CdA byte array of fixed length (<code>[u8; N]</code>).000EdA <code>BuildHasher</code> for <code>fast::FoldHasher</code> that always has the \xe2\x80\xa6EgA <code>BuildHasher</code> for <code>quality::FoldHasher</code> that always has the \xe2\x80\xa610DgA <code>Hasher</code> instance implementing foldhash, optimized for \xe2\x80\xa6000CmFork delimiter used to specify which block or transaction \xe2\x80\xa60AcA format specifier.0BnInput data for creating a new execution frame.000AlNon-empty, item-pooling Vec.00000CiUsed to guarantee that a frame is initialized before use.00000BbMetadata information about a file.00000CdConfiguration for how a proptest test should be run.0AiContains for fuzz testing01Careturned if the transaction gas exceeds the limitBlCLI arguments for <code>forge geiger</code>.CnReturns the Fork Url for the <code>ForkId</code> if it exists.AmGlobal arguments for the CLI.0BkThe halt reason type included in the output0CkIndicates that the EVM has experienced an exceptional halt.110DiA convenience extension trait to enable <code>HashMap::new</code> for \xe2\x80\xa60DiA convenience extension trait to enable <code>HashSet::new</code> for \xe2\x80\xa60AjMatches start and end hex.ChContainer for all the <code>ITest</code> function calls.00CiHelper function to read immediates data from the bytecode0CnA Database implementation that stores all state changes in \xe2\x80\xa6000DiEntry for an existing key-value pair in an <code>IndexMap</code> or a \xe2\x80\xa60ClThe inheritdoc preprocessor. Traverses the documents and \xe2\x80\xa6CkCopies all missing tags from the base function (must be \xe2\x80\xa6ClThe inheritdoc output. The map of inherited item keys to \xe2\x80\xa6102AiA parsed link to an item.BkState with known input for the transaction.CmInputs for the interpreter that are used for execution of \xe2\x80\xa6000CcInspectEvm is a API that allows inspecting the EVM.000C`Interleave calls from two random call sequences.DjProvides methods for converting a type <code>Self</code> into either a \xe2\x80\xa60CmAn owning iterator over the values of a <code>HashMap</code>.CoAn owning iterator over the values of an <code>IndexMap</code>.10kInvalid JWTCeAn item anchor describes what instruction marks a \xe2\x80\xa600CaIterator that maps left or right iterators to \xe2\x80\xa60CmExtends the journal with additional methods that are used \xe2\x80\xa60CkCall trace with tracing for JUMP and JUMPDEST opcode steps.00DfFirst <code>/</code> in line comment start <code>&quot;//&quot;</code>DhSecond <code>/</code> in  line comment start <code>&quot;//&quot;</code>CeOutput of the <code>link_with_nonce_or_address</code>BbHelpers for loading configuration.0ClListens for new blocks and matching logs emitted in that \xe2\x80\xa6DcMagic return value returned by the <code>skip</code> cheatcode. \xe2\x80\xa6000CgType alias for a mainnet EVM instance with standard \xe2\x80\xa6000BiCLI arguments for <code>cast mktx</code>.Ahthe RPC method to invokeAoA Mining mode that does nothingBmMode of operations for the <code>Miner</code>ClAttempted to construct a bit-pointer with an address not \xe2\x80\xa6BhThe base element pointer is not aligned.10BcGeneralized mutability permissions.CiSolidity function state mutability attribute. See the \xe2\x80\xa61000BdGas cost for creating a new account.0AjAn Ethereum EIP-155 chain.AnConfigurations of the EVM node0BnA handle to the spawned node and server tasks.lResult aliasCg\xe2\x80\x98Not a number\xe2\x80\x99 (NaN) can not be represented as Uint0ChNumber is equal or larger than the target field modulus.0BnHelper type to deserialize sequence of numbersClInformation about opcode, such as name, and stack inputs \xe2\x80\xa60DkOtterscan\xe2\x80\x99s <code>ots_hasCode</code> endpoint Check if an ETH address \xe2\x80\xa6BaOut of funds to pay for the call.BaCaller does not have enough fundsB`Insufficient funds for transfer.210AjThe requested output mode.AnRIP-7212 secp256r1 precompile.0BoPetersburg hard fork Activated at block 7280000BmString identifier for the Petersburg hardfork10B`EIP-2537 BLS12_G1ADD precompile.B`EIP-2537 BLS12_G1MSM precompile.B`EIP-2537 BLS12_G2ADD precompile.B`EIP-2537 BLS12_G2MSM precompile.BhEIP-2537 BLS12_MAP_FP2_TO_G2 precompile.BgEIP-2537 BLS12_MAP_FP_TO_G1 precompile.BbEIP-2537 BLS12_PAIRING precompile.6543210CiServer received Invalid JSON. server side error while \xe2\x80\xa6BfError for <code>from_str_radix</code>.0CgConvert a number from decimal to smallest unit with \xe2\x80\xa6CkThis enum holds the numeric types that a possible to be \xe2\x80\xa60oPetersburg: \xe2\x80\xa6AlOnly plain state is updated.0AjPrecompile threw OOG error0BaDerives private key from mnemonicCfThe state of a character in a string with quotable \xe2\x80\xa6AfStyle of string quotes0AlExclusive Bit-Slice Chunking0BbThe RIPEMD-160 precompile address.BeExclusive Bit-Slice Reverse Splitting0CjGet the automatically inferred remappings for the project.DlWrapper types over a <code>Vec&lt;Remapping&gt;</code> that only appends \xe2\x80\xa60BlCLI arguments for <code>forge remove</code>.DbProvides additional path context for <code>fs::remove_file</code>.0BkConfiguration for repositories to benchmarkAeError type for Retry.B`Return data implementation type.AdReturns return data.1101BhKeep the state snapshot after reverting.0000BbPerform a right shifting operationCgHelper trait that is used to execute ethereum rpc callsC`The <code>0x0B</code> (\xe2\x80\x9cSIGNEXTEND\xe2\x80\x9d) opcode.000CmGas cost for SSTORE when setting a storage slot from zero \xe2\x80\xa60C`The <code>0xFA</code> (\xe2\x80\x9cSTATICCALL\xe2\x80\x9d) opcode.000CiTrait implemented to unwrap optional parse tree items \xe2\x80\xa60BlCLI arguments for <code>forge script</code>.BiCLI arguments for <code>cast send</code>.CjDifferent sender kinds used by <code>CastTxBuilder</code>.BcModifies the balance of an account.AaSets the chain idAiEnable or disable loggingCiA random seed intended to be shared by many different \xe2\x80\xa60BdContracts with info about their sizenA skip reason.000BbThe source code and AST of a file.00CnMore constrained version of State that uses Boxed database \xe2\x80\xa600000Ag<code>STATICCALL</code>0AiRepresents a static call.BfThe account was called via staticcall.220100001Aktype alias for storage keysAgAn account storage key.0100CfDeserialized <code>git submodule status</code> output.lTest filter.0AoThe result of an executed test.AeThe status of a test.BnCLI arguments for <code>cast --to-base</code>.DbTrace transaction endpoint for parity\xe2\x80\x99s <code>trace_block</code>AgTransaction destination00000CdError type for <code>Unit</code>-related operations.0BlCLI arguments for <code>forge update</code>.CbCLI arguments for <code>cast wallet vanity</code>.CeCLI arguments for <code>forge verify-contract</code>.ClSolidity function visibility attribute. See the Solidity \xe2\x80\xa6000CkWalletData contains address and private_key information \xe2\x80\xa6BaThe wallet options can either be:BgDecodes abi-encoded hex input or outputCnPerforms ABI encoding based off of the function signature. \xe2\x80\xa6DhABI-encodes this error as <code>CheatcodeError(string)</code> if the \xe2\x80\xa600BdIngests a log into the bloom filter.0BlAdds a new <code>EthFilter</code> to the setDhAdds the given <code>offset</code> to the already tracked offset and \xe2\x80\xa6BbAdds a script file to the project.AgAdd a source file path.00BbAdds a source file to the project.CiComputes <code>lhs += a * b</code> and returns the carry.0ClGets the address for a given private key. Container type \xe2\x80\xa600000DnSets aggressive <code>max_retry</code> and <code>initial_backoff</code> valuesBg\xe2\x9a\xa0\xef\xb8\x8f Collection of bignum algorithms.0BeModifies the entry if it is occupied.CiProvides in-place mutable access to an occupied entry \xe2\x80\xa61101janvil-coreAiMines a series of blocks.CiApplies this cheatcode to the given context and executor.BjApplies the matrix to a <code>u128</code>.0AkDouble precision logarithm.0CaArithmetic operations (ADD, SUB, MUL, DIV, etc.).0BnConvert a slice to a 32 byte big endian array.0BnConvert a slice to a 48 byte big endian array.0CgReturns the ERC-2098 compact representation of this \xe2\x80\xa60BlReturns the checksum of a formatted address.CkConverts a <code>String</code> into a mutable string slice.10DhReturns a mutable reference to the contents of this <code>String</code>.0DbConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to \xe2\x80\xa60GoConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, \xe2\x80\xa60ChIf the condition is false, discard this run\xe2\x80\x99s fuzz \xe2\x80\xa600000AkBatch size of transactions.ClSee: https://eips.ethereum.org/EIPS/eip-2565 Gas cost of \xe2\x80\xa60CcPartitions a bit-slice into maybe-contended and \xe2\x80\xa60AlThe hash of the forked blockCgHash of the block this transaction was included within.B`Gets block hash by block number.0000AeBlock hash, calls \xe2\x80\xa601111100CkBlock information instructions (COINBASE, TIMESTAMP, etc.).0DjConfigured block time for the EVM chain. Use <code>None</code> to mine \xe2\x80\xa6BjBlock time in seconds for interval mining.1AmOverride the block timestamp.Bhstores all block related data in memory.CbAdds or removes the given breakpoint to the state.EnReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ClOriginal build data, might be used to relink this object \xe2\x80\xa6DfBuild the final <code>TxEnv</code> with default values for missing \xe2\x80\xa60AjGenerate build info files.0ClGenerates additional build info json files for every new \xe2\x80\xa6BaThe path where states are cached.CdPath to the cache directory where states are stored.1AoThe path to the compiler cache.0Bdwhere the cache is stored if enabledBkLocation where to save the signature cache.0ClReturns the call value, regardless of the transfer value \xe2\x80\xa6AbValue of the call.0AoReturns call value of the call.2110ClReturns whether the given transaction can be replayed or \xe2\x80\xa600CnJoins all relative paths with the given root so that paths \xe2\x80\xa6CeOnly print the transaction hash and exit immediately.CbExit immediately if the transaction was not found.1CeThe chain\xe2\x80\x99s alias. (i.e. what gets specified in \xe2\x80\xa600000BdThe cheatcode states after executionBhEnable cheatcodes with the given config.AfThe cheatcodes config.AcAll the cheatcodes.210303121BgJournal checkpoint for state reversion.CkCreates a checkpoint of the current state. State can be \xe2\x80\xa6ClMakes a checkpoint that in case of Revert can bring back \xe2\x80\xa61121011ChIterates over non-overlapping mutable subslices of a \xe2\x80\xa60CfClears bits within a memory element to <code>0</code>.0DdOverwrites the contents of <code>self</code> with a clone of the \xe2\x80\xa6DbClones the contents of <code>source</code> into <code>self</code>.10EhReturns a new <code>CheatsConfig</code> configured with the given <code>Config</code>\xe2\x80\xa6000DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa60ClReverts removed call from sequence and tries to simplify \xe2\x80\xa6AiConcatencates hex stringsCkReturns a mutable reference to the config of the inspector.000BfFilename to write anvil output as jsonDcWrites output of <code>anvil</code> as json to user-specified file.1AkConnects to a WS transport.AjThe established connectionChCompare two Reverts instances, ignoring the order of \xe2\x80\xa60ClMarks the slots of an account and the account address as \xe2\x80\xa600000CkPath where invariant corpus is stored, enables coverage \xe2\x80\xa60DdCounts the number of bits set to <code>1</code> in the bit-slice \xe2\x80\xa6CnReturns the number of ones in the binary representation of \xe2\x80\xa60100BgThe name of the Rust crate to generate.0DhReturns the complementary error variant for <code>fs::create_dir</code>.BlWrapper for <code>std::fs::create_dir</code>BhCalled when a contract has been created.0AoSpend all gas if create failed.110DfComputes the address created by the <code>EOFCREATE</code> opcode, \xe2\x80\xa60CmSets an address\xe2\x80\x99 balance. Container type for the return \xe2\x80\xa600000AkThe capability to delegate.AfCLI dependency parsingCnDeprecated cheatcodes mapped to the reason. Used to report \xe2\x80\xa6000000BaThe fuzz dictionary configuration000CeThe intersection of a source flags value with the \xe2\x80\xa6DhReturn an iterator over the values that are in <code>self</code> but \xe2\x80\xa6ClVisits the values representing the difference, i.e., the \xe2\x80\xa6CnReturns complement of <code>other</code> in <code>self</code>.3210AlThe difficulty of the block.AkThe difficulty of the block011CgBlock difficulty, calls ContextTr::block().difficulty()0CaImplements the DIFFICULTY/PREVRANDAO instruction.32233110CkDiscard current transaction journal by removing journal \xe2\x80\xa6CmDiscard the current transaction, by reverting the journal \xe2\x80\xa6111011AiStores old states on diskjDispatcherDiCalculates the quotient of Euclidean division of <code>self</code> by \xe2\x80\xa60CnViews the underlying memory of a bit-slice, removing alias \xe2\x80\xa60AeInfallible state dumpClDump the state and block environment of chain on exit to \xe2\x80\xa6BoWrite all chain data to serialized bytes buffer0AcRun AST-based lintsE`Compare self to <code>key</code> and return <code>true</code> if they are equal.0BbErases a gas cost from the totals.0ClReturns a helper type that contains commonly used values \xe2\x80\xa6CjSets an address\xe2\x80\x99 code. Container type for the return \xe2\x80\xa600000CnRevert the state of the blockchain to a previous snapshot. \xe2\x80\xa6ChReturns true if the given path points to an existing \xe2\x80\xa600000DfOptional additional CLI arguments to pass to <code>solc</code> binary.ClCreates an iterator which uses a closure to determine if \xe2\x80\xa60CnCreates an iterator which uses a closure to determine if a \xe2\x80\xa611101EaFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.0EcFunction with signature <code>failed()</code> and selector <code>0xba414fa6</code>.00CbFilters the remappings vector by name and context.BoReturns the first config that matches the chain0CiReturns the index of the artifact with the given code \xe2\x80\xa6BiFinds the first match for the given link.Amwe keep this for the debugger000CmFinds the index of the first bit in the bit-slice cleared \xe2\x80\xa60CdGenerate a flamechart for a single test. Implies \xe2\x80\xa6CdGenerate a flamegraph for a single test. Implies \xe2\x80\xa6DbReturns the <code>SendTransactionKind</code> for the given addressCmResets the command to the default <code>forge</code> command.AjLinter (<code>lint</code>)AdSets the fork block.AnReturns an iterator over Forks000CkThe formula ID. Currently the only supported formula is \xe2\x80\xa6CmInitializes the frame for the given frame input. Frame is \xe2\x80\xa600000BcThe block height to start query at.ClCreates a coverage summary from a collection of coverage \xe2\x80\xa600CiConstruct a new integer from little-endian a array of \xe2\x80\xa60CdSee <code>Uint::from_limbs</code> for documentation.110DgCreates a new <code>Chain</code> by wrapping a <code>NamedChain</code>.EgExplicitly converts a <code>Range&lt;BitPtr&gt;</code> into a <code>BitPtrRange</code>.0C`Constructs a jump map from raw bytes and length.DdConstructs a <code>BitPtr</code> to the zeroth bit in the zeroth \xe2\x80\xa6DlConstructs a shared <code>&amp;BitSlice</code> reference over a slice of \xe2\x80\xa6CfConstructs a new bit-vector from a slice of memory \xe2\x80\xa6CnCreate a new byte array from the given slice <code>src</code>.DkCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.1154321011DhDecode a native endian UTF-16\xe2\x80\x93encoded vector <code>v</code> into a \xe2\x80\xa60CmGiven a parameter type, returns a strategy for generating \xe2\x80\xa6000DiIf <code>collect</code> is set, we store the collected values in this \xe2\x80\xa6000000AdReturns the gas difflGas reports.AmThe gas report, if requested.AcPrint a gas report.CiReturns the prompt based on the current status of the \xe2\x80\xa6BgReturns the signed value of the number.0ChReturns the first signer that can sign for the given \xe2\x80\xa6BdGetter for <code>states</code> field0CiRuns <code>git commit .</code> inside the project\xe2\x80\x99s dirBiWhether invariant test has errors or not.00CiReturns the number of hexadecimal digits in the given \xe2\x80\xa6AoCall trace address identifiers.CgThe contract identifier. This is only used in error \xe2\x80\xa60101CnReturns the opcode information for the given opcode. Check \xe2\x80\xa60BeThe file where to load the state from0BnInitializes settings we need to keep track of.DhInitializes a project with <code>forge init</code> at the given path \xe2\x80\xa6ClSets the key of the entry, and returns the entry\xe2\x80\x99s old \xe2\x80\xa60DiInserts a string slice into this <code>String</code> at byte position \xe2\x80\xa60Cdexecutes the transactions without writing to the \xe2\x80\xa6BgInspect the EVM and finalize the state.000oEVM inspectors.AjInspector implementations.AkModify the inspector stack.21020CmWhether any set bits in a source flags value are also set \xe2\x80\xa60AnReturns the inner bytes array.00000CcExtracts a basic subset of the config, used for \xe2\x80\xa6CbConverts a <code>String</code> into a byte vector.0EfConverts a <code>String</code> into an iterator over the <code>char</code>s of the \xe2\x80\xa60C`Returns the inner <code>BlockNumberOrTag</code>.CjRemoves the bit-array wrapper, returning the contained \xe2\x80\xa6ChRemoves the index wrapper, leaving the internal counter.ChRemoves the error wrapper, leaving the internal counter.CgRemoves the tail wrapper, leaving the internal counter.CkRemoves the position wrapper, leaving the internal counter.CfRemoves the one-hot selection wrapper, leaving the \xe2\x80\xa6CeRemoves the mask wrapper, leaving the internal value.CiExtract the value of an either over two equivalent types.AkReturns the backing buffer.BkUnseal the inner item, discarding the hash.BbReturns the inner ECDSA signature.AgReturns the inner Uint.4;:987653210CiConsumes the wrapper and returns the inner remappings \xe2\x80\xa6DaConsumes this <code>RwLock</code>, returning the underlying data.AlConvert to a array of limbs.000BiConsumes the arena and returns the nodes.00BdSplits the authorization into parts.AeDecompose into parts.10EgExplicitly converts a <code>BitPtrRange</code> into a <code>Range&lt;BitPtr&gt;</code>.0CjConverts the arguments into a <code>Retry</code> instance.CkReturns a mutable slice of the remaining entries in the \xe2\x80\xa6000CjFlattens the test outcome into a list of individual tests.AlTake ownership of the value.0BcInverts Int to Uint and vice-versa.BfEnable viaIR with minimum optimizationCnReturns true if the path exists on disk and is pointing at \xe2\x80\xa600000BnWhether the call end up with out of gas error.00000CfReturns true if the present value differs from the \xe2\x80\xa6000DhReturns <code>true</code> if the <code>needs_clear</code> flag is unset.BmIs account newly created in this transaction.0BdReturns whether this type is dynamicAlReturns true for post London0CeReturns true whether this tx is a EIP1559 transactionAlReturns true for post BerlinCeReturns true whether this tx is a EIP2930 transactionAkReturns true for post MergeAlReturns true for post CancunCeReturns true whether this tx is a EIP4844 transactionAlReturns true for post PragueCbReturns <code>true</code> if bytecode is EIP-7702.0CfReturns true if the chain contains Elastic Network \xe2\x80\xa60BlReturns true if logging is currently enabledBmReturns <code>true</code> if stderr is a tty.BmReturns <code>true</code> if the test failed.CgReturns if the status of the transaction is 0 (failure)DnReturns <code>true</code> if this function is a <code>fixture</code> function.0BeReturns true if the access is allowed0BiReturns true if the authority is invalid.0CfReturns <code>true</code> if the loop should continue.0ClReturns <code>true</code> if the current network is Odyssey.000BeCheck if the bytecode type is runtimeCbReturns <code>true</code> if the test was skipped.BoReturns if transaction execution is successful.CiReturns true if the transaction returned successfully \xe2\x80\xa6DaReturns <code>true</code> if a test can be considered successful.CeReturns <code>true</code> if the test was successful.3211BgReturns whether the chain is a testnet.BgIf account status is marked as touched.0CkReturns <code>true</code> if this function kind is unknown.BlYield a set of contained named flags values.0CnEnumerates the index of each bit in a bit-slice cleared to \xe2\x80\xa60DhReturns an iterator over all JSON files under the <code>root</code> dir.BdReturns JumpTable of analyzed bytes.0B`JWT Secret for the RPC endpoint.0CaThe duration how long to keep alive stale filtersCnBuffer for keys prior to execution, i.e. \xe2\x80\x9810\xe2\x80\x99 + \xe2\x80\x98k\xe2\x80\x99\xe2\x80\xa6ChGet the last entry in the map for in-place manipulation.0ChPerforms the left shift operation (&lt;&lt;) on a numberCbThe number of executable lines in the source file.00ClLoads a storage slot from an address. Container type for \xe2\x80\xa600000CfInitialize the chain from a previously saved state \xe2\x80\xa6CdApply SerializableState data to the backend storage.CiDeserialize and add all chain data to the backend storageCkLoads a value out of the memory system according to the \xe2\x80\xa60DkFetches the value stored through <code>self</code> and masks away extra \xe2\x80\xa6110DjFunction with signature <code>log(uint256,address,address,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(address,bool,uint256,string)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes25)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(bool,bool,uint256,uint256)</code> and \xe2\x80\xa600EeFunction with signature <code>log(bytes)</code> and selector <code>0x0be77f56</code>.00DjFunction with signature <code>log(bool,address,address,uint256)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DhFunction with signature <code>log(string,address,uint256)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,string,address,address)</code>\xe2\x80\xa600DiFunction with signature <code>log(address,string,address,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,address,address,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(address,string,uint256,bool)</code> \xe2\x80\xa600555DkFunction with signature <code>log(string,string,uint256,address)</code> \xe2\x80\xa600DcFunction with signature <code>log(bool,bool,address)</code> and \xe2\x80\xa600DeFunction with signature <code>log(bool,string,uint256)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,string,address,string)</code> \xe2\x80\xa600DcFunction with signature <code>log(bool,bool,uint256)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,address,uint256,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,address,uint256)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,string,uint256,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,string,string,uint256)</code> \xe2\x80\xa600>>>DjFunction with signature <code>log(uint256,uint256,address,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,string,bool,uint256)</code> and \xe2\x80\xa600DkFunction with signature <code>log(bool,string,string,string)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,address,uint256)</code> and \xe2\x80\xa600DcFunction with signature <code>log(bool,address,bool)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DiFunction with signature <code>log(address,bool,string,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(bool,string,uint256,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,uint256,address,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,address,bool,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,uint256,address)</code> and \xe2\x80\xa600DgFunction with signature <code>log(uint256,bool)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(bool,address,address,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,address,string)</code>\xe2\x80\xa600DkFunction with signature <code>log(address,string,uint256,uint256)</code>\xe2\x80\xa600DiFunction with signature <code>log(bool,string,string,bool)</code> and \xe2\x80\xa600DfFunction with signature <code>log(uint256,bool,uint256)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,string,bool,address)</code> \xe2\x80\xa600DcFunction with signature <code>log(uint256,bool,bool)</code> and \xe2\x80\xa600===DeFunction with signature <code>log(address,bool,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(uint256,string,string,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,address,string,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,address,bool,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,uint256,bool,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(string,address,string,string)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DhFunction with signature <code>log(string,bool,string,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,bool,string)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,address,address)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes32)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,string,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,string,uint256,uint256)</code> \xe2\x80\xa600DdFunction with signature <code>log(bool,bool)</code> and selector \xe2\x80\xa600DgFunction with signature <code>log(bool,bool,bool,string)</code> and \xe2\x80\xa600DiFunction with signature <code>log(bool,string,address,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,string,string,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,bool,string,uint256)</code> \xe2\x80\xa600DbFunction with signature <code>log(address)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(address,address,bool,bool)</code> and \xe2\x80\xa600DfFunction with signature <code>log(string,string,string)</code> and \xe2\x80\xa600EhFunction with signature <code>log(int256)</code> and selector <code>0x2d5b6cb9</code>\xe2\x80\xa600EhFunction with signature <code>log(bytes3)</code> and selector <code>0x2d834926</code>\xe2\x80\xa600DhFunction with signature <code>log(string,bool,address,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(address,bool,address,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,address)</code> and selector \xe2\x80\xa600EdFunction with signature <code>log(bool)</code> and selector <code>0x32458eed</code>.00DbFunction with signature <code>log(bytes17)</code> and selector \xe2\x80\xa600DiFunction with signature <code>log(string,bool,address,address)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DfFunction with signature <code>log(uint256,bool,address)</code> and \xe2\x80\xa600DjFunction with signature <code>log(string,uint256,bool,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(address,string,string,bool)</code> \xe2\x80\xa600DfFunction with signature <code>log(bool,uint256,uint256)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,uint256,uint256)</code> \xe2\x80\xa600DhFunction with signature <code>log(uint256,string,uint256)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,bool,uint256,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,address,bool,uint256)</code> \xe2\x80\xa600DgFunction with signature <code>log(bool,uint256)</code> and selector \xe2\x80\xa600DbFunction with signature <code>log(bytes27)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,uint256,address)</code>\xe2\x80\xa600DeFunction with signature <code>log(bool,bool,bool,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,bool,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,int256)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,string,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,address,bool,uint256)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,bool,string,bool)</code> and \xe2\x80\xa600BbLogs the status of the inspectors.00DeEvent with signature <code>log_string(string)</code> and selector \xe2\x80\xa600CaCompute the logs bloom filter for the given logs.0CeReturns the lowest amount of gas spent on a fuzz case00ChFormat a type that implements std::fmt::Display as a \xe2\x80\xa6DfMaps a <code>DBError</code> to a new error type using the provided \xe2\x80\xa60GbApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants \xe2\x80\xa60ChMaps the result variant using the provided function, \xe2\x80\xa60AlMarks the account as touched0BhReturns the median gas of all test cases00000CkMemory expansion cost calculation for a given number of \xe2\x80\xa60AgReturns the memory gas.0B`Mines a new block and stores it.BiReturns the write lock of the mining modeAkFunction with signature \xe2\x80\xa6BcModifies the context configuration.0ClMoves the position of a key-value pair from one index to \xe2\x80\xa6CnMoves the position of a value from one index to another by \xe2\x80\xa6CnMoves the position of the entry to a new index by shifting \xe2\x80\xa60021000CaThe Solidity function state mutability attribute.000AhReturns the opcode name.0BiReturns the same as <code>chain_id</code>CkThe potential new balance of the accessed account. That \xe2\x80\xa600000Bgincoming notifications about new blocksC`The address to assign to <code>msg.sender</code>B`Creates a new create frame data.0ChCreates a filter object, based on filter options, to \xe2\x80\xa6BkCreates a new legacy <code>Bytecode</code>.0CaCreates new account that is loaded from database.0BoThe address to assign to <code>tx.origin</code>BaAddress of the transaction originCfTries to create a new instance by detecting inline \xe2\x80\xa6CnCreate new return action with the given result, output and \xe2\x80\xa60BoCreates a new signed transaction for broadcast.CcCreates a new EIP-3155 tracer with a stdout output.0DdCreates a new uninitialized <code>OutFrame</code> from a mutable \xe2\x80\xa60CfDo not restart the command while it\xe2\x80\x99s still running.BmThe previous balance of the accessed account.00000BjReturns the next account status on change.0BlReturns the next account status on creation.0ElReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</codelReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</codegInvoked for an ethereum pubsub rpc callBeInvoked when the request was received00CmInserts a default-constructed value in the entry if it is \xe2\x80\xa6ClEnsures a value is in the entry by inserting the default \xe2\x80\xa610BePath to where bindings will be storedCcReturns whether the dependency has been overridden.CnAddress with storage slots that should be overwritten even \xe2\x80\xa6CgParse the doc comments from the current start location.DnParses a <code>T</code> from a string using <code>serde_json::from_str</code>.BhShort-hand for <code>parse(true)</code>.BeParse from file but only if it existsCkParse a TOML string and return the value at the given path.CnParses a string slice into an unsigned integer. If base is \xe2\x80\xa6BdConfigures the project\xe2\x80\x99s pathstyleCjRemoves the topmost element from the stack and returns it.0B`Returns reference of precompile.0BfPreprocess the collection of documents0CnThe output of the randomness beacon provided by the beacon \xe2\x80\xa60000CgBlock prevrandao, calls ContextTr::block().prevrandao()01111100ChEnable printing of <code>console.log</code> invocations.AcPrints all the logsBcCalled after the inspecting the evm2AkThe wallet\xe2\x80\x99s private key.00000Ancurrently in progress requestsChPrompts the user for a string value in the terminal. \xe2\x80\xa600000C`Removes the transactions that provide the markerBiThe wallet\xe2\x80\x99s public key <code>X</code>.00000BiThe wallet\xe2\x80\x99s public key <code>Y</code>.00000BhAdds a custom error to use for decoding.BcAdds a single error to the decoder.10110BcAdds a single event to the decoder.00CmPushes an arbitrary length slice of bytes onto the stack, \xe2\x80\xa60BeGenerates a new random hex identifierDjHelper to generate a random <code>int</code> value (with given bits if \xe2\x80\xa6ClIterates over all tail indices at and after an inclusive \xe2\x80\xa60BdReads bytes from <code>stdin</code>.CdReads next <code>len</code> bytes from the bytecode.0C`Returns a new read-write permission for the pathCm\xe2\x9a\xa0\xef\xb8\x8f Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - \xe2\x80\xa60DjRecords all storage reads and writes. Use <code>accesses</code> to get \xe2\x80\xa600000Ch\xe2\x9a\xa0\xef\xb8\x8f Compute $\\mod{\\mathtt{self}}_{\\mathtt{modulus}}$.0CaCalculates the least nonnegative remainder of \xe2\x80\xa60AkThe project\xe2\x80\x99s remappings.0Bl<code>Remappings</code> to use for this repo0AeThis contains either:kRemappings.10DhReturns the complementary error variant for <code>fs::remove_dir</code>.BlWrapper for <code>std::fs::remove_dir</code>CkReplays a call sequence for collecting logs and traces. \xe2\x80\xa6000B`Whether to report any contracts.BeContracts to generate the report for.AcThe repository url.00B`Resets the fork to a fresh stateBlThe data to use to match encountered reverts00000DcFunction with signature <code>ripemd(bytes)</code> and selector \xe2\x80\xa6AoLength of RLP RS field encoding0DaSets <code>block.height</code>. Container type for the return \xe2\x80\xa600000CjReturns the RPC url for the given alias. Function with \xe2\x80\xa600000CjIterates over mutable subslices separated by bits that \xe2\x80\xa60AcExecutes the scriptBnExplicitly generate bindings for all contractsCgSets environment variables. Function with signature \xe2\x80\xa600000CjSet return action and set instruction pointer to null. \xe2\x80\xa60AcSets return buffer.0AgSets the caller address000AiSet the Chisel inspector.00BePopulate the transaction as CREATE txAiSet the fuzzer inspector.00CiSet a refund value. This overrides the current refund \xe2\x80\xa60EdAll <code>self.next()</code> calls will now pop <code>self.last_sequence</code>. \xe2\x80\xa600BnSets status for the current sequence progress.BfSets the writer to use for the output.0CmPrints a raw formatted message to stdout, with a trailing \xe2\x80\xa6DcFunction with signature <code>sha256(bytes)</code> and selector \xe2\x80\xa6BkComputes the SHA-256 hash of the input data0CnShifts the contents of a bit-slice \xe2\x80\x9cleft\xe2\x80\x9d (towards the \xe2\x80\xa60CmRemoves and returns the value in the set, if any, that is \xe2\x80\xa60DbSigns data with a <code>Wallet</code>. Function with signature \xe2\x80\xa600000EeSigns <code>digest</code> with <code>privateKey</code> using the secp256k1 curve. \xe2\x80\xa600000DfSigns <code>digest</code> with signer provided to script using the \xe2\x80\xa600000000000AiThe signatures to upload.DcImplements the <code>SIGNEXTEND</code> opcode as defined in the \xe2\x80\xa60ClMarks a test as skipped. Must be called at the top level \xe2\x80\xa600000ClMarks a test as skipped with a reason. Must be called at \xe2\x80\xa600000CcSkips running forge build before generating bindingBk<code>SLOAD</code> opcode cost calculation.0DeExtension traits and modules to the <code>solang_parser</code> crate.CmSorts an array in ascending order. Container type for the \xe2\x80\xa600000CiSource map, used for determining contract item locations.BgReturns the <code>SessionSource</code>.CnSplits the bit-slice into a reference to its last bit, and \xe2\x80\xa6CnReturns the last key-value pair and the rest of the slice, \xe2\x80\xa6DjReturns the last value and the rest of the slice, or <code>None</code> \xe2\x80\xa6210CjIterates over mutable subslices separated by bits that \xe2\x80\xa60BiInitializes the stack with a single item.0AhState changes, per slot.BiBuilds state root from the given accountsAnReturns the current state rootBoThe size of the plain state in the bundle state00000CgExecutes the instruction at the current instruction \xe2\x80\xa60C`Returns content of the storage at given address.DfReturns the <code>StructId</code>s of every user-defined struct in \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa60CjComputes <code>lhs -= a * b</code> and returns the borrow.0BlInitializes a tracing Subscriber for loggingClSurrounds a callback with parentheses. The callback will \xe2\x80\xa6CgThe proptest error occurred as a result of a test case.DeReturns an iterator over the base <code>base</code> digits of the \xe2\x80\xa6000BcConverts hexdata into bytes32 valueCeReturns the populated Figment using the requested \xe2\x80\xa6CkReturns the SuccessReason value if this a successful result0ChConverts a number into uint256 hex string with 0x prefixAkPeeks the top of the stack.0CiGet the topic list, mutably. This gives access to the \xe2\x80\xa60B`Unique list of rpc urls present.ChSums up all the durations of all individual test suites.CmSums up all the durations of all individual tests in this \xe2\x80\xa6CgSet whether to enable the tracer. Revert diagnostic \xe2\x80\xa6CaWhether to enable tracing and revert diagnostics.10010CeGets a mutable reference to the recorded call traces.000ClTransition to other state while preserving invariance of \xe2\x80\xa60DkTrims leading and trailing whitespace from the given <code>string</code>\xe2\x80\xa600000CmPerforms a foreign function call via terminal and returns \xe2\x80\xa600000AnTry database commit interface.BjAttempt to commit changes to the database.001000CnTries to insert a key-value pair into the map, and returns \xe2\x80\xa60CkTries to create a new fixed byte array with the default \xe2\x80\xa6DbTries to create a new <code>FixedBytes</code> with the default \xe2\x80\xa6111011AkThe unresolved input string0DnReads stdin into a String and parses it as <code>Vec&lt;T&gt;</code> using \xe2\x80\xa6BdUpdate the fork\xe2\x80\x99s block entire envAhUpdates the provider URLAfSets the color choice.00CaTransaction and environment validation utilities.0CkAn iterator visiting all values mutably in arbitrary order.ClReturn an iterator over mutable references to the values \xe2\x80\xa6CiReturn an iterator over mutable references to the the \xe2\x80\xa6210CgThe Solidity function visibility attribute. This is \xe2\x80\xa6000CnDon\xe2\x80\x99t write semicolon at the end because expressions can \xe2\x80\xa6CmVisit the list of comma separated items. If the prefix is \xe2\x80\xa6DdSets <code>block.timestamp</code>. Container type for the return \xe2\x80\xa600000DeExecutes a <code>Watchexec</code> that listens for changes in the \xe2\x80\xa6BlCreates a new context with a new block type.CnSets the BlockEnv of this instance using the provided Chain\xe2\x80\xa61000EfConstructs a <code>Config</code> only differing from the <code>default()</code> in \xe2\x80\xa600BlCreates a new context with a new chain type.0BjSets the chain value and consumes the typeCdCreates a new context with a new local context type.AjSets the local identifier.100ClCreates a new <code>AccountInfo</code> with the given nonce.0DjMoves out of references, constructs an <code>InspectorStack</code> and \xe2\x80\xa6CgThe token that gets written on the newline when the \xe2\x80\xa6AlBit-wise <code>memset</code>0CkWrites bold text to the buffer formatted as Markdown::Bold.BkWrites a solidity code block to the buffer.CfWrites link to the buffer formatted as Markdown::Link.AdWrite built-in unit.C`Returns a mutable reference to the inner writer.00EhAll implementors are required to have <code>Self</code> and <code>Self::Alias</code> \xe2\x80\xa6000CjAccount information that contains balance, nonce, code \xe2\x80\xa60BmResult of the account load from Journal state0AhPrints the zero address.BiThe result of <code>AsDoc::as_doc</code>.0CaThe <code>0x4A</code> (\xe2\x80\x9cBLOBBASEFEE\xe2\x80\x9d) opcode.000AbBalance diff info.DdA subset of the foundry <code>Config</code> used to initialize a \xe2\x80\xa6CmCustom benchmarking DB that only has account info for the \xe2\x80\xa6000oBit Index Error0CbErrors produced by invalid bit-pointer components.0AaBit-Pointer Range000AeRegister Descriptions0AlGet the latest block number.oA block number.000Da<code>/</code> in block comment start <code>&quot;/*&quot;</code>Da<code>*</code> in block comment start <code>&quot;/*&quot;</code>CmMap keyed by breakpoints char to their location (contract \xe2\x80\xa6CaBundle state contain only values that got changed00000A`Chisel characterCfGas cost per byte for code deposit during contract \xe2\x80\xa60CmCall details of a transaction generated to fuzz invariant \xe2\x80\xa600CkRepresents the outcome of a call operation in a virtual \xe2\x80\xa6000AaCall is too deep.AlExceeded maximum call depth.10CiReturned by a single fuzz in the case of a successful run000BjContainer type for all the state variablesAgAn inspector for Chisel000AoShared Bit-Slice Exact Chunking0AmA category for ChiselCommandsBiWhether messages should use color output.AeThe type of a CommentCfThe collection of references to natspec Comment items.0BbGenerate shell completions script.00CmFetches the content of the transaction pool filtered by a \xe2\x80\xa6AiHolds Corpus information.BlCLI arguments for <code>cast create2</code>.lCreate Frame0AgTracks the created ForkCjAn extension trait that allows us to easily extend the \xe2\x80\xa6000CnHelper trait that combines DatabaseRef with Debug. This is \xe2\x80\xa6AgEVM database interface.00000AiDecode custom error data.AbDecode event data.AmThe deployments preprocessor.CnThe deployments output. The deployment address of the item \xe2\x80\xa601BgDisables formatting on the current line0CmDisassembles a hex-encoded bytecode into a human-readable \xe2\x80\xa6CaThe <code>0x3C</code> (\xe2\x80\x9cEXTCODECOPY\xe2\x80\x9d) opcode.000CaThe <code>0x3F</code> (\xe2\x80\x9cEXTCODEHASH\xe2\x80\x9d) opcode.000CaThe <code>0x3B</code> (\xe2\x80\x9cEXTCODESIZE\xe2\x80\x9d) opcode.000BbA variant of an <code>Enum</code>.000CmCheatcodes that interact with the program\xe2\x80\x99s environment \xe2\x80\xa6000CkReturns the account and storage values of the specified \xe2\x80\xa6CjSnapshot the state of the blockchain at the current block.Bb<code>%e</code>, <code>%18e</code>0CmExtended bytecode structure that wraps base bytecode with \xe2\x80\xa6000B`The account\xe2\x80\x99s code was copied.00000BbThe account\xe2\x80\x99s codehash was read.00000BbThe account\xe2\x80\x99s codesize was read.00000mFile IO ErrorBmCLI arguments for <code>forge flatten</code>.CfFormat a number from smallest unit to decimal with \xe2\x80\xa6lFrame ResultCjThe result type returned when a frame completes execution.0100DjVarious error variants for <code>fs</code> operations that serve as an \xe2\x80\xa60AhOutcome of a single fuzz000BlContainer type for all successful test cases00AiHolds gas metering state.CgReturns true if automatic mining is enabled, and false.EhA <code>globset::Glob</code> that creates its <code>globset::GlobMatcher</code> when \xe2\x80\xa6AaGray Glacier: \xe2\x80\xa6BdHash a message according to EIP-191.o<code>%x</code>0CiContainer for all the <code>IERC20</code> function calls.ClAn indent group. The group may optionally skip the first \xe2\x80\xa6oStyle of indent0BmCLI arguments for <code>forge inspect</code>.BmCLI arguments for <code>forge install</code>.AnEVM opcode function signature.0AeThe instruction type.110ClRepresents a single instruction consisting of the opcode \xe2\x80\xa6CkValue tree for signed ints (up to int256). The strategy \xe2\x80\xa6000CkMain interpreter structure that contains all components \xe2\x80\xa6000BoTrait for converting types into Address values.0CmTrait for an object that can be converted into a log data \xe2\x80\xa60CkThe requested number base <code>.0</code> is less than two.0AiInvalid jump destination.CmInvalid jump destination. Dynamic jumps points to invalid \xe2\x80\xa610BfThe provided units are not recognized.0AkAn IPC connection for anvilCmState after linking, contains the linked build data along \xe2\x80\xa6BeErrors that can occur during linking.DiRepresents a numeric <code>ForkId</code> valid only for the existence \xe2\x80\xa6000BeTrait controls execution of the loop.0CgTrait for building mainnet EVM instances from contexts.000CiTrait used to initialize Context with default mainnet \xe2\x80\xa6000BbTried to expand past memory limit.0AaMuir Glacier: \xe2\x80\xa6AoContainer for multiple wallets.CdOpt-in mutable access to <code>IndexMap</code> keys.0BhGenerates a random BIP39 mnemonic phraseBmNo local TOML file found, with location tried0BmThe type that drives the blockchain\xe2\x80\x99s stateCjIncrement nonce Action: Increment nonce by one Revert: \xe2\x80\xa60000000Clreturned if the nonce of a transaction is lower than the \xe2\x80\xa6AaNonce is too low.0CjBefore Spurious Dragon hardfork there was a difference \xe2\x80\xa6000AmMaps each opcode to its info.0BaNamed parameter of an EVM opcode.BhInvalid memory or storage offset for \xe2\x80\xa6BaInvalid memory or storage offset.10A`An owned signer.CnThe address of precompile 3, which is handled specially in \xe2\x80\xa6000AePrecompile addresses.BjWrite function parameters multiline first.0BfOverflow when parsing a signed number.0AoA wrapper type around pt token.0AaThe parser error.0CgThe type containing the available precompiled contracts0CfPrecompiles contain map of precompile addresses to \xe2\x80\xa6110CnEVM precompiles interface. For illustration purposes only, \xe2\x80\xa6BaRepresents the outcome of a pruneBnThe standard request timeout for API requests.Dm<code>RandomState</code> is the default state for <code>HashMap</code> types.EaA <code>BuildHasher</code> for <code>fast::FoldHasher</code> that is randomly \xe2\x80\xa6EdA <code>BuildHasher</code> for <code>quality::FoldHasher</code> that is randomly \xe2\x80\xa6210ChRaw entry for an existing key-value pair or a vacant \xe2\x80\xa60CfCLI arguments for <code>forge compiler resolve</code>.AfPerform an ENS lookup.BbRpc endpoint configuration variant0BfResponse of a <em>single</em> rpc callBbRuntime flags implementation type.CjRuntime flags that control interpreter execution behavior.1101CaThe <code>0x47</code> (\xe2\x80\x9cSELFBALANCE\xe2\x80\x9d) opcode.000AkEVM interpreter stack limit0AlEVM interpreter stack limit.01100CiScript group execution context (dry run, broadcast or \xe2\x80\xa600000000Da<code>HashMap</code> optimized for hashing <code>Selector</code>.0Da<code>HashSet</code> optimized for hashing <code>Selector</code>.0CdThrown if the sender of a transaction is a contract.B`Used for server specific errors.CnEnables or disables, based on the single boolean argument, \xe2\x80\xa6AiSets the coinbase addressBjAvailable subcommands for Soldeer, see \xe2\x80\xa6BkA list of versioned sources and their ASTs.00DfWrapper around a list of <code>Line</code>s that prepends the line \xe2\x80\xa6BlCLI arguments for <code>cast storage</code>.CkA type that can fetch data related to the ethereum storage.BdGet the storage root for an account.CkThis type keeps track of the current value of a storage \xe2\x80\xa6000AlA <code>Struct</code> field.000CkA set of test results for a single test suite, which is \xe2\x80\xa6CdA helper struct for managing additional tokio tasks.CiA simple wrapper around a Command with some conveniences.ClContains additional, test specific resources that should \xe2\x80\xa6BdThe aggregated result of a test run.Dh<code>TestProject</code> represents a temporary project to run tests \xe2\x80\xa6AbManages block timeCnError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.0CnA slimmed down return from the executor used for returning \xe2\x80\xa60CdFormats call traces to an <code>Write</code> writer.00AnTransaction hash to fork from.0CkMain Transaction trait that abstracts and specifies all \xe2\x80\xa6AlTransaction validation error111011BoAn action which may be committed to a FormatterDe\xe2\x9a\xa0\xef\xb8\x8f Workaround for Rust issue #50133. Use <code>TryFrom</code> \xe2\x80\xa60A`Unreachable codeCcUpdates the block number and timestamp of the fork.DkA view into a vacant entry in a <code>HashMap</code>. It is part of the \xe2\x80\xa6DiA view into a vacant entry in an <code>IndexMap</code>. It is part of \xe2\x80\xa6DkA view into a vacant entry in a <code>HashSet</code>. It is part of the \xe2\x80\xa6210BgCheck verification status on Etherscan.CfGenerates an access list for the specified transactionB`Access list for the transaction.CmA list of addresses and storage keys that the transaction \xe2\x80\xa6AcSet the access list122CjReturns list of addresses and storage keys used by the \xe2\x80\xa6AnCurrent EIP-2930 access lists.043234410000AeEIP-2930 access list.021CfReturns the currently active <code>Fork</code>, if any000DkAdds an address to the access list and returns <code>true</code> if the \xe2\x80\xa60AkAdd anchors to this report.00CdAdd a preprocessor result to inner document context.DeProcesses data from a <code>HitMap</code> and sets hit counts for \xe2\x80\xa600Cjadditional solc allow paths for <code>--allow-paths</code>CkReorg the chain to a specific depth and mine new blocks \xe2\x80\xa6CjReset the fork to a fresh forked state, and optionally \xe2\x80\xa6AjThe Etherscan API version.0BeEtherscan API Version. Defaults to v2AfEtherscan API Version.BbDouble precision binary logarithm.0CaConstruct from double precision binary logarithm.0AhConstructor args length.BhThe artifact ID of the contract, if any.ChThe identifier of the artifact/contract in the form: \xe2\x80\xa611BnExplicitly views the bit-array as a bit-slice.CcViews the remaining unyielded bits in the iterator.BhViews the currently unyielded bit-slice.CgViews the remaining bit-slice that has not yet been \xe2\x80\xa6C`Views the unyielded bits remaining in the drain.BoExplicitly views the bit-vector as a bit-slice.CbViews the remaining unyielded bits as a bit-slice.BlExplicitly views the bit-box as a bit-slice.76543210CgReturn inner element if it matches $variant. If the \xe2\x80\xa60ChReturns the function selector if it is a function OR \xe2\x80\xa6CeAccess the underlying store as a little-endian bytes.CeSee <code>Uint::as_le_bytes</code> for documentation.10CkAccess the underlying store as a little-endian slice of \xe2\x80\xa60EaViews <code>self</code> as a mutable bit-slice region with the <code>O</code> \xe2\x80\xa6000BnReturns a mutable reference to the inner Uint.06DkRuns the command and asserts that the exit code is <code>expected</code>\xe2\x80\xa6CgRuns the command with a temporary file argument and \xe2\x80\xa6BoReturns a mutable reference to the EVM backend.00BjReturns a mutable instance of the Backend.AnReturns the base goerli chain.ChBeneficiary (Coinbase, miner) is a address that have \xe2\x80\xa6CjBeneficiary (Coinbase or miner) is a address that have \xe2\x80\xa6011CiBlock beneficiary, calls ContextTr::block().beneficiary()02112200BlReturns the current best number of the chainAmThe current best block numberAkFunction with signature \xe2\x80\xa6ClReturns number of blank lines in source between two byte \xe2\x80\xa6BaThe list of blob versioned hashesAcSet the blob hashes1101DbReturns <code>BlobParams</code> corresponding to the current spec.Bdblob parameters for the current specBkThe block number the transaction landed in.AaThe block number.1010101010DdAllocates memory on the heap then places <code>x</code> into it, \xe2\x80\xa60BeThe number of branches that were hit.00AhBreakpoints char pc map.0CnBreakpoints for debugger. Correspond to the same fuzz case \xe2\x80\xa6DbBreakpoints supplied by the <code>breakpoint</code> cheatcode. \xe2\x80\xa60Afpc breakpoint char map1123311B`Map of the debugger breakpoints.BfSets the breakpoints for the debugger.1555534EoReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</codeoReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</codeeOptional browser URL.AnReturns the bsc mainnet chain.AnReturns the bsc testnet chain.AhReturns raw bytes slice.0CfHandles cleanup when an error occurs during execution.000ClSets <code>block.chainid</code>. Function with signature \xe2\x80\xa600000EhChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>\xe2\x80\xa60EcComputes <code>self + rhs</code>, returning <code>None</code> if overflow occurred.DiChecked integer addition. Computes <code>self + rhs</code>, returning \xe2\x80\xa610EgComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.DiChecked integer division. Computes <code>self / rhs</code>, returning \xe2\x80\xa610CbReturns the logarithm of the number, rounded down.0EcComputes <code>self * rhs</code>, returning <code>None</code> if overflow occurred.DeChecked integer multiplication. Computes <code>self * rhs</code>, \xe2\x80\xa610EgComputes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.EaChecked negation. Computes <code>-self</code>, returning <code>None</code> if \xe2\x80\xa610BmRaises self to the power of <code>exp</code>.DjChecked exponentiation. Computes <code>self.pow(exp)</code>, returning \xe2\x80\xa610EgComputes <code>self % rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.DjChecked integer remainder. Computes <code>self % rhs</code>, returning \xe2\x80\xa610BlChecked left shift by <code>rhs</code> bits.ElChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> \xe2\x80\xa6CeSee <code>Uint::checked_shl</code> for documentation.210BmChecked right shift by <code>rhs</code> bits.EmChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> \xe2\x80\xa6CeSee <code>Uint::checked_shr</code> for documentation.210EcComputes <code>self - rhs</code>, returning <code>None</code> if overflow occurred.DbChecked integer subtraction. Computes <code>self - rhs</code>, \xe2\x80\xa610B`Get the name/rev to checkout at.AjClears the cache directoryBdRemoves this project\xe2\x80\x99s cache file.DhCreates a new instance with a <code>BackendDatabase::InMemory</code> \xe2\x80\xa6000AeClone the inner item.0CcThe maximum amount of requests to send concurrentlyAhPath to the config file.0AmConnects to an IPC transport.BnSimulates <code>console.log</code> invocation.000CnReturns the <code>Constructor</code> of this contract, if any.000000000AgHIR Id of the contract.CkCopies a span of bits to another location in the bit-slice.0CcWhether corpus to use gzip file compression and \xe2\x80\xa60DhCounts the number of bits cleared to <code>0</code> in the bit-slice \xe2\x80\xa6ClReturns the number of zeros in the binary representation \xe2\x80\xa60100DfReturns the complementary error variant for <code>File::create</code>.BfWrapper for <code>File::create</code>.DiCreates a file with contents <code>contents</code> in the test project\xe2\x80\xa6AgReturns a fork backend.CbCreates a new fork but does <em>not</em> select it01AbCreates a new fork121AcCreates a new fork.3BkSet the working directory for this command.CgEstimates the data availability size of a block for \xe2\x80\xa6BmDebug traces returned from the EVM execution.0B`Returns the current debug steps.CnThe Solidity function declaration, including full type and \xe2\x80\xa6ChThe Solidity error declaration, including full type, \xe2\x80\xa6ChThe Solidity event declaration, including full type, \xe2\x80\xa6210210210ClDecodes a skip reason from a string that was obtained by \xe2\x80\xa6000AoDeduplicates a chain of errors.CbCreate a new interpreter with default extended \xe2\x80\xa60CjHelper function to deploy contract from artifact code. \xe2\x80\xa6EeThe relative path to the <code>hardhat-deploy</code> or <code>forge-deploy</code> \xe2\x80\xa6AjThe deployments directory.0CnThe description of the function. This is a markdown string \xe2\x80\xa6CkThe description of the error. This is a markdown string \xe2\x80\xa6CkThe description of the event. This is a markdown string \xe2\x80\xa6CjThe description of the enum. This is a markdown string \xe2\x80\xa6CmThe description of the variant. This is a markdown string \xe2\x80\xa6ClThe description of the struct. This is a markdown string \xe2\x80\xa6CkThe description of the field. This is a markdown string \xe2\x80\xa6654321065432106543210CoDeserializes an <code>IndexMap</code> from an ordered sequence.0ClSigner accounts that can sign messages/transactions from \xe2\x80\xa6CmDisassembles hex encoded bytecode into individual / human \xe2\x80\xa6BnDisassemble bytecodes into individual opcodes.AfDisassemble bytecodes.BhTODO: This implementation is off by one.0DgExecutes the <code>evm_mine</code> and returns the number of blocks \xe2\x80\xa6CcContainer type for the return parameters of the \xe2\x80\xa60CnThe weight for edge cases (+/- 3 around 0 and max possible \xe2\x80\xa6000BoConvert the contained value into <code>T</code>0DjLike <code>either</code>, but provide some context to whichever of the \xe2\x80\xa60CfReturns a new config which does not initialize any \xe2\x80\xa6CmCompute the length of this value in bytes when encoded as \xe2\x80\xa60BgEnsures that an appropriate fork exists000CgEnsures that the configured version is installed if \xe2\x80\xa6EgGets the environment variable <code>name</code> and parses it as <code>bool</code>. \xe2\x80\xa600000EhGets the environment variable <code>name</code> and parses it as <code>uint256</code>\xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>int256</code>.00000EhGets the environment variable <code>name</code> and parses it as <code>address</code>\xe2\x80\xa600000EhGets the environment variable <code>name</code> and parses it as <code>bytes32</code>\xe2\x80\xa600000EeGets the environment variable <code>name</code> and parses it as <code>string</code>.00000EhGets the environment variable <code>name</code> and parses it as <code>bytes</code>. \xe2\x80\xa600000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000000000000000CjInitializes a REVM block environment based on a forked \xe2\x80\xa60000C`JWT secret that should be used for any rpc callsCkurl of the rpc server that should be used for any rpc calls00CiReturns the SpecId derived from the configured EvmVersionBjReturns the SpecId derived from EvmVersionDcThe EVM Version to use. Can only be used with <code>--trace</code>.AgThe EVM version to use.BfMax supported EVM version of compiler.1AgThe target EVM version.0Abevm version to useCmObtains FoundryEvm instance and executes the given CREATE \xe2\x80\xa6000AfThe status of the callAgThe status of the call.10100DcHandles expected calls specified by the <code>expectCall</code> \xe2\x80\xa6AfReturns the left value0BgImplements the EXTCODECOPY instruction.0AlEIP-1052: EXTCODEHASH opcode0BgImplements the EXTCODESIZE instruction.0FoBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s0EaFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.0CdReturns the fee history  <code>eth_feeHistory</code>CiIntroduced in EIP-1559 for getting information on the \xe2\x80\xa6BoMaintenance task for fee history related tasks.C`Returns all the logs that match the given filterDiIf the code at <code>address</code> is a proxy, recurse until we find \xe2\x80\xa6CiGet the first entry in the map for in-place manipulation.0CeConverts a sequence of string literals containing \xe2\x80\xa6000BgFlushes the cache to disk if configured0BlFlushes the DB to disk if caching is enabled010101BhCreates a new figment warnings provider.CfEnsures that the live region of the bit-vector\xe2\x80\x99s \xe2\x80\xa6CnEnsures that the allocated buffer has no dead bits between \xe2\x80\xa610Ckpins the block number or transaction hash for the state \xe2\x80\xa60kfoundry-cliDeReturns the path to foundry\xe2\x80\x99s config dir: <code>~/.foundry/</code>.kfoundry-evmCjReturns a reference to the frame input. Frame input is \xe2\x80\xa6BeData needed as input for Interpreter.10BcFrame that is going to be executed.BoReturns a mutable reference to the frame stack.1011101011CkHandles the start of a frame by calling the appropriate \xe2\x80\xa60CbConverts a bit-pointer into a proxy bit-reference.0DcCreates a new <code>SignaturesIdentifier</code> from the global \xe2\x80\xa600CeCreates a new <code>Bytes</code> from a static slice.0ClConverts a string to an <code>EVMError::Custom</code> error.0CaNew corpus with given call sequence and new uuid.CeReturns the result for a fuzzed test. Merges fuzz \xe2\x80\xa6AkThe amount of gas refunded.00000BlGas usage (gas_used, call_stipend) per cases00DbSame as <code>gas!</code>, but with <code>gas</code> as an option.0BeGas records for the active snapshots.Bblist of contracts to report gas ofCeReturns a list of GCP signers if the GCP flag is set.CnGets the creation bytecode from an artifact file. Takes in \xe2\x80\xa600000CfReturns the <code>AccountInfo</code> from the databaseAmReturns the ethereum account.BbReturns the balance of the addressAnGets the balance of an account00ChGiven a compilation output node, if it is a function \xe2\x80\xa6CkGiven a dictionary of function data returns the name of \xe2\x80\xa6CeCollects the return values from the execution result.AnReturns the configured rpc urlBkReturns all sources for a contract by name.00AhGet the transaction type0DfGets the function that will write <code>value</code> into all bits \xe2\x80\xa60DhGenerate a geth-style trace e.g. for <code>debug_traceTransaction</code>00AjGlobal level solidity codeBmBalance of account got transferred to target.0000000Aohandle a single RPC method callCfReturns the highest amount of gas spent on a fuzz case00ChHistory of binned hitcount of edges seen during fuzzing.DkConfigures an <code>axum::Router</code> that handles JSON-RPC calls via \xe2\x80\xa6AoSets the account to impersonate0AhThe in progress requestsCkIncrement senders and return unique identifier of the fork.CfForward the function implementation to CommentsRef \xe2\x80\xa6CnFilter a collection of comments and return only those that \xe2\x80\xa6AlGet the char used for indentCiApply the callback indented by the indent size if the \xe2\x80\xa6DiReturns the index of the first occurrence of a <code>key</code> in an \xe2\x80\xa600000Cginitializes the <code>.vscode/settings.json</code> fileAgInitial gas for a Call.AlInitial gas for transaction.0100ChIf the account was initialized or empty prior to the \xe2\x80\xa600000AnReturns the ink mainnet chain.AnReturns the ink sepolia chain.ChInsert a key-value pair in the map, and get their index.CaInsert the value into the set, and get its index.10CiInspect the EVM with the given inspector and transaction.000AkEntry point for inspection.000BdReturns the current instance\xe2\x80\x99s ID.BhThe instance ID. Changes on every reset.CbThe program counter for the opcode of this anchor.CjInstructions provider of the EVM it is used to execute \xe2\x80\xa6000100001CeOpen an interactive prompt to enter your private key.CnReplaces all Env var placeholders in the input string with \xe2\x80\xa6BlInterpreter instance for executing bytecode.BoReturns a mutable reference to the interpreter.CkCore interpreter implementation for EVM bytecode execution.CkReference to the interpreter containing execution state \xe2\x80\xa6032100CdDecays the bit-reference to an ordinary bit-pointer.0BgConverts the bit-box into a bit-vector.0DkReturns the corresponding <code>foundry_block_explorers::Client</code>, \xe2\x80\xa6FkConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if \xe2\x80\xa60ChConsumes the type and returns the output data of the \xe2\x80\xa60DjReturns an <code>EvmError</code> if the call failed, otherwise returns \xe2\x80\xa600ChConvert to a signed authorization by adding a signature.0ChConsumes the inspector and returns the recorded call \xe2\x80\xa6000CkCreates a consuming iterator visiting all the values in \xe2\x80\xa6ClReturn an owning iterator over the values of the map, in \xe2\x80\xa6CkReturn an owning iterator over the values of the map slice.210DcConsumes the <code>TraceWriter</code> and returns the inner writer.00BeInverts bits within a memory element.0CnReturns true if the path exists on disk and is pointing at \xe2\x80\xa600000CkReturns <code>true</code> if the given data is ABI-encoded.DbReturns <code>true</code> if this function is a unit, fuzz, or \xe2\x80\xa60CgReturns whether the call value is apparent, and not \xe2\x80\xa60CjReturns true if the chain contains Arbitrum configuration.0BiReturns true if the account is a contract000BfCheck if the bytecode type is creationCdReturns true if the call is a delegate of some sorts00BfWhether the report should be detailed.BlCheck if the location is in a disabled rangeCbCheck if the lint location is in a disabled range.FaReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.FeReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. \xe2\x80\xa610DfReturns <code>true</code> if this chain is Ethereum or an Ethereum \xe2\x80\xa60BeReturns true if the link is external.CaReturns true if the frame has finished execution.ClWhether the frame has been finished its execution. Frame \xe2\x80\xa610CaReturns true if the opcode is a jump destination.0FcReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number \xe2\x80\xa6BeReturns whether the sign is negative.CdReturns <code>true</code> if the number is negative.210CcReturns <code>true</code> if the new value is zero.0BlReturns true if op-stack deposits are activeCjReturns true if the chain contains Optimism configuration.0FcReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number \xe2\x80\xa6BeReturns whether the sign is positive.CdReturns <code>true</code> if the number is positive.210CcReturns true if the option is <code>Preserve</code>000DeReturns <code>true</code> if this function is test reserved function.DcReturns true if the <code>Path</code> ends with <code>.t.sol</code>CeReturns whether the connection was marked as spuriousFeReturns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>\xe2\x80\xa6DhReturns <code>true</code> if the set is a superset of another, i.e., \xe2\x80\xa610CcReturns whether the call value will be transferred.0CdReturns <code>true</code> if the number is unsigned.0AgGet the journal mutably00000AiGet the journal reference00000ClLabels an address in call traces. Container type for the \xe2\x80\xa600000ClMaximum line length where formatter will try to wrap the \xe2\x80\xa60DhLoads the account allocs from the given <code>allocs</code> map into \xe2\x80\xa60000000CjDeserialize and add all blocks data to the backend storageDkLoad and sanitize the <code>Config</code> based on the options provided \xe2\x80\xa60CcLoads the config for the current project workspace.CkLoads a dotenv file, from the cwd and the project root, \xe2\x80\xa6B`Load states from serialized dataCcContainer type for the return parameters of the \xe2\x80\xa600DiFunction with signature <code>log(string,string,bool,bool)</code> and \xe2\x80\xa600EhFunction with signature <code>log(string)</code> and selector <code>0x41304fac</code>\xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,string,address)</code>\xe2\x80\xa600DkFunction with signature <code>log(string,string,address,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,string,uint256,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,bool,address,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,string,address,uint256)</code>\xe2\x80\xa600DkFunction with signature <code>log(bool,address,address,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,string,uint256)</code>\xe2\x80\xa600DhFunction with signature <code>log(address,bool,string,string)</code> \xe2\x80\xa600DfFunction with signature <code>log(uint256,uint256,bool)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DiFunction with signature <code>log(bool,string,bool,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,uint256,string)</code>\xe2\x80\xa600DjFunction with signature <code>log(bool,address,bool,string)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,string)</code> and selector \xe2\x80\xa600DbFunction with signature <code>log(bytes29)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(bool,bool,address,uint256)</code> and \xe2\x80\xa600DeFunction with signature <code>log(uint256,string,bool)</code> and \xe2\x80\xa600EhFunction with signature <code>log(bytes7)</code> and selector <code>0x4ed57e28</code>\xe2\x80\xa600DkFunction with signature <code>log(string,uint256,address,uint256)</code>\xe2\x80\xa600EhFunction with signature <code>log(bytes8)</code> and selector <code>0x4f84252e</code>\xe2\x80\xa600DiFunction with signature <code>log(bool,bool,bool)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(address,bool,string,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,string,bool,uint256)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes20)</code> and selector \xe2\x80\xa600E`Function with signature <code>log()</code> and selector <code>0x51973ec9</code>.00DiFunction with signature <code>log(bool,address,uint256,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,string,bool,address)</code> and \xe2\x80\xa600DkFunction with signature <code>log(bool,bool,uint256,address)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DgFunction with signature <code>log(string,string,uint256)</code> and \xe2\x80\xa600DgFunction with signature <code>log(string,uint256,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,uint256,string)</code>\xe2\x80\xa600DkFunction with signature <code>log(string,address,uint256,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,address,uint256)</code> and \xe2\x80\xa600DjFunction with signature <code>log(string,uint256,string,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,address,bool,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,string,address)</code>\xe2\x80\xa600DiFunction with signature <code>log(uint256,uint256,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,string,address,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,string,string,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,bool,address,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(string,string,uint256,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,string,uint256)</code>\xe2\x80\xa600DbFunction with signature <code>log(bytes19)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(string,string,bool,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,address,address)</code>\xe2\x80\xa600DhFunction with signature <code>log(string,address,string,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,string,bool,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(uint256,address,uint256,bool)</code> \xe2\x80\xa600DfFunction with signature <code>log(bool,address,uint256)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,address,address)</code>\xe2\x80\xa600DhFunction with signature <code>log(bool,bool,uint256,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,string,uint256,address)</code>\xe2\x80\xa600DhFunction with signature <code>log(uint256,address,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,address,uint256,address)</code>\xe2\x80\xa600DiFunction with signature <code>log(uint256,string)</code> and selector \xe2\x80\xa600DiFunction with signature <code>log(string,bool,uint256,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,bool,address,address)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DbFunction with signature <code>log(bytes16)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(address,uint256,uint256,bool)</code> \xe2\x80\xa600DfFunction with signature <code>log(address,uint256,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(address,string,uint256)</code> and \xe2\x80\xa600DhFunction with signature <code>log(uint256,bool,string,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,string,uint256,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,address)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(uint256,bool,bool,address)</code> and \xe2\x80\xa600DiFunction with signature <code>log(bool,uint256,string,uint256)</code> \xe2\x80\xa600DhFunction with signature <code>log(bool,address,bool,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,string,uint256,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,address,string)</code>\xe2\x80\xa600DiFunction with signature <code>log(bool,bool,string,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(string,string,string,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(bool,bool,bool,uint256)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,string,address,bool)</code> and \xe2\x80\xa600EhFunction with signature <code>log(bytes1)</code> and selector <code>0x6e18a128</code>\xe2\x80\xa600DiFunction with signature <code>log(address,address,string,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,address,string,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(string,bool,bool,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(uint256,uint256,string)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DhFunction with signature <code>log(string,bool,uint256,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,bool,bool,uint256)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,string)</code> and selector \xe2\x80\xa600DgFunction with signature <code>log(address,bool)</code> and selector \xe2\x80\xa600DiFunction with signature <code>log(string,uint256,uint256,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(string,address,bool,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,uint256,string,bool)</code> \xe2\x80\xa600DhFunction with signature <code>log(uint256,string,address)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,uint256,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,string,string,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,address,uint256,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,string,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,string,address,uint256)</code> \xe2\x80\xa600DhFunction with signature <code>log(string,uint256,string,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,bool,uint256,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(bool,uint256,bool,uint256)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,address,address,string)</code> \xe2\x80\xa600CcContainer type for the return parameters of the \xe2\x80\xa600DiFunction with signature <code>log(address,bool,string,uint256)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,uint256,address,bool)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,uint256,uint256)</code>\xe2\x80\xa600DjFunction with signature <code>log(address,uint256)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(string,bool,bool)</code> and selector \xe2\x80\xa600DgFunction with signature <code>log(bool,address)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,uint256,string)</code> \xe2\x80\xa600DeFunction with signature <code>log(uint256,bool,string)</code> and \xe2\x80\xa600DbFunction with signature <code>log(bytes12)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,string,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,uint256,address)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DgFunction with signature <code>log(string,bool,bool,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(string,bool,uint256,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,bool,bool,address)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,bool,bool,uint256)</code> and \xe2\x80\xa600444DjFunction with signature <code>log(string,bool,bool,uint256)</code> and \xe2\x80\xa600DiFunction with signature <code>log(bool,uint256,uint256,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(string,string,string,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,address,address,uint256)</code>\xe2\x80\xa600DkFunction with signature <code>log(address,address,string,address)</code>\xe2\x80\xa600DfFunction with signature <code>log(bool,string)</code> and selector \xe2\x80\xa600EhFunction with signature <code>log(bytes9)</code> and selector <code>0x90bd8cd0</code>\xe2\x80\xa600DiFunction with signature <code>log(uint256,string,address,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,address,bool,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,bool,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,bool,uint256,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,address,string,uint256)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes14)</code> and selector \xe2\x80\xa600DeFunction with signature <code>log(string,bool,address)</code> and \xe2\x80\xa600DiFunction with signature <code>log(string,bool,uint256,address)</code> \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DbFunction with signature <code>log(bytes13)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(string,bool,address,bool)</code> and \xe2\x80\xa600DeFunction with signature <code>log(bool,string,address)</code> and \xe2\x80\xa600DgFunction with signature <code>log(string,string,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,string,string,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,uint256,bool,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,uint256,bool,address)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,address,uint256,bool)</code> \xe2\x80\xa600DfFunction with signature <code>log(uint256,address,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,address,string)</code> \xe2\x80\xa600DfFunction with signature <code>log(address,bool,uint256)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,string,address)</code>\xe2\x80\xa600DiFunction with signature <code>log(string,bool,bool,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,address,bool,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,address,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,string,string,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,bool,address,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,uint256,address,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,address,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(address,uint256,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,uint256,bool,address)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,uint256,bool,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,string,address,uint256)</code> \xe2\x80\xa600EhFunction with signature <code>log(bytes5)</code> and selector <code>0xa684808d</code>\xe2\x80\xa600DkFunction with signature <code>log(address,bool,address,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,address,string,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,bool,address,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,uint256,uint256)</code>\xe2\x80\xa600DkFunction with signature <code>log(string,bool,string,string)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,address,bool,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,address,string,address)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,uint256,bool,bool)</code> and \xe2\x80\xa600DbFunction with signature <code>log(bytes23)</code> and selector \xe2\x80\xa600DhFunction with signature <code>log(string,uint256,bool,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,bool,address,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,string,bool,address)</code> \xe2\x80\xa600EhFunction with signature <code>log(bytes6)</code> and selector <code>0xae84a591</code>\xe2\x80\xa600DkFunction with signature <code>log(uint256,string,string,uint256)</code> \xe2\x80\xa600DdFunction with signature <code>log(bool,string,string)</code> and \xe2\x80\xa600DdFunction with signature <code>log(string,string,bool)</code> and \xe2\x80\xa600DgFunction with signature <code>log(uint256,string,string)</code> and \xe2\x80\xa600DhFunction with signature <code>log(uint256,string,string,bool)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,uint256,address,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(string,address,address,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,uint256)</code> and selector \xe2\x80\xa600DiFunction with signature <code>log(address,uint256,uint256)</code> and \xe2\x80\xa600DhFunction with signature <code>log(uint256,bool,bool,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,uint256,string)</code> \xe2\x80\xa600DgFunction with signature <code>log(bool,bool,string,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(uint256,string,bool,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(address,string,bool,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(uint256,address,address)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DkFunction with signature <code>log(bool,uint256,uint256,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,uint256,string,uint256)</code>\xe2\x80\xa600DhFunction with signature <code>log(bool,bool,address,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(bool,address,string,uint256)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes31)</code> and selector \xe2\x80\xa600DhFunction with signature <code>log(string,string,bool,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(string,string,uint256,bool)</code> \xe2\x80\xa600DfFunction with signature <code>log(string,bool)</code> and selector \xe2\x80\xa600DeFunction with signature <code>log(bool,uint256,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,bool,uint256,bool)</code> and \xe2\x80\xa600DbFunction with signature <code>log(bytes18)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(uint256,uint256,uint256,bool)</code> \xe2\x80\xa600DiFunction with signature <code>log(address,uint256,bool,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,string,uint256)</code> \xe2\x80\xa600CcContainer type for the return parameters of the \xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,uint256,uint256)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes28)</code> and selector \xe2\x80\xa600DeFunction with signature <code>log(string,address,bool)</code> and \xe2\x80\xa600DeFunction with signature <code>log(string,bool,uint256)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,uint256,uint256)</code> and \xe2\x80\xa600DeFunction with signature <code>log(string,uint256,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(address,bool,bool,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,address,string,bool)</code> \xe2\x80\xa600DjFunction with signature <code>log(address,bool,uint256,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(bool,uint256,bool,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,string,bool,uint256)</code> \xe2\x80\xa600DeFunction with signature <code>log(address,string,bool)</code> and \xe2\x80\xa600DiFunction with signature <code>log(address,uint256,string,bool)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,bool,bool,address)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,uint256,uint256)</code> and \xe2\x80\xa600DfFunction with signature <code>log(bool,address,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(uint256,string,bool,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,string,address)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes22)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(bool,address,uint256,bool)</code> and \xe2\x80\xa600DhFunction with signature <code>log(string,string,bool,uint256)</code> \xe2\x80\xa600DiFunction with signature <code>log(bool,address,address,string)</code> \xe2\x80\xa600DbFunction with signature <code>log(bytes15)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(address,address)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(bool,string,bool)</code> and selector \xe2\x80\xa600DgFunction with signature <code>log(bool,string,bool,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,uint256,string)</code>\xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,bool,string)</code> and \xe2\x80\xa600DiFunction with signature <code>log(uint256,bool,uint256,string)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,string,string,string)</code> \xe2\x80\xa600DeFunction with signature <code>log(bool,address,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(address,bool,bool,string)</code> and \xe2\x80\xa600EhFunction with signature <code>log(bytes4)</code> and selector <code>0xe05f48d1</code>\xe2\x80\xa600DhFunction with signature <code>log(string,bool,string,address)</code> \xe2\x80\xa600DiFunction with signature <code>log(string,uint256,bool,address)</code> \xe2\x80\xa600DgFunction with signature <code>log(string,address,string)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,uint256,uint256,address)</code>\xe2\x80\xa600DdFunction with signature <code>log(string,bool,string)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,address,string,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,address,bool,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(bool,bool,string,uint256)</code> and \xe2\x80\xa600DiFunction with signature <code>log(string,uint256,bool,uint256)</code> \xe2\x80\xa600DjFunction with signature <code>log(bool,uint256,string,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(uint256,string,address,uint256)</code>\xe2\x80\xa600DcFunction with signature <code>log(bool,uint256,bool)</code> and \xe2\x80\xa600EhFunction with signature <code>log(bytes2)</code> and selector <code>0xe9b62296</code>\xe2\x80\xa600DbFunction with signature <code>log(bytes21)</code> and selector \xe2\x80\xa600DjFunction with signature <code>log(string,string,address,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,uint256,bool,uint256)</code> \xe2\x80\xa600DcFunction with signature <code>log(address,bool,bool)</code> and \xe2\x80\xa600DjFunction with signature <code>log(uint256,bool,string,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,address,address,address)</code>\xe2\x80\xa600DbFunction with signature <code>log(bytes30)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(address,address,string,uint256)</code>\xe2\x80\xa600DiFunction with signature <code>log(uint256,bool,string,address)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,address,bool,address)</code> \xe2\x80\xa600DhFunction with signature <code>log(address,string,address)</code> and \xe2\x80\xa600DfFunction with signature <code>log(address,bool,address)</code> and \xe2\x80\xa600DbFunction with signature <code>log(bytes24)</code> and selector \xe2\x80\xa600DfFunction with signature <code>log(address,address,bool)</code> and \xe2\x80\xa600DkFunction with signature <code>log(string,string,uint256,uint256)</code> \xe2\x80\xa600DkFunction with signature <code>log(bool,bool,address,address)</code> and \xe2\x80\xa600DhFunction with signature <code>log(bool,uint256,string,string)</code> \xe2\x80\xa600DjFunction with signature <code>log(uint256,uint256)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(address,string,address,string)</code> \xe2\x80\xa600DkFunction with signature <code>log(address,address,address,string)</code>\xe2\x80\xa600DbFunction with signature <code>log(uint256)</code> and selector \xe2\x80\xa600DbFunction with signature <code>log(bytes26)</code> and selector \xe2\x80\xa600DkFunction with signature <code>log(string,address,uint256,uint256)</code>\xe2\x80\xa600DjFunction with signature <code>log(bool,bool,string,address)</code> and \xe2\x80\xa600AkFunction with signature \xe2\x80\xa600DgFunction with signature <code>log(address,string,string)</code> and \xe2\x80\xa600DiFunction with signature <code>log(string,address,uint256,bool)</code> \xe2\x80\xa600DhFunction with signature <code>log(string,address,address)</code> and \xe2\x80\xa600DkFunction with signature <code>log(address,address,uint256,string)</code>\xe2\x80\xa600DiFunction with signature <code>log(bool,uint256,string,address)</code> \xe2\x80\xa600CcContainer type for the return parameters of the \xe2\x80\xa600000000000000000000DgEvent with signature <code>log_address(address)</code> and selector \xe2\x80\xa600DgEvent with signature <code>log_array(uint256[])</code> and selector \xe2\x80\xa600DfEvent with signature <code>log_array(int256[])</code> and selector \xe2\x80\xa600DgEvent with signature <code>log_array(address[])</code> and selector \xe2\x80\xa600DgEvent with signature <code>log_bytes32(bytes32)</code> and selector \xe2\x80\xa600CmConverts the error message of a failed parsing attempt to \xe2\x80\xa6C`Maps <code>EVMError&lt;DBError&gt;</code> to \xe2\x80\xa6C`Handle special expressions like global variablesCiMax number of addresses to display from hardware wallets.CkThe memory input data before executing the step of the run.00000AjConfigures no disk cachingDiSince each <code>Fork</code> tracks logs separately, we need to merge \xe2\x80\xa6000CdIf true, one of the transactions did not have a rpc.CiSpecify which files to mutate with glob pattern matching.ClName of the struct definition used in function names and \xe2\x80\xa6DfReturns <code>true</code> if the <code>needs_clear</code> flag is set.ClFlag that indicates the current line needs to be cleared \xe2\x80\xa6AnBalance after deal was appliedCkCreates a new <em>changed</em> <code>EvmStorageSlot</code>.AhCreates changed account.ChCreates a new <em>changed</em> <code>StorageSlot</code>.210DgCreates a new EIP-7702 <code>Bytecode</code> from <code>Address</code>.0CgReturns <code>EthInstructions</code> with mainnet spec.0BkDo not append any metadata to the bytecode.0CeNormalizes the signature into \xe2\x80\x9clow S\xe2\x80\x9d form as \xe2\x80\xa60CiAttempts to normalize the v value to a boolean parity \xe2\x80\xa60DjHow many consumers there are, since a <code>SharedBacked</code> can be \xe2\x80\xa6CkCalculates the distance (in bits) between two bit-pointers.0AgNew balance of account.0000000CbThe balance of the address before deal was appliedBiReturns a receiver for the shutdown eventBbA receiver for the shutdown signalCnVector of pairs of artifact ID and the runtime code length \xe2\x80\xa60BbGets the output mode of the shell.BmThe verbosity mode to use for message output.Cmsecp256r1 precompile logic. It takes the input bytes sent \xe2\x80\xa60BnParses a <code>Duration</code> from a &amp;strBlCreates a new <code>ParseError</code> error.CkConverts the input to a U256 and converts from Ether to \xe2\x80\xa60CgParses function input and output types into Parameters.CeConvert a number into a uint with arbitrary decimals.ChParses a decimal number and multiplies it with 10^units.000ChReturns the current opcode wrapped in OpCode without \xe2\x80\xa60Anwhat kind of access is allowedAlPops address from the stack.0EdSets the <em>next</em> call\xe2\x80\x99s <code>msg.sender</code> to be the input address. \xe2\x80\xa600000EdSets the <em>next</em> call\xe2\x80\x99s <code>msg.sender</code> to be the input address, \xe2\x80\xa600000EdSets the <em>next</em> delegate call\xe2\x80\x99s <code>msg.sender</code> to be the input \xe2\x80\xa600000000000CdReturns a set of precompiles to extend the EVM with.0ChPrecompile provider of the EVM it is used to execute \xe2\x80\xa60BjContains precompiles for the current spec.1AdPrecompile addresses200CbReturns the secp256r1 precompile with its address.CgReturns the BLS12-381 precompiles with their addresses.24434242210222AhPrevious shrunk call id.BeSets whether to print contract names.BeWhether to also print contract names.BeSets whether to print contract sizes.BeWhether to also print contract sizes.AmUse the provided private key.000AhStyle of quotation marks0DkHelper to generate a random <code>uint</code> value (with given bits or \xe2\x80\xa6ChCreates a new fixed byte array with the given random \xe2\x80\xa6DfCreates a new <code>FixedBytes</code> with the given random number \xe2\x80\xa6DgCreates a new <code>Uint</code> with the given random number generator.2221022DbReturns <code>self</code> with the <code>attr()</code> set to [\xe2\x80\xahIterates over non-overlapping mutable subslices of a \xe2\x80\xa60ClAttempts read the latest broadcast file in the broadcast \xe2\x80\xa6AiRecords an explicit cost.0AfWhether to record logsBcEnable recording of individual logs10110101BhRecords a read access to a storage slot.DkReturns the complementary error variant for <code>fs::remove_file</code>\xe2\x80\xa6BnWrapper for <code>std::fs::remove_file</code>.DfCreates a new byte array where all bytes are set to <code>byte</code>.EcCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.111011FdReplaces occurrences of <code>from</code> in the given <code>string</code> with <code>to</code>. \xe2\x80\xa600000AnThe path to output the report.AoThe kind of report to generate.B`What kind of report to generate.0CiDetermine the kind of report to generate based on the \xe2\x80\xa6BkError if the current call is executing EOF.0CiReturns the URL of the dependency if it exists, or an \xe2\x80\xa6AeReserialize the data.0ClResizes the bit-vector to a new length, using a function \xe2\x80\xa60BbBuffer for return data from calls.0AmOptional decoded return data.1100AoAddress that reverted the call.0CiPerforms the right shift operation (&gt;&gt;) on a numberClRotates the contents of a bit-slice to the left (towards \xe2\x80\xa6DhShifts the bits to the left by a specified amount, <code>rhs</code>, \xe2\x80\xa6CeSee <code>Uint::rotate_left</code> for documentation.210DgReturns all rpc urls and their aliases <code>[alias, url][]</code>. \xe2\x80\xa600000CmPerforms an Ethereum JSON-RPC request to the current fork \xe2\x80\xa600000CfPerforms an Ethereum JSON-RPC request to the given \xe2\x80\xa600000BhSpecify custom headers for RPC requests.0BgTimeout for the RPC request in seconds.0CjIterates over mutable subslices separated by bits that \xe2\x80\xa60AcRun the subcommand.000oSee SafeUnwrap.0AjSelects the fork\xe2\x80\x99s stateCjSelect an existing fork by id. When switching forks we \xe2\x80\xa6101010CcEIP-1884: Repricing for trie-size-dependent opcodes0DkSet RNG seed. Function with signature <code>setSeed(uint256)</code> and \xe2\x80\xa600000DhContainer type for the return parameters of the <code>setUp()</code> \xe2\x80\xa600AaSets the address.CjWrites a new value into a single bit, using alias-safe \xe2\x80\xa60BeSets the balance of the given address0CgSets the <code>AccountInfo</code> <code>balance</code>.AnSet the balance of an account.100BfUpdates the <code>enabled</code> stateAfSet the errored field.AaSets the spec id.lSets SpecId.11BdSets the specid for the interpreter.AeSets the EVM spec ID.AhSets the current spec id4344210100AnSet the storage of an account.00AjSets the unlocked wallets.000CmSetup an empty test project and return a command pointing \xe2\x80\xa6CmPrints a raw formatted message to stderr, with a trailing \xe2\x80\xa6CmShifts the contents of a bit-slice \xe2\x80\x9cright\xe2\x80\x9d (away from \xe2\x80\xa60C`Display the gathered traces of a REPL execution.CgRandomly shuffles an array. Function with signature \xe2\x80\xa600000BaSends <code>eth_simulateV1</code>CeWhether the prank stops by itself after the next call0CfReturns the failed result with reason for single test.BcGenerate bindings as a single file.CmGranular and single-step function that runs only one fuzz \xe2\x80\xa600CgReturns the skipped result for single test (used in \xe2\x80\xa6DcSuspends execution of the main thread for <code>duration</code> \xe2\x80\xa600000CjReturns a byte slice of the memory region at the given \xe2\x80\xa60B`The storage slot of the mapping.BfReturns the Sonic Blaze testnet chain.CkFile location of the current test, relevant for persistence00BcThe bytecode -&gt; source mappings.00BaWhether to compile in sparse modeDiSplits the given <code>string</code> into an array of strings divided \xe2\x80\xa600000CkSplits the bit-slice into a reference to its first bit, \xe2\x80\xa6CkReturns the first key-value pair and the rest of the slice,DkReturns the first value and the rest of the slice, or <code>None</code> \xe2\x80\xa6210AdMontgomery squaring.BdComputes a^2 * 2^(-BITS) mod modulus10Bl<code>SSTORE</code> opcode cost calculation.0BmStart a new indent group (skips first indent)AnThe start token of the commentB`Prefix for the contract address.BcPrefix regex pattern or hex string.CfTests if the bit-slice begins with the given sequence.0BfImplements the STATICCALL instruction.0BlThe storage keys to be added in access list.00000AmReturns the DB storage length000BgGets storage value of address at index.00000CkStores a value to an address\xe2\x80\x99 storage slot. Container \xe2\x80\xa600000CnStores a value into the memory system. This is only called \xe2\x80\xa60DgStores a value through <code>self</code> after masking away extra bits.110BmUsed for submitting a proof-of-work solution.ClHelper functions for suggesting alternative values for a \xe2\x80\xa6BbTakes a bit out of the bit-vector.DkRemove the key-value pair equivalent to <code>key</code> and return its \xe2\x80\xa6DiRemove the value from the set, and return <code>true</code> if it was \xe2\x80\xa6CiRemove the key, value pair stored in the map for this \xe2\x80\xa600321000CfPerforms a set of actions within a synchronous update.000CkSystem call implementations for special EVM operations. \xe2\x80\xa60AnReturns the taiko hekla chain.EhTakess the <code>BundleState</code> changeset from the <code>State</code>, replacing \xe2\x80\xa60CkThe path to the file from which to read struct definitions.BdThe path to the contract to flatten.CcThe target path where the document will be written.0DkUse for <code>OPCODE_INFO</code> to set the terminating flag to true in \xe2\x80\xa60DkOptional cheatcodes <code>TestRunner</code>. Used for generating random \xe2\x80\xa60DeConverts the <code>Uint</code> to a big-endian byte array of size \xe2\x80\xa6DiConverts <code>self</code> to a big-endian byte array of size exactly \xe2\x80\xa6CeSee <code>Uint::to_be_bytes</code> for documentation.210CmEncodes an Ethereum address to its EIP-55 checksum into a \xe2\x80\xa60A`Applies EIP-155.0DhConverts the <code>Uint</code> to a little-endian byte array of size \xe2\x80\xa6DhConverts <code>self</code> to a little-endian byte array of size exactlyCeSee <code>Uint::to_le_bytes</code> for documentation.210BkConvert into a <code>LogData</code> object.0CjThe top spinner with content of the format \xe2\x80\x9cSequence \xe2\x80\xa6AhExtends the debug arena.BfReturns the traces for the given blockCjReturns traces for the transaction hash via parity\xe2\x80\x99s \xe2\x80\xa6Abactual transactionAmref to the actual transactionAiTransaction related typesAfThe actual transactiongExampleD`Transaction trait <code>Transaction</code> and associated types.AmThe transaction to broadcast.1000CcReturns the address of the transfer target account.0BfBlock state account with account state00000DgAttempts to view <code>self</code> as an immutable bit-slice region \xe2\x80\xa6000CnReturns the <code>SpecId</code> for the given <code>u8</code>.0DgTries to reserve capacity for at least <code>additional</code> more \xe2\x80\xa6DfTry to reserve capacity for <code>additional</code> more key-value \xe2\x80\xa6D`Try to reserve capacity for <code>additional</code> more values.2DhTries to reserve capacity for at least <code>additional</code> bytes \xe2\x80\xa632130AhTries to resolve a valueAhStarts the debugger TUI.CkTries to get the solc version from the <code>SolcReq</code>BmStandalone spinners for pending transactions.AfReturns the left value0C`Short-hand for <code>unwrap(value, true)</code>.B`Updates the account information.0EhSets the <code>libs</code> entry inside a <code>foundry.toml</code> file but only if \xe2\x80\xa6CkRecords number of new edges or features explored during \xe2\x80\xa6DhReturns <code>Some(())</code> if the signature included in the input \xe2\x80\xa60CkVisit the block item. Attempt to write it on the single \xe2\x80\xa6DeExecutes a <code>Watchexec</code> that listens for changes in the \xe2\x80\xa6AkFile update debounce delay.DkIs length of the <code>text</code> with respect to already written line \xe2\x80\xa6DcCreate a new <code>TraceWriter</code> with the given writer and \xe2\x80\xa60AjSet config on the builder.1DgCreates an empty <code>HashMap</code> which will use the given hash \xe2\x80\xa6C`Create a new map with <code>hash_builder</code>.C`Create a new set with <code>hash_builder</code>.CiCreates a new empty hash set which will use the given \xe2\x80\xa63210B`Add known labels to the decoder.00ClInclude a memory field for each step. This significantly \xe2\x80\xa60CiVisit the children elements with parent context. This \xe2\x80\xa6CkSets the recovery ID by normalizing a <code>v</code> value.0CoCreates a new context with a new <code>DatabaseRef</code> type.0hExamples0BhWrites a call trace arena to the writer.00AlBit-wise <code>memset</code>0CiWrite the chunk and any surrounding comments into the \xe2\x80\xa6C`Write content to the buffer surrounded by pipes.CgWrites a title to the buffer formatted as Markdown::H1.CfWrite AsDoc implementation to the buffer with newline.BnWrites raw content to the buffer with newline.AoReturns the websocket endpoint.DhConstructs a <code>RetryProvider</code> for this handle\xe2\x80\x99s WS endpoint.BdState of an account in the database.000BkError type for address checksum validation.0BaWhat bytecode analysis to perform0B`Anvil\xe2\x80\x99s EVM related arguments.AbArrow Glacier: \xe2\x80\xa6BmCLI arguments for <code>cast artifact</code>.Cn<code>IndexMap</code> optimized for hashing <code>B256</code>.0Cn<code>IndexSet</code> optimized for hashing <code>B256</code>.0AdBENCH_CALLER address000AdBENCH_TARGET address000DdErrors that can happen when working with <code>revm::Database</code>0000BoContainer type for various Backend related data000BoCLI arguments for <code>forge bind-json</code>.AoRead-Only Shared-Mutable Handle0DhAn error produced when creating <code>BitSpan</code> encoded references.0CdHelper trait for scalars and arrays, but not slices.0CnA block request, which includes the Pool Transactions if it\xe2\x80\xa6AjA shareable Block database000BhContainer for buffer access information.DhState after we have bundled all <code>TransactionWithMetadata</code> \xe2\x80\xa6BoSubset of CompactBytecode excluding sourcemaps.CeEnum to represent the type of bytecode being verifiedCbThe <code>0x37</code> (\xe2\x80\x9cCALLDATACOPY\xe2\x80\x9d) opcode.000CbThe <code>0x35</code> (\xe2\x80\x9cCALLDATALOAD\xe2\x80\x9d) opcode.000CbThe <code>0x36</code> (\xe2\x80\x9cCALLDATASIZE\xe2\x80\x9d) opcode.000CnGas stipend provided to the recipient of a CALL with value \xe2\x80\xa60CkCache account contains plain state that gets updated at \xe2\x80\xa6000AdWhat chains to cacheBiWallet capabilities for a specific chain.DbCheatcode definition trait. Implemented by all <code>Vm</code> \xe2\x80\xa6000000DjAdditional, configurable context the <code>Cheatcodes</code> inspector \xe2\x80\xa6000000BjRepresents the result of a Chisel REPL runAaThe Chisel RunnerChUseful extensions to <code>std::process::Command</code>.CkThe state of a character in a string with possible commentsBnCLI arguments for <code>forge compiler</code>.CjContainer for all the <code>Console</code> function calls.00CiInner Context error used for Interpreter to set error \xe2\x80\xa600000BjContainer for commonly used contract data.BnKeeps data about a single contract definition.ClHow big the contract is and whether it is a dev contract \xe2\x80\xa6AoContract info provided via CLI.BnCLI arguments for <code>forge coverage</code>.AhInputs for a create call000mCreate scheme0000000ChWhen accounts gets loaded this flag is set to false. \xe2\x80\xa60CiDownload a contract creation code from Etherscan and RPC.Bh<code>type(Contract).creationCode</code>CbThe <code>0xF4</code> (\xe2\x80\x9cDELEGATECALL\xe2\x80\x9d) opcode.000BgDeprecated keys and their replacements.BhThe dev chain-id, inherited from hardhatAlHolds info of debugger dump.AjDecode ABI-encoded string.Ai<code>DELEGATECALL</code>0AkRepresents a delegate call.BhThe account was called via delegatecall.220100001AkThe result of a deployment.00CjDisables formatting for any code that follows this and \xe2\x80\xa60Bjreplace \xe2\x80\x9cdelegatecall\xe2\x80\x9d with \xe2\x80\x9ccall\xe2\x80\x9dCmAn empty database that always returns default values when \xe2\x80\xa600000CmTurn on call traces for transactions that are returned to \xe2\x80\xa6BmCLI arguments for <code>cast estimate</code>.ChCreates a filter object, based on filter options, to \xe2\x80\xa6B`Subscribe to an eth subscriptionCgA set of arbitrary 32 byte data from the VM used to \xe2\x80\xa6000CiRepresents the context after an execution error occurred.00CnThe cheatcode is unstable, meaning it may contain bugs and \xe2\x80\xa6000CnThrown post London if the transaction\xe2\x80\x99s fee is less than \xe2\x80\xa6AiForge execution contexts.00000000DjA wrapper around a <code>std::fmt::Write</code> interface. The wrapper \xe2\x80\xa6BbRepresents the operation on the fsBiGambit doesn\xe2\x80\x99t implement nor define it?BcFixtures to be used for fuzz tests.00BnContains data collected during fuzz test runs.00CiGas consumption of a single data blob (== blob byte size)0AjThe global shell instance.CbGray Glacier hard fork Activated at block 15050000BoString identifier for the Gray Glacier hardfork10AoHelper that keeps track of gas.0BnCLI arguments for <code>forge generate</code>.AjTrait for the halt reason.0BiCompute storage slots as specified by \xe2\x80\xa6DiA view into an occupied entry in an <code>IndexMap</code> obtained by \xe2\x80\xa60CaAn inline config. Keeps track of disabled ranges.ClAn inline config. Keeps track of ranges which should not \xe2\x80\xa6CjRepresents per-test configurations, declared inline as \xe2\x80\xa60CmAn extension trait that allows us to add additional hooks \xe2\x80\xa6000BlThe instruction set type that implements \xe2\x80\xa6000BjValue tree for signed ints (up to int256).CmA lazy iterator producing elements in the intersection of \xe2\x80\xa6000EhThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>\xe2\x80\xa6AhInvalid digit in string.10AdInvalid magic number0BjInvalid radix, up to base 64 is supported.0BfRepresents either an item or a result.0CiJournal entries that are used to track changes to the \xe2\x80\xa60000000CgInner journal state that contains journal and state \xe2\x80\xa600000DbThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.000CiThe long version message information for the Foundry CLI.CgTrait for lints that operate on the HIR (High-level \xe2\x80\xa60ChWrites the coverage report in LCOV\xe2\x80\x99s tracefile format.Ak\xe2\x9a\xa0\xef\xb8\x8f Lehmer update matrix0B`Contains the config and rule setAhList all cached sessionsBjLocal context that is filled by execution.000CaAn inspector that collects logs during execution.000DaMagic return value returned by the <code>assume</code> cheatcode.000ClThe maximum length of an ANSI prefix + suffix characters \xe2\x80\xa6CaMuir Glacier hard fork Activated at block 9200000BoString identifier for the Muir Glacier hardfork10AgRecorded mapping slots.CiPossible mutation strategies to apply on a call sequence.CmA format specifier which should be replaced with the next \xe2\x80\xa6DiThrown when there are no <code>blob_hashes</code> in the transaction, \xe2\x80\xa6CnA logger that listens for node related events and displays \xe2\x80\xa6Cmreturned if the nonce of a transaction is higher than the \xe2\x80\xa6AbNonce is too high.0CcThe feature or opcode is not activated in hardfork.CmThe feature or opcode is not activated in this version of \xe2\x80\xa610AoA notification (no Id provided)AlThe requested output format.EnCounts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> \xe2\x80\xa60AgPrompt arrow character.AbThe parser result.0CnThe sign method calculates an Ethereum specific signature, \xe2\x80\xa6AoPlain account of StateDatabase.00000CkSimple plain storage that does not have previous value. \xe2\x80\xa60CkPrecompile function type. Takes input and gas limit and \xe2\x80\xa6000CkTrait for preprocessing and/or modifying existing documents0BlHolds related metadata to each provider RPC.CgAn iterator over the indices of quoted string locationsBgShared Bit-Slice Reverse Exact Chunking0c\xe2\x80\xa60CnThe function selector of the REPL contract\xe2\x80\x99s entrypoint, \xe2\x80\xa6BgRecords storage slots reads and writes.AlMatches start and end regex.EeWrapper type for <code>regex::Regex</code> that implements <code>PartialEq</code> \xe2\x80\xa6CgRepresents the options used in <code>anvil_reorg</code>ChAn error that can occur when reading an incoming requestBjRemove the state snapshot after reverting.0000BcSo storage can have multiple types:00000CfContainer type for API endpoints, like various RPC \xe2\x80\xa60CjRuntime flags that control interpreter execution behavior.0CmThe first four bytes of the call data for a function call \xe2\x80\xa6CbThe <code>0xFF</code> (\xe2\x80\x9cSELFDESTRUCT\xe2\x80\x9d) opcode.0BfGas cost for SELFDESTRUCT instruction.110CcThe default Solc version used when compiling tests.CkGas cost for SSTORE when modifying an existing non-zero \xe2\x80\xa60CjRepresents the result of an <code>sstore</code> operation.000Bl<code>forge script</code> execution context.00000000Ce<code>forge script --resume</code> execution context.00000000AgDrives script executionBnA helper struct to test forge script scenarios0BmThe kind of selector to fetch from OpenChain.AeSelf destruct opcode.BcSelf-destruct the current contract.AoThe account was selfdestructed.2100000AjAdditional server options.0BoWrites a single slot of the account\xe2\x80\x99s storageCnThe Range points to the SharedMemory buffer. Buffer can be \xe2\x80\xa6000DkA sequential memory shared between calls, which uses a <code>Vec</code> \xe2\x80\xa6000CeAllows building of State and initializing it with \xe2\x80\xa600000DhRepresents the value of a storage slot <code>eth_getStorageAt</code> \xe2\x80\xa6Amtype alias for storage valuesAiAn account storage value.0100BlThe subscription type this handle may create0CnCreates the system transaction with default values and set \xe2\x80\xa6000AjTest timeout return value.000BhHelper type to determine the current ttyDnError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.0BmConvert an integer into a fixed point number.C`Transaction has more then <code>max</code> blobs0CeBuilder for constructing <code>TxEnv</code> instances0ClReturns the number of transactions currently pending for \xe2\x80\xa6CnValue tree for unsigned ints (up to uint256). The strategy \xe2\x80\xa6000AoThe transaction value is not 0.AoVerification provider argumentsDgData struct to help <code>ScriptSequence</code> verify contracts on \xe2\x80\xa6BfWrapper enum around different signers.BgContains context for wallet management.000DhGets all accessed reads and write slot from a <code>vm.record</code> \xe2\x80\xa600000B`Fetch account info if it exists.BbFetches account info if it exists.10ChAccount name for the keystore file. If provided, the \xe2\x80\xa6BiThe name for the account in the keystore.00AnReturns the DB accounts length000BhAccrues the input into the bloom filter.0CaActual number of times this revert has been seen.CaAdd a <code>SourceAnalysis</code> to this report.00CmComputes the offset (in bits) that needs to be applied to \xe2\x80\xa60ChProduces bit-slice view(s) with different underlying \xe2\x80\xa60BiThe cors <code>allow_origin</code> header0AkBootstrap axum RPC servers.BcDouble precision decimal logarithm.0AjAccess the array of limbs.CfSee <code>Uint::as_limbs_mut</code> for documentation.10CeReturns a mutable bit-slice containing the entire \xe2\x80\xa6ChReturns a mutable slice containing the entire array. \xe2\x80\xa6CmReturns a mutable slice of all the key-value pairs in the \xe2\x80\xa6CkReturns a mutable slice of the remaining entries in the \xe2\x80\xa63210CgProduces a range of bit-pointers to each bit in the \xe2\x80\xa60CkViews the bit-array as a slice of its underlying memory \xe2\x80\xa6BjViews the type as a slice of its elements.ClViews the bit-vector as a slice of its underlying memory \xe2\x80\xa61CiViews the bit-box as a slice of its underlying memory \xe2\x80\xa632102ChIf the condition is false, discard this run\xe2\x80\x99s fuzz \xe2\x80\xa600000AhAccount balance changes.BfIncrements the balance of the account.000000000AoReturns the base mainnet chain.AoReturns the base sepolia chain.D`The bitwise or (<code>|</code>) of the bits in two flags values.AbBoolean Arithmetic10AlEIP-7516: BLOBBASEFEE opcode0CkIf EVM asks for block hash, we will first check if they \xe2\x80\xa6BmAll cached block hashes from the DatabaseRef.111110AkReturns the DB block_hashesBoReturns the map that holds all the block hashes32323333101010BkSingle active future that mines a new blockAhThe block that was minedBdThe block number of the forked blockBhReturns the number of most recent block.BeReturns the block number to fork fromCiNumber of the block this transaction was included within.AjOverride the block number.BoBlock number, calls ContextTr::block().number()0BbImplements the NUMBER instruction.110AaThe block number.Bkthe block.number value during EVM executionBnthe block.number value during EVM execution\xe2\x80\x9c0BbReturns the total number of blocksClConverts a boolean to a left-padded <code>B256</code> value.0BjThe number of branches in the source file.00F`Returns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code`Returns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code`Returns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</codefCasts the current writer <code>w</code> as a <code>String</code> reference. Should \xe2\x80\xa6DjBuilds a Filter by first trying to parse the <code>sig_or_topic</code> \xe2\x80\xa6ChIf contract has a non-empty constructor, generates a \xe2\x80\xa6CiAfter block is finishes we merge those changes inside \xe2\x80\xa60AhBundle state management.11111101111CeReturns current bytecode original length. Used in \xe2\x80\xa60BcPointer to the executable bytecode.0CmCreates a new call builder using this contract instance\xe2\x80\x99\xe2\x80\xa6BhImplements the CALLDATACOPY instruction.0BhImplements the CALLDATALOAD instruction.0BhImplements the CALLDATASIZE instruction.0CnReturns if invariant test can continue and last successful \xe2\x80\xa6CeCreates a new command that is set to use the cast \xe2\x80\xa6EhReturns a specific byte, or <code>None</code> if <code>index</code> is out of range. \xe2\x80\xa60CiReturns the base 2 logarithm of the number, rounded down.0A`The chisel stateAiSet the Chisel inspector.AkThe chisel state inspector.1022010CgIterates over non-overlapping subslices of a bit-slice.0ClClones a remote repository into the specified directory. \xe2\x80\xa6AnGets account code by its hash.000AlGet account code by its hash1111011CkCreates a journal entry for when an account\xe2\x80\x99s code is \xe2\x80\xa600000CnHelper function to coerce a value to a DynSolValue given a \xe2\x80\xa6CmSets <code>block.coinbase</code>. Function with signature \xe2\x80\xa600000CjCollects data from call for fuzzing. However, it first \xe2\x80\xa6EdCollects <code>stack</code> and <code>memory</code> values into the fuzz dictionary.BhSet whether to enable the log collector.00BaReturns the current color choice.AnGets the current color choice.CaFinalize the state and commit it to the database.00000BkCompiles the project with the given closureBhConcatenate two <code>FixedBytes</code>.0CiConnects to an HTTP alloy_transport_http::Http transport.EnReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.0DoReturns true if <code>search</code> is found in <code>subject</code>, false \xe2\x80\xa600000DkReturns <code>true</code> if the map contains a value for the specified \xe2\x80\xa6E`Return <code>true</code> if an equivalent to <code>key</code> exists in the map.BoReturns true if the cache contains a signature.2100CnTrue if the bloom filter contains a log with given address \xe2\x80\xa60CfForward the function implementation to CommentsRef \xe2\x80\xa6CbCheck if the collection contains a target comment.C`The contract address where the opcode is running00000ClUtility cheatcode to mark specific storage slot as cold, \xe2\x80\xa600000CmCopies the contents of one file to another. This function \xe2\x80\xa600000Bm<code>CREATE2</code> opcode cost calculation.0DhCreate an empty builder, with all fields set to <code>None</code> or \xe2\x80\xa6AoReturns the current debug step.B`Current step in the debug steps.CnNumber of address values initially collected from db. Used \xe2\x80\xa6AaDecodes an event.00CeThe decoded DSTest logging events and Hardhat\xe2\x80\x99s \xe2\x80\xa6BgReturns a config for geth style traces.000AlThe dependencies to install.BdThe dependencies you want to remove.BdThe dependencies you want to update.BlDependencies collected for current contract.AdSoldeer dependenciesBgCode of the account deployed by CREATE.00000ClSigner accounts that can sign messages/transactions from \xe2\x80\xa6CjFilters multiple strings from a given list of possible \xe2\x80\xa60De\xe2\x9a\xa0\xef\xb8\x8f Computes the quotient and remainder of a <code>u128</code> \xe2\x80\xa60Ck\xe2\x9a\xa0\xef\xb8\x8f Computes the quotient of a 192 bits divided by a \xe2\x80\xa60ChDump the contract sources to the root directory. The \xe2\x80\xa6AlDumps debugger data to file.CeA module that deserializes <code>[]</code> optionallyCkSets the default <code>yansi</code> color output condition.EeGets the environment variable <code>name</code> and parses it as <code>int256</code>.00000DgGets the environment variable <code>name</code> and parses it as an \xe2\x80\xa600000000000000000000000000000AjThe error message, if any.00000BbSends <code>eth_estimateGas</code>CnEstimate gas needed for execution of given contract. If no \xe2\x80\xa6CnEstimate tx gas from provider call. Tries to decode custom \xe2\x80\xa6ClReturns the chain ID used for transaction signing at the \xe2\x80\xa6CmCreates a new event filter using this contract instance\xe2\x80\x99\xe2\x80\xa6AaThe event string.CiSets the specific timestamp and returns the number of \xe2\x80\xa6CjSnapshot the state of the blockchain at the current block.CfForward the function implementation to CommentsRef \xe2\x80\xa6CnFilter a collection of comments and return only those that \xe2\x80\xa6ChReturns true if the given path points to an existing \xe2\x80\xa600000AnExpand globs with a root path.AgReturns the right value0BaAlternative explorer browser URL.B`Extended bytecode functionality.0BdExtends the bundle with other state.0CeExtra output to include in the contract\xe2\x80\x99s artifact.0CmAdditional output selection for all contracts, such as \xe2\x80\x9c\xe2\x80\xa6CfFactor out a homogeneous type from an either of pairs.0DiContainer type for the return parameters of the <code>failed()</code> \xe2\x80\xa600BkReturns the pattern to match against a fileCjAttempts to find anchors for the given items using the \xe2\x80\xa600ClFinds a contract based on provided bytecode and accepted \xe2\x80\xa6ClExtracts fixture name from a function name. For example: \xe2\x80\xa600nfoundry-scriptAlSmart contract verification.AcSetup forge soldeerDgReturns the <code>revm::Env</code> that is configured with settings \xe2\x80\xa60Blheaders to use with <code>eth_rpc_url</code>CjHeaders to use for the rpc client, e.g. \xe2\x80\x9cUser-Agent: \xe2\x80\xa61BiHeaders to use with <code>fork_url</code>0AbNumber of retries.AfThe number of retries.0CcFormats the given number of Wei as an Ether amount.0CnUsed to format ABI parameters into valid solidity function \xe2\x80\xa6BjFormats a value into an inspection messageClPretty-prints the given value into a string suitable for \xe2\x80\xa60CfFormat a number from smallest unit to decimal with \xe2\x80\xa6CbFormats the given number of Wei as the given unit.000AfPretty-prints a value.DkInitializes an <code>AccountInfo</code> with the given balance, setting \xe2\x80\xa60EaConstructs the <code>Uint</code> from digits in the base <code>base</code> in \xe2\x80\xa6EcConstructs the <code>Signed</code> from digits in the base <code>base</code> in \xe2\x80\xa61011AnConvert from a decimal string.0DjConstructs a shared <code>&amp;BitSlice</code> reference over a shared \xe2\x80\xa6CbConstructs a new bit-vector from a single element.10CbDecode the signature from the ERC-2098 compact \xe2\x80\xa60AjConvert from a hex string.0BnWhether the document is from external library.0CmReturns the appropriate precompile Spec for the primitive \xe2\x80\xa60EaDecode a UTF-16BE\xe2\x80\x93encoded vector <code>v</code> into a <code>String</code>, \xe2\x80\xa60EaDecode a UTF-16LE\xe2\x80\x93encoded vector <code>v</code> into a <code>String</code>, \xe2\x80\xa60CkReturns Some if the custom type is a function member accessBeTimeout for each fuzz run in seconds.AlThe amount of gas remaining.00000AcThe total gas used.00000AcGas metering state.000000B`Gas refunded by the transaction.lRefunded gas100Cn\xe2\x9a\xa0\xef\xb8\x8f Compute the greatest common divisor and the B\xc3\xa9zout \xe2\x80\xa6Ao\xe2\x9a\xa0\xef\xb8\x8f Lehmer\xe2\x80\x99s extended GCD.10CkRead a source string, and for each contract found, gets \xe2\x80\xa6Aigenesis hash of the chainBiThe <code>genesis.json</code> if providedCkGets the label for the specified address. Function with \xe2\x80\xa600000BiReturns the absolute value of the number.0AkReturns the base fee to useAkReturns the chain ID to useBnReturns the configured chain id, which will be0BoReturns the underlying fork mapped to the indexC`Returns the corresponding fork url if it exists.000CnGiven an ABI and selector, it tries to find the respective \xe2\x80\xa6BlReturns the function for the given selector.10110AkReturns the hardfork to useBjReturn item index, if it exists in the mapBjReturn item index, if it exists in the set10C`Returns the ipc path for the ipc endpoint if anyCiReturns a RetryProvider instantiated using Config\xe2\x80\x99s RPCBoreturns all receipts for the given transactionsCnGets the selector for a given function signature Optimizes \xe2\x80\xa6CiReturns the  GethTraceBuilder for the recorded traces \xe2\x80\xa6000DhReturns the globally shared fixed <code>SharedSeed</code> as used by \xe2\x80\xa60CjReturns a byte slice of the memory region at the given \xe2\x80\xa6BjMemory slice with global range. This range10CcFormats values as hex strings, separated by commas.DeFunction with signature <code>identity(bytes)</code> and selector \xe2\x80\xa6CmTakes the input bytes, copies them, and returns it as the \xe2\x80\xa60BlHolds the backend if no block is being minedClCreates a new impersonated transaction wrapper using the \xe2\x80\xa6CiImport alias for the contract or struct, depending on \xe2\x80\xa6A`The in memory DBBcIn-memory database implementations.0AcIn-memory database.CdWhether to include libraries in the coverage report.CfForward the function implementation to CommentsRef \xe2\x80\xa6CnFilter a collection of comments and return only those that \xe2\x80\xa6AnInitializes tracing for tests.CkReturns the number of both input and output stack elements.0ClSets the value of the entry (after inserting if vacant), \xe2\x80\xa6DgSets the value of the entry, and returns an <code>OccupiedEntry</code>.DjSets the value of the entry with the <code>VacantEntry</code>\xe2\x80\x99s key, \xe2\x80\xa6CjInserts the entry\xe2\x80\x99s key and the given value into the \xe2\x80\xa63210ClInsert raw value into fuzz dictionary. If value is newly \xe2\x80\xa6BoEVM instruction set implementations and tables.CnEVM instruction implementations organized by category. EVM \xe2\x80\xa610CeOpen an interactive prompt to enter your private key.00B`The IntermediateOutput componentDeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.DiReturn an iterator over the values that are in both <code>self</code> \xe2\x80\xa6CnVisits the values representing the intersection, i.e., the \xe2\x80\xa6DaReturns intersection of <code>self</code> and <code>other</code>.3210CeConverts the implementing type into an Address value.0DkReturns the <code>DynSolType</code> contained by <code>Type::Builtin</code>CmConsumes the type and returns an iterator over the list\xe2\x80\x99\xe2\x80\xa60DcConstructs a <code>RetryProvider</code> for this handle\xe2\x80\x99s IPC \xe2\x80\xa6CnReturns true if the path exists on disk and is pointing at \xe2\x80\xa600000BoReturns true if the call is CallKind::AuthCall.00CcReturns <code>true</code> if auto mining is enabledBlReturns true if it is <code>CALLCODE</code>.0DfReturns <code>true</code> if the trace kind is <code>Execution</code>.00CjReturns <code>true</code> if this function is a fuzz test.0CkReturns <code>true</code> if the URL only consists of host.BeOriginal value is not known for sure.0CaReturns true if the option is <code>Remove</code>0CiWhether the current fuzz test timed out and should be \xe2\x80\xa600CjReturns <code>true</code> if this function is a unit test.0BnWhether target contracts are updatable or not.00AoThe original item file content.0CjReturns an iterator over the opcodes in this bytecode, \xe2\x80\xa60CkIf provided, keystore will be saved here instead of the \xe2\x80\xa6CkIf not provided, keystore will try to be located at the \xe2\x80\xa60CfThe version of the LCOV \xe2\x80\x9ctracefile\xe2\x80\x9d format to use.CmCounts the number of bits from the start of the bit-slice \xe2\x80\xa6CdReturns the number of leading ones in the binary \xe2\x80\xa6CfSee <code>Uint::leading_ones</code> for documentation.210C`Returns left value or computes it from a closure0CmLeft-pads the given slice with zeroes until <code>len</code>.0AoReturns the Lens testnet chain.AoReturns the linea goerli chain.AbLoads the account.CkLoads account into memory. return if it is cold or warm \xe2\x80\xa611BjReturns the account for the given address.21202CcContainer type for the return parameters of the \xe2\x80\xa600000000000DkContainer type for the return parameters of the <code>log(bytes)</code> \xe2\x80\xa600111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111DkContainer type for the return parameters of the <code>log(int256)</code>\xe2\x80\xa600DkContainer type for the return parameters of the <code>log(bytes3)</code>\xe2\x80\xa600333333333DjContainer type for the return parameters of the <code>log(bool)</code> \xe2\x80\xa600444444444444444444444444444444444444444444444444444444444444CfBLS12-381 map fp to g1 precompile. More details in \xe2\x80\xa6ClField-to-curve call expects 64 bytes as an input that is \xe2\x80\xa610BcMarks the account as newly created.0CjReturns a contract with the given path should be included.0BlReturns whether the test should be included.0CjTries to decode an error message from the given revert \xe2\x80\xa6000BlThe memory limit per EVM execution in bytes.00BmA hard memory limit in bytes beyond which \xe2\x80\xa6000CnThe memory limit per EVM execution in bytes. If this limit \xe2\x80\xa6000C`Returns the start position of the memory offset.0BeEnables auto and interval mining mode0lMocked calls000000AoReturns the mode sepolia chain.CcContainer type for the return parameters of the \xe2\x80\xa6AkModifies the context block.0AkModifies the context chain.0AkModifies the local context.0BiForge test runner for multiple contracts.BcAll signers in scope of the script.000ClPathe where mutation tests are cached, to resume running \xe2\x80\xa6AlCreate new checked bytecode.0DeReturns a new instance of the builder from <code>Cow::Borrowed</code>DjCreates a new <code>CowBackend</code> with the given <code>Backend</code>.10001CiCreates a new benchmark database with the given bytecode.")