rd_("AhC-Style Bit-Field AccesshBit ViewCdHelper trait for scalars and arrays, but not slices.102CkG function: https://tools.ietf.org/html/rfc7693#section-3.10BkReturns the signature <code>r</code> value.CgReturns the <code>r</code> component of this signature.B`First 32 bytes of the signature.2100000BkReturns the signature <code>s</code> value.CgReturns the <code>s</code> component of this signature.BaSecond 32 bytes of the signature.2100000BoReturns the recovery ID as a <code>bool</code>.CkThe y-parity of the recovered secp256k1 signature (0 or 1).100000Bj<code>Bits</code> for <code>0</code> bits.0Bj<code>Bits</code> for <code>1</code> bits.0Am1-byte fixed byte-array type.Bj<code>Bits</code> for <code>8</code> bits.10BeThis bundles all required revm traitsoDatabase error.0mDatabase type10101101010BhThe <code>0x14</code> (\xe2\x80\x9cEQ\xe2\x80\x9d) opcode.000BhThe <code>0x11</code> (\xe2\x80\x9cGT\xe2\x80\x9d) opcode.000A`H1 heading item.0A`H2 heading item.0A`H3 heading item.0CiThe 0-bit signed integer type, capable of representing 0.0ClThe 1-bit signed integer type, capable of representing 0 \xe2\x80\xa60Ci8-bit signed integer type, consisting of 1, 64-bit limbs.000BkThe interpreter types used by this handler.BiThe interpreter types used by this frame.1101A`got IV from: \xe2\x80\xa60BhThe <code>0x10</code> (\xe2\x80\x9cLT\xe2\x80\x9d) opcode.000CdShows cached data from the global foundry directory.CnDoesn\xe2\x80\x99t check original values, see the implementation of \xe2\x80\xa600000BhThe <code>0x17</code> (\xe2\x80\x9cOR\xe2\x80\x9d) opcode.000AjContains the success value00000000000000000000000000000Bb<code>OpEvm</code> implementation.BhThe <code>0x58</code> (\xe2\x80\x9cPC\xe2\x80\x9d) opcode.000BdGet information about a transaction.AaTransaction type.00A`Transaction type00111000Ec<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.000Dg<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.000Ck8-bit unsigned integer type, consisting of 1, 64-bit limbs.0Df<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.110AmFoundry cheatcodes interface.00000AcWebSocket transportBoSets the address and returns <code>self</code>.CiTranslates a semantic bit index into a real bit position.000DbReturns a styled value derived from <code>self</code> with the \xe2\x80\xabThe parent runner.Cerevm related types Helper types for working with revmCbAccess to <code>revm::Database</code> abstraction.B`where to insert the transactionsAmReturns the mutable database.A`Get the database1100CnThe underlying database (DatabaseRef) that is used to load \xe2\x80\xa6000AnReturns the underlying storageDjReturns the current database implementation as a <code>&amp;dyn</code> \xe2\x80\xa62434222243310210CkThe underlying database ([DatabaseRef]) that is used to \xe2\x80\xa621000BfContains all the data already fetched.AeDSTest log interface.0AdBit-Pointer EqualityAnImplements the EQ instructionfImplementations of <code>Filesystem</code> cheatcodes.DeContains various <code>std::fs</code> wrapper functions that also \xe2\x80\xa6ChImplements the GT instruction - greater than comparison.0BkHardhat <code>console.sol</code> interface.0AoHigher base (by absolute value)kHigher baseC`keeps track of transactions inserted in the poolClidentifier used to internally compare the transaction in \xe2\x80\xa6CnThe identifier for this request issued by the client, An Id\xe2\x80\xa6nid or Id::NullAiThe arbitrary identifier.ClThe function\xe2\x80\x99s unique identifier. This is the function \xe2\x80\xa6BoReturns the optional ID of the current session.AnThe ID of the session to load.0BbThe current session\xe2\x80\x99s identifier3CnThe id of the preprocessor. Used to write data to document \xe2\x80\xa60AdThe verification ID.55CmWe have to serialize chain IDs and not names because when \xe2\x80\xa6AdThe ID of the chain.CjUtilities for working with standard input, output, and \xe2\x80\xa6AnLower base (by absolute value)jLower baseCeImplements the LT instruction - less than comparison.0CnReturns the list of named parameters for the given opcode, \xe2\x80\xa6AoOpCode, if it could be decoded.AnImplements the PC instruction.B`Returns current program counter.AlThe current program counter.02100000AnProgram counter of the opcode.oThe parse tree.0D`Same as <code>solang_parser::pt</code>, but with the patched \xe2\x80\xa6BnReceives hashes of transactions that are readyC`Returns the callee if this transaction is a callCnAddress of the receiver. None when its a contract creation \xe2\x80\xa6BcThe destination of the transaction.0000BbSet the transaction kind to createBmAddress of account that received the balance.00CnReturns the address of the contract that will be called or \xe2\x80\xa6fPanics0232221002AhTransaction information.0DaThis module contains <code>TxEnv</code> struct and implements \xe2\x80\xa6AcGet the transaction2AiNonce of the transaction.0311ClThe deployer\xe2\x80\x99s transaction, exposed for overriding the \xe2\x80\xa64432411422AfThe type of the field.0BbReturns the type of the parameter.11CdHelper trait and functions to format Ethereum types.BiThe <code>0x01</code> (\xe2\x80\x9cADD\xe2\x80\x9d) opcode.000BcA full bit-mask with every bit set.AlThe literal <code>!0</code>.AnAll the variants of this enum.21BiThe <code>0x16</code> (\xe2\x80\x9cAND\xe2\x80\x9d) opcode.000CbError which occurred during ABI encoding/decoding.00CdABI mutate random args of selected call in sequence.AmGet the timestamp of a block.AgRecord full, push stack000CiIf function params or attrs are multiline. split the restAfInclude all providers.1A`Cache all chainsAcCache all endpoints44AnWrapper around AWS KMS signer.Am2-byte fixed byte-array type.Bk<code>Bits</code> for <code>16</code> bits.10Am4-byte fixed byte-array type.Bk<code>Bits</code> for <code>32</code> bits.10Am8-byte fixed byte-array type.0Bk<code>Bits</code> for <code>64</code> bits.110An12-byte fixed byte-array type.0BiThe <code>0x1E</code> (\xe2\x80\x9cCLZ\xe2\x80\x9d) opcode.000AjConfiguration for the EVM.AbConfiguration type110101011010BiThe <code>0x04</code> (\xe2\x80\x9cDIV\xe2\x80\x9d) opcode.000AaThe DAO fork: \xe2\x80\xa6BhExplain to a developer any extra details0BgGenerate documentation for the project.BiThe <code>0x0A</code> (\xe2\x80\x9cEXP\xe2\x80\x9d) opcode.0BbBase gas cost for EXP instruction.110EjHelper container type for <code>EvmEnv</code> and <code>OpTransaction&lt;TxEnd&gt;</code>.DeHelper container type for <code>EvmEnv</code> and <code>TxEnv</code>.AdEnvironment category1DbAn endpoint that contains at least one <code>${ENV_VAR}</code> \xe2\x80\xa60022AhContains the error value00000000000000000000AmFailed to parse the argument.111111111Bc<code>EthEvm</code> implementation.CeThe EVM type containing Context, Instruction, and \xe2\x80\xa60ChMain EVM structure that contains all data needed for \xe2\x80\xa60CjCheatcodes that read from, or write to the current EVM \xe2\x80\xa62211000BcAddress of the identity precompile.AaBlake2 precompile10AmFormat Solidity source files.CgError thrown by <code>std::fmt::Write</code> interfaces0BiThe <code>0x5A</code> (\xe2\x80\x9cGAS\xe2\x80\x9d) opcode.000BmRepresents the state of gas during execution.0BoGas used. Returned by <code>lastCallGas</code>.1100000BgWrapper around Google Cloud KMS signer.AiError while decoding hex.0jA hex U256Cj16-bit signed integer type, consisting of 1, 64-bit limbs.000Cj24-bit signed integer type, consisting of 1, 64-bit limbs.0Cj32-bit signed integer type, consisting of 1, 64-bit limbs.000Cj40-bit signed integer type, consisting of 1, 64-bit limbs.0Cj48-bit signed integer type, consisting of 1, 64-bit limbs.0Cj56-bit signed integer type, consisting of 1, 64-bit limbs.0Cj64-bit signed integer type, consisting of 1, 64-bit limbs.000Cj72-bit signed integer type, consisting of 2, 64-bit limbs.0Cj80-bit signed integer type, consisting of 2, 64-bit limbs.0Cj88-bit signed integer type, consisting of 2, 64-bit limbs.0Cj96-bit signed integer type, consisting of 2, 64-bit limbs.0jAn integermIPC transportiA raw keyBcBase gas cost for LOG instructions.0BaGas cost for low-cost operations.0C`A log consists of an address, and some log data.0CjAn Ethereum log. Returned by <code>getRecordedLogs</code>.1100000CmThe inclusive maximum index within an <code>R</code> element.DgThe inclusive maximum tail within (or after) an <code>R</code> element.DgThe position value of the most significant bit in an <code>R</code> \xe2\x80\xa6CmThe largest value that can be represented by this integer \xe2\x80\xa6AbThe maximum value.AaThe largest unit.543210BdGas cost for medium-cost operations.0CmThe inclusive minimum index within an <code>R</code> element.DgThe inclusive minimum tail within (or after) an <code>R</code> element.DhThe position value of the least significant bit in an <code>R</code> \xe2\x80\xa6CnThe smallest value that can be represented by this integer \xe2\x80\xa6AbThe minimum value.AbThe smallest unit.543210BiThe <code>0x06</code> (\xe2\x80\x9cMOD\xe2\x80\x9d) opcode.000BiThe <code>0x02</code> (\xe2\x80\x9cMUL\xe2\x80\x9d) opcode.000CkThe element type used in the memory region underlying a \xe2\x80\xa60CiThe element type being guarded against improper mutation.110B`A basic <code>mut</code> marker.BbThe output type of mutable access.10BjAlias for the <code>JUMPDEST</code> opcode0BiThe <code>0x19</code> (\xe2\x80\x9cNOT\xe2\x80\x9d) opcode.000AlCreate a new random keypair.Aj<code>new Contract</code>.AiA <code>u64</code> value.AhNative <code>u64</code>.1CkThe value one. This is useful to have as a constant for \xe2\x80\xa6BkOne (multiplicative identity) of this type.10BiThe <code>0x50</code> (\xe2\x80\x9cPOP\xe2\x80\x9d) opcode.000BcThe memory-access type this guards.0AgRaw input to be hashed.B`Do not perform bytecode analysis10DaSend a signed transaction via <code>eth_sendRawTransaction</code>DhCommit hash <code>rev</code> the submodule is currently pointing to. \xe2\x80\xa60AoPerform a raw JSON-RPC request.DaAn RPC URL and its alias. Returned by <code>rpcUrlStructs</code>.00000CkRuns a published transaction in a local environment and \xe2\x80\xa6BiThe <code>0x1D</code> (\xe2\x80\x9cSAR\xe2\x80\x9d) opcode.000BiThe <code>0x13</code> (\xe2\x80\x9cSGT\xe2\x80\x9d) opcode.000BiThe <code>0x1B</code> (\xe2\x80\x9cSHL\xe2\x80\x9d) opcode.000BiThe <code>0x1C</code> (\xe2\x80\x9cSHR\xe2\x80\x9d) opcode.000BiThe <code>0x12</code> (\xe2\x80\x9cSLT\xe2\x80\x9d) opcode.000BiThe <code>0x03</code> (\xe2\x80\x9cSUB\xe2\x80\x9d) opcode.000CaSingle parameter sequence (e.g <code>[1]</code>).B`Get the selector for a function.AaThe TUI debugger.0EgRelease tag <code>name</code> and the <code>rev</code> it is currently pointing to. \xe2\x80\xa60Ci16-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Dh<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.110Ci24-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Ci32-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Dh<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.110Ci40-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Ci48-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Ci56-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Ci64-bit unsigned integer type, consisting of 1, 64-bit \xe2\x80\xa60Dh<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.110Ci72-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Ci80-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Ci88-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Ci96-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60AdA raw Url (ws, http)0AkWei is equivalent to 1 wei.0BiThe <code>0x18</code> (\xe2\x80\x9cXOR\xe2\x80\x9d) opcode.000CiChecks changed with original values that BundleState has.00000BhThe ABI of the contract at this address.AeThe contract\xe2\x80\x99s ABI.AiABI of the test contract.CcContains dynamic ABI definitions for this contract.0213AkABI of the target contract.111AmABI related helper functions.mContract ABI.33333546CaComputes the absolute value of <code>self</code>.0BcReturns the Abstract mainnet chain.CdAdjusts a bit-pointer upwards in memory. This is \xe2\x80\xa6CiImplements the ADD instruction - adds two values from \xe2\x80\xa6AdBn128 add precompile210AeAdds a new permissionAmList all configured accounts.BjGet a flags value with all known bits set.CmTests if every bit is set to <code>1</code> in the bit-slice.BiReturns a config with everything enabled.CbUpload selectors for all contracts in the project.32111DcTests if there is at least one bit set to <code>1</code> in the \xe2\x80\xa60AbAccess to the node0BmEVM execution API traits and implementations.0BgAdd an argument to pass to the command.BfAdds an argument to the forge command.BeSort results by gas used (ascending).DmArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, \xe2\x80\xa60DmArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> \xe2\x80\xa60AkThe AST of the source code.0C`Includes the AST as JSON in the compiler output.0CjWhether to include the AST as JSON in the compiler output.2AkList accounts from AWS KMS.AoUse AWS Key Management Service.000CeConverts a sequence of string literals containing \xe2\x80\xa60DgGets the <code>BitIdx</code> that selects the bit within the memory \xe2\x80\xa6BfReturns whether a specific bit is set.0100CmGet the Write interface of the current temp buffer or the \xe2\x80\xa6nGas limit cap.0oConfigurations.0EfThis module contains <code>CfgEnv</code> and implements <code>Cfg</code> trait for \xe2\x80\xa6AeGet the configuration22CjConfiguration for the EVM. Containing <code>SpecId</code>.11332133011CeImplements the CLZ instruction - count leading zeros.0Adcontains cli commandAn<code>cast</code> subcommands.mChiselCommandAo<code>forge</code> subcommands.CfReturns a mutable reference to the underlying command.BhAdd another command to run after cloningCaThe actual command we use to control the process.CeCompare two <code>u64</code> slices in reverse order.0DiA wrapper around <code>Backend</code> that is clone-on-write used for \xe2\x80\xa6Df<code>context_interface::ContextTr</code> of the EVM it is used to \xe2\x80\xa6CdReturns a mutable reference to the execution context1011101011AfReturns the dev chain.EnReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</codelList all the accounts in the keystore directory. Default \xe2\x80\xa6CnOptionally provide the keystore directory if not provided. \xe2\x80\xa6Bi\xe2\x9a\xa0\xef\xb8\x8f Collection of division algorithms.Ao\xe2\x9a\xa0\xef\xb8\x8f Division with remainder.0ClImplements the DIV instruction - divides two values from \xe2\x80\xa62110DhConfiguration specific to the <code>forge doc</code> command and the \xe2\x80\xa6BhConfiguration for <code>forge doc</code>D`Duplicates the <code>N</code>th value from the top of the stack.BgImplements the DUP1-DUP16 instructions.1101mThe EVM data.CiThe higher, exclusive, bound of the range. The bit to \xe2\x80\xa6000AnThe env data of the blockchainAeEnv data of the chainBkReturns a reference to the EVM environment.BiThe <code>revm::Env</code> after the callCkThe env to create this fork, main purpose is to provide \xe2\x80\xa6BlContains the env at the time of the snapshotA`EVM environment.4312CgImplementations of <code>Environment</code> cheatcodes.BjAll ethereum environment related arguments6AdThe EVM environment.645BbThe EVM environment configuration.5560EdSet the environment variable <code>k</code> to value <code>v</code> for the command.CbAdds an environment variable to the forge command.CaGets a reference to the underlying stderr writer.AoThe error message that occurred00000B`ethereum related implementationsAfVarious Ethereum typesAhEvm related abstractionsCcCore EVM traits for execution and frame management.BmThis module contains <code>Evm</code> struct.10BoImplementations of <code>Evm</code> cheatcodes.BoCLI arguments for configuring the EVM settings.CmImplements the EXP instruction - exponentiates two values \xe2\x80\xa60AhFee for the transaction.0BeWhether the FFI cheatcode is enabled.00000AiEnable the FFI cheatcode.BgWhether to allow ffi cheatcodes in test2AjEnables the FFI cheatcode.0BjAttempt to fix any configuration warnings.CdHelpers to automatically fix configuration warnings.AnFormats the opcode as a stringDfCreates a new error with a custom <code>fmt::Arguments</code> message.10AeThe formatter config.0001BcFormats a value using a FormatSpec.0DhConfiguration specific to the <code>forge fmt</code> command and the \xe2\x80\xa6BhConfiguration for <code>forge fmt</code>AoRaw folded stack trace builder.AiReturns reference to gas.CdGas calculation utilities and constants. EVM gas \xe2\x80\xa6BbReturns the gas usage information.DbRetrieves a reference to the <code>Gas</code> details from the \xe2\x80\xa6BaGas tracking for execution costs.AjThe gas usage information.DiRecords a <code>gas</code> cost and fails the instruction if it would \xe2\x80\xa621AoImplements the GAS instruction.lConsumed gasBmReturns the main gas value to compare against98765435421BeThe expected gas supplied to the call2CmGas consumed by this function, allowed to be negative due \xe2\x80\xa6CnCompute the greatest common divisor of two <code>Uint</code>s.Ba\xe2\x9a\xa0\xef\xb8\x8f Lehmer\xe2\x80\x99s GCD algorithms.10BdList accounts from Google Cloud KMS.BhUse Google Cloud Key Management Service.000ClReturns the state for the given <code>hash</code> if presentCfReturns the transaction for the hash if it\xe2\x80\x99s pendingCiReturns the transaction for the hash if it\xe2\x80\x99s in the \xe2\x80\xa6ClGet the capabilities of the wallet API for the specified \xe2\x80\xa6CiReturns the number of hits for the given program counter.C`Returns the coverage item for the given item ID.AkReturns the opcode as a u8.EhImmutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> \xe2\x80\xa6CkGets a reference to a single bit or a subsection of the \xe2\x80\xa6DkReturns a mutable reference to the type <code>T</code>, initializing it \xe2\x80\xa6AiReturns the current item.CjReturns a reference to the value corresponding to the key.BkGets a reference to the value in the entry.DiReturn a reference to the value stored for <code>key</code>, if it is \xe2\x80\xa6ClReturn a reference to the value stored in the set, if it \xe2\x80\xa6CcGets a reference to the entry\xe2\x80\x99s value in the map.00CmReturns a reference to the value in the set, if any, that \xe2\x80\xa6BlReturns a reference to this entry\xe2\x80\x99s value.5CiGets a reference to the value that would be used when \xe2\x80\xa6BfReturns the numeric value of the unit.BoReturns the call value, regardless of the type.BmReturns the precompile for the given address.B`Gets a signature from the cache.CiReturns the number of hits for the given program counter.C`Returns the coverage item for the given item ID.DcGet the <code>DepIdentifier</code> for a submodule at a given path.DkReturns a mutable reference to the type <code>T</code>, initializing it \xe2\x80\xa6AiReturns the current item.AkReturns the opcode as a u8.EhImmutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> \xe2\x80\xa6CkGets a reference to a single bit or a subsection of the \xe2\x80\xa6CjReturns a reference to the value corresponding to the key.BkGets a reference to the value in the entry.DiReturn a reference to the value stored for <code>key</code>, if it is \xe2\x80\xa6ClReturn a reference to the value stored in the set, if it \xe2\x80\xa6CcGets a reference to the entry\xe2\x80\x99s value in the map.00CmReturns a reference to the value in the set, if any, that \xe2\x80\xa6BlReturns a reference to this entry\xe2\x80\x99s value.5CiGets a reference to the value that would be used when \xe2\x80\xa6BfReturns the numeric value of the unit.BoReturns the call value, regardless of the type.BmReturns the precompile for the given address.B`Gets a signature from the cache.CnReturns the width of the terminal from the environment, if \xe2\x80\xa6BcAcquire a lock to the global shell.CiReturns the program counter for the given instruction \xe2\x80\xa6CiReturns the instruction counter for the given program \xe2\x80\xa6ClReturns the state snapshot with the given id <code>id</code>CiReturns the number of hits for the given program counter.C`Returns the coverage item for the given item ID.7BmThis is optional to handle no-git scencarios.0AoThe git URL for the source repoCdMacro for converting sequence of string literals \xe2\x80\xa6000kParsed HIR.CgIncrease the hit counter by 1 for the given program \xe2\x80\xa600B`This node\xe2\x80\x99s index in the arena00lIPC handlingAgReturns the JWT secret.AcSets the JWT secretjJWT SecretAlThe JWT to use for requests.A`The mapping key.BdKey of storage slot that is changed.BcKey of storage slot that is warmed.BnKey of transient storage slot that is changed.210210ClGets a reference to the entry\xe2\x80\x99s key, either within the \xe2\x80\xa6BjReturns a reference to this entry\xe2\x80\x99s key.BiGets a reference to the key in the entry.CgGets a reference to the key that would be used when \xe2\x80\xa6CaGets a reference to the entry\xe2\x80\x99s key in the map.CiGets a reference to the key that was used to find the \xe2\x80\xa611876AiThe alias of the RPC URL.987987987654321229870000BfThe Etherscan (or equivalent) API key.AnReturns the Etherscan API key.1ChThe etherscan API KEY that\xe2\x80\x99s required to make requestsAeThe resolved API key.4AnReturns the koi testnet chain.EgCompute the least common multiple of two <code>Uint</code>s or <code>None</code> if \xe2\x80\xa60CiReturns the number of transactions that are currently \xe2\x80\xa6CiReturns the number of program counters hit in the hitmap.BeReturns the length of the byte range.BiReturns the length of the original bytes.B`Gets the length of the jump map.BkGets the length (in bits) of the bit-array.BiGets the number of bits in the bit-slice.BbGets the length of the bit-vector.BjReturns the number of elements in the map.C`Return the number of key-value pairs in the map.BiReturn the number of elements in the set.CfReturn the number of key-value pairs in the map slice.BoReturn the number of elements in the set slice.BjReturns the number of elements in the set.EgReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or \xe2\x80\xa6BbReturn number of changed accounts.BoReturns the length of the current memory range.BiReturns the length of the stack in words.BeReturns the length of the call input.AeReturns stack length.BbReturns the number of precompiles.B`Returns the number of issued idsBeNumber of signers in the MultiWallet.CiReturns the number of program counters hit in the hitmap.BeReturns the length of the byte range.BgThe number of tests in this test suite.C`Returns the num of dependencies in the lockfile.BiReturns the length of the original bytes.B`Gets the length of the jump map.BkGets the length (in bits) of the bit-array.BiGets the number of bits in the bit-slice.BbGets the length of the bit-vector.BjReturns the number of elements in the map.C`Return the number of key-value pairs in the map.BiReturn the number of elements in the set.CfReturn the number of key-value pairs in the map slice.BoReturn the number of elements in the set slice.BjReturns the number of elements in the set.EgReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or \xe2\x80\xa6BbReturn number of changed accounts.BoReturns the length of the current memory range.BiReturns the length of the stack in words.BeReturns the length of the call input.AeReturns stack length.BbReturns the number of precompiles.BeNumber of signers in the MultiWallet.B`Returns the number of issued ids1BlReturns the number of configured permissions11AnReturns the length of the map.0CiReturns the number of program counters hit in the hitmap.BeReturns the length of the byte range.BlThe location of the item in the source code.0BoReturns the code location of <code>self</code>.0BgSource map location of this dependency.2AmCalled when a log is emitted.DjEmits a log owned by <code>address</code> with given <code>LogData</code>.AnLogs the log in Journal state.AkPushes log into subroutine.1CbReturns the logarithm of the number, rounded down.24CiLog, calls <code>ContextTr::journal_mut().log(log)</code>0BfImplements the LOG0-LOG4 instructions.65434264110AaThe log we expectCnEvent with signature <code>log(string)</code> and selector \xe2\x80\xa600DhMap <code>f</code> over the contained value and return the result in theBfRe-exports of map types and utilities.Dj<code>IndexMap</code> is a hash table where the iteration order of the \xe2\x80\xa6CkMaps the data of the <code>StateLoad</code> to a new value.3210DdSource ID to <code>(offset, len)</code> into <code>all_items</code>.B`Maximum number of blobs allowed.ChOnly include tests that used less gas that the given \xe2\x80\xa61AbThe parent runner.0BoIn-memory Backend In-memory blockchain backend.AkMemory Element Descriptions0ChOnly include tests that used more gas that the given \xe2\x80\xa6BaCreate a new error with a message000CjImplements the MUL instruction - multiplies two values \xe2\x80\xa6AdBn128 mul precompile10BiCreates a new instance with limited slotsBjCreates a new storage with a genesis block0BaCreates a new instance of this DBBbCreates a new instance of the forkCkCreates a new instance from the request\xe2\x80\x99s gas related \xe2\x80\xa6DfReturns a new miner with that operates in the given <code>mode</code>.D`Creates a new instance with an interval of <code>duration</code>BnCreates a new <code>PendingTransaction</code>.AfCreates a new instanceBdReturns a new instance of this layerCiCreates a new instance of the handler using the given \xe2\x80\xa60BjCreates a new instance of the task managerAdCreates a new block.CmCreates a new <code>LenientBlockNumberOrTag</code> from a \xe2\x80\xa6BoCreates a new wrapper for the given transactionD`New <code>RpcError</code> with the given <code>ErrorCode</code>.BmCreates a new endpoint with the given handlerCdCreates a new Cast instance from the provided clientCeCreate a new <code>EvmEnv</code> from its components.BlCreate a new hitmap with the given bytecode.BfCreates a new, empty coverage summary.ChAnalyzes contracts in the sources held by the source \xe2\x80\xa6BdCreates a new, empty revert decoder.CcCreates a new instance of CastTxBuilder filling \xe2\x80\xa6DiCreates a new wrapper around an on-chain <code>IERC20</code> contract \xe2\x80\xa60BoCreates a new context with a new database type.CmCreates a new <code>AccountInfo</code> with the given fields.EaCreates a new <em>unchanged</em> <code>EvmStorageSlot</code> for the given value.DhCreates a new legacy analyzed <code>Bytecode</code> with exactly one \xe2\x80\xa6CaCreates a new iterator from a bytecode reference.AnCreates new analyzed bytecode.CfCreate new JumpTable directly from an existing BitVec.BdInstantiates a new opcode from a u8.CgCreates a new EIP-7702 bytecode with the given address.BhWraps an existing buffer as a bit-array.BgConverts a bit-array into its iterator.DfWraps a counter value as a known-good index into an <code>R</code> \xe2\x80\xa6DcWraps a counter value as a known-good tail of an <code>R</code> \xe2\x80\xa6DkWraps a counter value as a known-good position within an <code>R</code> \xe2\x80\xa6DiWraps a selector value as a known-good selection in an <code>R</code> \xe2\x80\xa6BmWraps any <code>R</code> value as a bit-mask.CiWraps a raw memory value as a <code>BitStore</code> type.DiTries to construct a <code>BitPtr</code> from a memory location and a \xe2\x80\xa61BdConstructs a new, empty, bit-vector.CmCreates a new opcode info with the given name and default \xe2\x80\xa6DgRerurns new <code>EthInstructions</code> with custom instruction table.AlCreates new Journaled state.CdCreates new <code>CfgEnv</code> with default values.CcCreate a new EVM instance with a given context, \xe2\x80\xa6CkCreates a new, empty stack. It must be initialized with \xe2\x80\xa6BfCreates new <code>JournalInner</code>.CiCreates a new local context, initcodes are hashes and \xe2\x80\xa6AkCreates new ResultAndState.BhCreate a new builder with default values7BhWraps the given byte array in this type.CfWraps the given byte array in <code>FixedBytes</code>.BgCreates a new empty <code>Bytes</code>.AbCreates a new log.0BfCreates an empty <code>HashMap</code>.DfConstructs a new <code>RandomState</code> that is initialized with \xe2\x80\xa6BiCreates a new <code>DefaultHasher</code>.2BfCreates an empty <code>HashSet</code>.DhConstructs a new <code>FxRandomState</code> that is initialized with \xe2\x80\xa6BfCreate a new map. (Does not allocate.)BfCreate a new set. (Does not allocate.)AgReturns an empty slice.04AeCreates a new buffer.<<AdSeal the inner item.EkInstantiate a new signature from <code>r</code>, <code>s</code>, and <code>v</code> values.BlCreates a new <code>Keccak256</code> hasher.D`Creates a new <code>Unit</code> instance, checking for overflow.BhCreates a new empty <code>String</code>.AlCreates new Journaled state.ClCreates a new instance by calculating the blob gas price \xe2\x80\xa6AlCreate a new empty database.CeCreates a new cache with the given external database.AiCreate new BundleAccount.CjCreates it with new and old values of both Storage and \xe2\x80\xa6AlCreates a new default state.BmCreates a new builder with an empty database.AiCreates builder instance.DnCreates a new <em>unchanged</em> <code>StorageSlot</code> for the given value.AdCreates new reverts.CkCreates a new EIP-3155 tracer with the given output writer.AkCreate a new gas inspector.DjReturns a new <code>StateLoad</code> with the given data and cold load \xe2\x80\xa6BiCreate a new InitialAndFloorGas instance.CoCreates a new <code>Gas</code> struct with the given gas limit.ClCreates a new memory instance that can be shared between \xe2\x80\xa6CeInstantiate a new stack with the default stack limit.AfCreate new interpreterDcReturns a new <code>InterpreterResult</code> with the given values.BjConstructs a new <code>CallOutcome</code>.BlConstructs a new <code>CreateOutcome</code>.DbCreates a new <code>MemoryGas</code> instance with zero memory \xe2\x80\xa6ChCreate new extended bytecode and set the instruction \xe2\x80\xa6CmReturns new precompile output with the given gas used and \xe2\x80\xa6BkReturns the precompiles for the given spec.DbReturns a new instance of the builder from <code>Cow::Owned</code>BeReturns a new instance of the builderAeCreate a new builder.BaCreates a new call trace decoder.ClCreate a new <code>TraceWriter</code> with the given writer.BeCreates a new local trace identifier.ChCreates a new Etherscan identifier with the given clientAnCreates a new, empty instance.DjCreates a new <code>SignaturesIdentifier</code> with the default cache \xe2\x80\xa6CaInstantiates a fuzzed executor given a testrunnerCeInstantiates a fuzzed executor EVM given a testrunnerAnCreate a new executor builder.CmCreates a new <code>Executor</code> with the given arguments.AoInstantiates an invariant test.BcInstantiates an invariant test run.CjReturns the identifier for a Fork from a URL and block \xe2\x80\xa6BaCreates a new instance of this DBCoCreates a new <code>FuzzRunIdentifiedContracts</code> instance.CfReturns a new <code>TargetedContracts</code> instance.CeReturns a new <code>TargetedContract</code> instance.BaCreate a new strategy. #Arguments0DlReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code>BkCreates a new instance of the BlockchainDb.AfCreates a new instanceAkTakes a new state snapshot.BnCreates a new instance of <code>Backend</code>B`Creates a new inspector instanceBkReturns a new instance for the given configBoExtracts the necessary settings from the ConfigCnCreates a new <code>Cheatcodes</code> with the given settings.BdCreate a new Chisel state inspector.BeCreate a new inspector stack builder.AnCreates a new inspector stack.AoReturns the default cheatcodes.CiAssociated public function to create a new Dispatcher \xe2\x80\xa6AiCreate a new ChiselRunnerEfCreate a new <code>ChiselSession</code> with a specified <code>solc</code> version \xe2\x80\xa6CfCreates a new source given a solidity compiler versionAlCreate a new SolidityHelper.CeCreate a new <code>EvmEnv</code> from its components.BlCreate a new hitmap with the given bytecode.BfCreates a new, empty coverage summary.AkCreate a new LCOV reporter.ChAnalyzes contracts in the sources held by the source \xe2\x80\xa6BdCreates a new, empty revert decoder.CbCreates a new test outcome with the given results.CkCreates a new test result starting from test setup results.AfCreate a new instance.CiCreates a factory for deployment of the Contract with \xe2\x80\xa6EbConstructs a new <code>Resolver</code> for the supplied <code>Hir</code> instance.BlCreate a new <code>Lockfile</code> instance.BoCreates a new context with a new database type.CmCreates a new <code>AccountInfo</code> with the given fields.EaCreates a new <em>unchanged</em> <code>EvmStorageSlot</code> for the given value.DgRerurns new <code>EthInstructions</code> with custom instruction table.AlCreates new Journaled state.CdCreates new <code>CfgEnv</code> with default values.CcCreate a new EVM instance with a given context, \xe2\x80\xa6CkCreates a new, empty stack. It must be initialized with \xe2\x80\xa6BfCreates new <code>JournalInner</code>.CiCreates a new local context, initcodes are hashes and \xe2\x80\xa6AkCreates new ResultAndState.BhCreate a new builder with default values7DhCreates a new legacy analyzed <code>Bytecode</code> with exactly one \xe2\x80\xa6CaCreates a new iterator from a bytecode reference.AnCreates new analyzed bytecode.CfCreate new JumpTable directly from an existing BitVec.BdInstantiates a new opcode from a u8.BhWraps an existing buffer as a bit-array.BgConverts a bit-array into its iterator.DfWraps a counter value as a known-good index into an <code>R</code> \xe2\x80\xa6DcWraps a counter value as a known-good tail of an <code>R</code> \xe2\x80\xa6DkWraps a counter value as a known-good position within an <code>R</code> \xe2\x80\xa6DiWraps a selector value as a known-good selection in an <code>R</code> \xe2\x80\xa6BmWraps any <code>R</code> value as a bit-mask.CiWraps a raw memory value as a <code>BitStore</code> type.DiTries to construct a <code>BitPtr</code> from a memory location and a \xe2\x80\xa61BdConstructs a new, empty, bit-vector.CgCreates a new EIP-7702 bytecode with the given address.CmCreates a new opcode info with the given name and default \xe2\x80\xa6BhWraps the given byte array in this type.CfWraps the given byte array in <code>FixedBytes</code>.BgCreates a new empty <code>Bytes</code>.AbCreates a new log.0BfCreates an empty <code>HashMap</code>.DfConstructs a new <code>RandomState</code> that is initialized with \xe2\x80\xa6BiCreates a new <code>DefaultHasher</code>.2BfCreates an empty <code>HashSet</code>.DhConstructs a new <code>FxRandomState</code> that is initialized with \xe2\x80\xa6BfCreate a new map. (Does not allocate.)BfCreate a new set. (Does not allocate.)AgReturns an empty slice.04AeCreates a new buffer.<<AdSeal the inner item.EkInstantiate a new signature from <code>r</code>, <code>s</code>, and <code>v</code> values.BlCreates a new <code>Keccak256</code> hasher.D`Creates a new <code>Unit</code> instance, checking for overflow.BhCreates a new empty <code>String</code>.CkCreates a new EIP-3155 tracer with the given output writer.AkCreate a new gas inspector.AlCreate a new empty database.CeCreates a new cache with the given external database.AiCreate new BundleAccount.CjCreates it with new and old values of both Storage and \xe2\x80\xa6AlCreates a new default state.BmCreates a new builder with an empty database.AiCreates builder instance.DnCreates a new <em>unchanged</em> <code>StorageSlot</code> for the given value.AdCreates new reverts.AlCreates new Journaled state.ClCreates a new instance by calculating the blob gas price \xe2\x80\xa6DjReturns a new <code>StateLoad</code> with the given data and cold load \xe2\x80\xa6BiCreate a new InitialAndFloorGas instance.CoCreates a new <code>Gas</code> struct with the given gas limit.ClCreates a new memory instance that can be shared between \xe2\x80\xa6CeInstantiate a new stack with the default stack limit.AfCreate new interpreterDcReturns a new <code>InterpreterResult</code> with the given values.BjConstructs a new <code>CallOutcome</code>.BlConstructs a new <code>CreateOutcome</code>.DbCreates a new <code>MemoryGas</code> instance with zero memory \xe2\x80\xa6ChCreate new extended bytecode and set the instruction \xe2\x80\xa6CmReturns new precompile output with the given gas used and \xe2\x80\xa6BkReturns the precompiles for the given spec.B`Creates a new inspector instanceBkReturns a new instance for the given configBoExtracts the necessary settings from the ConfigCnCreates a new <code>Cheatcodes</code> with the given settings.BdCreate a new Chisel state inspector.BeCreate a new inspector stack builder.AnCreates a new inspector stack.AoReturns the default cheatcodes.CoCreates a new <code>FuzzRunIdentifiedContracts</code> instance.CfReturns a new <code>TargetedContracts</code> instance.CeReturns a new <code>TargetedContract</code> instance.BaCreate a new strategy. #Arguments0DbReturns a new instance of the builder from <code>Cow::Owned</code>BeReturns a new instance of the builderAeCreate a new builder.BaCreates a new call trace decoder.ClCreate a new <code>TraceWriter</code> with the given writer.BeCreates a new local trace identifier.ChCreates a new Etherscan identifier with the given clientAnCreates a new, empty instance.DjCreates a new <code>SignaturesIdentifier</code> with the default cache \xe2\x80\xa6CaInstantiates a fuzzed executor given a testrunnerCeInstantiates a fuzzed executor EVM given a testrunnerAnCreate a new executor builder.CmCreates a new <code>Executor</code> with the given arguments.AoInstantiates an invariant test.BcInstantiates an invariant test run.DlReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code>BkCreates a new instance of the BlockchainDb.AfCreates a new instanceAkTakes a new state snapshot.BnCreates a new instance of <code>Backend</code>CjReturns the identifier for a Fork from a URL and block \xe2\x80\xa6BaCreates a new instance of this DBAoCreate new instance of builder.B`Create new instance of Document.B`Create a new instance of Parser.BaCreate new instance of ParseItem.AoCreate new instance of Comment.BoCreate new instance of BufWriter from ToString.BhCreate a new transaction from a callbackChBuild a new inline config with an iterator of inline \xe2\x80\xa6CcCreate a new <code>BroadcastReader</code> instance.BfInstantiates <code>LogCountMap</code>.BoExtracts the necessary settings from the ConfigCnCreates a new <code>Cheatcodes</code> with the given settings.AcCreate a new prank.AoReturns the default cheatcodes.CbCreate a new instance of the <code>Handler</code>.CkCreates a new instance by collecting all artifacts with \xe2\x80\xa6CeCreates a new shell (color choice and verbosity), \xe2\x80\xa6BoCreate a new builder with the default settings.AnCreates a new builder instanceBhCreate a new builder with the given URL.BjCreates a new <code>Retry</code> instance.BkCreates a new client with default settings.CbCreates a new (unsigned) transaction for broadcastBiCreates a new parser for the given input.CoCreates a new <code>Display</code> wrapper for the given value.BoCreates a new, empty <code>InlineConfig</code>.DbCreate a new <code>Remappings</code> wrapper with an empty vector.B`Creates a new warnings provider.BhCreates a new fallback profile provider.DiCreates a new <code>GlobMatcher</code> from a <code>globset::Glob</code>.CmCreates a new <code>SkipBuildFilters</code> from multiple \xe2\x80\xa6AgWraps the figment errorAoCreates a new list of endpointsBgCreates a new list of etherscan configsC`Creates a new list of resolved etherscan configsCmCreates anew instance with the given <code>permissions</code>CjReturns a new permission for the path and the given accessCjThe new key replacing the deprecated one if not empty, \xe2\x80\xa6CcCreates fuzz configuration to write failures in \xe2\x80\xa6ChCreates invariant configuration to write failures in \xe2\x80\xa62AoCreates a new debugger builder.AgCreates a new debugger.0AiCreates a new debug node.CeCreate a new <code>EvmEnv</code> from its components.BdCreates a new, empty revert decoder.CmCreates a new <code>Executor</code> with the given arguments.CaInstantiates a fuzzed executor given a testrunnerAnCreate a new executor builder.AoInstantiates an invariant test.BcInstantiates an invariant test run.CeInstantiates a fuzzed executor EVM given a testrunnerCjNew corpus from given call sequence and corpus path to \xe2\x80\xa6B`Creates a new inspector instanceBkReturns a new instance for the given configBoExtracts the necessary settings from the ConfigCnCreates a new <code>Cheatcodes</code> with the given settings.BdCreate a new Chisel state inspector.BeCreate a new inspector stack builder.AnCreates a new inspector stack.DlReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code>BkCreates a new instance of the BlockchainDb.AfCreates a new instanceAkTakes a new state snapshot.BnCreates a new instance of <code>Backend</code>CjReturns the identifier for a Fork from a URL and block \xe2\x80\xa6BaCreates a new instance of this DBBdCreates a new, empty revert decoder.CeCreate a new <code>EvmEnv</code> from its components.8764523CfCreates a new <code>IcPcMap</code> for the given code.CfCreates a new <code>PcIcMap</code> for the given code.BlCreate a new hitmap with the given bytecode.BfCreates a new, empty coverage summary.ChAnalyzes contracts in the sources held by the source \xe2\x80\xa6CoCreates a new <code>FuzzRunIdentifiedContracts</code> instance.CfReturns a new <code>TargetedContracts</code> instance.CeReturns a new <code>TargetedContract</code> instance.AaCreate a new treeBaCreate a new strategy. #Arguments10DbReturns a new instance of the builder from <code>Cow::Owned</code>BeReturns a new instance of the builderClCreate a new <code>TraceWriter</code> with the given writer.BkReturns a new instance for the given configAnCreates a new, empty instance.BeCreates a new local trace identifier.ChCreates a new Etherscan identifier with the given clientDjCreates a new <code>SignaturesIdentifier</code> with the default cache \xe2\x80\xa6AeCreate a new builder.BaCreates a new call trace decoder.AfCreate a new instance.BdCreates a new external test builder.CkCreate a new test project with the given name. The name \xe2\x80\xa6CiCreates a new instance of a Tester for the given contractDgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6BdInverts all the bits in the integer.AoImplements the NOT instruction.210DfReturns the current time as a <code>Duration</code> since the Unix \xe2\x80\xa6AhThe key being deprecated0AoOutput data for the transactionAoThe raw output of the executionAhThe doc\xe2\x80\x99s output path.AnThe path to write bindings to.2CaGets a reference to the underlying stdout writer.Bjpath to where artifacts shut be written to0A`Doc output path.BePath for the generated bindings file.6ChAttempts to remove the trailing bit from the bit-vector.AeDecrements the index.AnRemove the last key-value pairAeRemove the last valueCiRemoves the last character from the string buffer and \xe2\x80\xa6CnRemoves the topmost element from the stack and returns it, \xe2\x80\xa6AoImplements the POP instruction.AnPops one value from the stack.67543210DdRaises self to the power of <code>exp</code>, wrapping around on \xe2\x80\xa6DiRaises self to the power of <code>exp</code>, using exponentiation by \xe2\x80\xa610AjRaw Pointer Implementation0AhSend raw JSON parametersBgPrint the raw RLP encoded block header.BfPrint the raw RLP encoded transaction.CcReturns the raw bytecode with version MAGIC number.mRaw bytecode.AkThe raw result of the call.0BaThe raw result of the deployment.CnIn \xe2\x80\x98check\xe2\x80\x99 and stdin modes, outputs raw formatted code \xe2\x80\xa643221221EhReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</codeoImplements the MOD instruction.0BbImplements the RETURN instruction.0BfGet the commit hash of the dependency.CdCurrent commit hash the submodule is checked out at.CcThe commit in case git is used as dependency sourceEhReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AnPerform a raw JSON-RPC requestAeThe optional RPC URL.000AgRPC API keys utilities.CbRun the <code>anvil</code> command line interface.oStarts the nodeCaRun the <code>cast</code> command-line interface.BhExecutes the transaction by replaying itBfLoad the RPC URL from the config file.AcRun the precompile.BoThe main entry point for transaction execution.0CfRuns the interpreter with the given instruction table.Ckreference: https://eips.ethereum.org/EIPS/eip-152 input \xe2\x80\xa6BdRun kzg point evaluation precompile.CcRun the <code>chisel</code> command line interface.B`Run a contract as a REPL sessionCbRun the <code>forge</code> command line interface.BnRuns the given <code>watchexec::Config</code>.BiExecutes the command to create a contract988765DgRun the <code>verify-bytecode</code> command to verify the bytecode \xe2\x80\xa6ClRun the verify command to submit the contract\xe2\x80\x99s source \xe2\x80\xa60B`Run a specific benchmark by nameCmRuns the given closure in a loop, retrying if it fails up \xe2\x80\xa6nRuns the test.BmEIP-145: Bitwise shifting instructions in EVM0GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa6BiWrites <code>value</code> into the proxy.BeWrites a new value into a single bit.D`Sets all bits governed by the partial-element to <code>1</code>.CbA hash set implemented using <code>IndexMap</code>BoSet memory region at given <code>offset</code>.CnSet a value at given index for the stack, where the top of \xe2\x80\xa6BaSets memory data at given offset.76543210AeSet the global shell.AoImplements the SGT instruction.0::::BfThe signature of the function to call.BaThe signature of the constructor.1111B`The signature of the constructor21BhThe function signature in the format \xe2\x80\xa60CnThe event signature. If none provided then tries to decode \xe2\x80\xa6CnThe error signature. If none provided then tries to decode \xe2\x80\xa62AgThe function signature.CgThe function signature, e.g. transfer(address,uint256).CiThe signature of the function you want to call in the \xe2\x80\xa6AoImplements the SLT instruction.0AiThe original source code.0BcSource content of current contract.Eapath of the source contracts dir, like <code>src</code> or <code>contracts</code>0CaDeclare an expected value from within Rust sourceCeThe intersection of a source flags value with the \xe2\x80\xa6CfAdjusts a bit-pointer downwards in memory. This is \xe2\x80\xa6CbReturns the set difference, cloned into a new set.DmReturns the difference of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa6CnImplements the SUB instruction - subtracts two values from \xe2\x80\xa643210AdThe doc comment tag.0ChOptional tag corresponding to a Git SHA, tag, or branch.0CdThe git tag in case git is used as dependency sourceBaReturns top value from the stack.0Bi<code>const</code> Option <code>?</code>.0AgThe TUI implementation.BlProgress bar with the count of transactions.A`The endpoint urlBkThe URL to a node for fetching remote statelThe RPC URL.01000CfThe url to the git repository corresponding to the \xe2\x80\xa6CiThe RPC endpoint, default value is http://localhost:8545.1AiReturns the RPC endpoint.1AfThe URL to connect to.DfReturns the url this type holds, see <code>RpcEndpoint::resolve</code>AaEtherscan API URLBoThe url from where the dependency was retrieved878AoVar that couldn\xe2\x80\x99t be resolved0CbDynamically-Allocated, Adjustable-Size, Bit Buffer0DfReturns <code>10^self</code>, which is the number of Wei in this unit.0CiThe address for which the implementation will be fetched.CiThe address from which the admin account will be fetched.AeThe account to query.AeThe contract address.0AcThe name to lookup.BfThe account to perform the lookup for.BaThe address to get the nonce for.BdThe address to get the codehash for.BhThe address to get the storage root for.CiA miner that listens for new transactions that are ready.CjIntelligently guess whether to use color output (default).An16-byte fixed byte-array type.0Bl<code>Bits</code> for <code>128</code> bits.110An20-byte fixed byte-array type.Bl<code>Bits</code> for <code>160</code> bits.10An24-byte fixed byte-array type.Bl<code>Bits</code> for <code>192</code> bits.10An28-byte fixed byte-array type.0An32-byte fixed byte-array type.00Bl<code>Bits</code> for <code>256</code> bits.1110Bl<code>Bits</code> for <code>320</code> bits.0Bl<code>Bits</code> for <code>384</code> bits.0Bl<code>Bits</code> for <code>448</code> bits.0An64-byte fixed byte-array type.0Bl<code>Bits</code> for <code>512</code> bits.110Bl<code>Bits</code> for <code>768</code> bits.0BcBase gas cost for basic operations.0BfThe size of this integer type in bits.oNumber of bits.1101BjThe <code>0x1A</code> (\xe2\x80\x9cBYTE\xe2\x80\x9d) opcode.000CgRepresents a number\xe2\x80\x99s radix or base. Currently it \xe2\x80\xa6BiGenerate a rust binding from a given ABI.BkGenerate Rust bindings for smart contracts.DkA newtype wrapper around <code>Uint</code> that restricts operations to \xe2\x80\xa60jBold item.0BjThe <code>0xF1</code> (\xe2\x80\x9cCALL\xe2\x80\x9d) opcode.000BfGas cost per word for copy operations.0CePerform a call on an account without publishing a \xe2\x80\xa6A`Call frame data.AbCall frame result.C`A transaction that calls a contract or transfer.AaOutput of a call.1111Ab<code>CALL</code>.Fl<code>CALL</code>, <code>CALLCODE</code>, <code>DELEGATECALL</code>, <code>STATICCALL</code> instruction \xe2\x80\xa610AjRepresents a regular call.BmSimple call trace, no steps tracing required.AoRepresents a CALL broadcast tx.AgThe account was called.98767777545410321010101032CdA Swiss Army knife for interacting with Ethereum \xe2\x80\xa6CmOnly include necessary providers that are useful for cast \xe2\x80\xa6BgGet the runtime bytecode of a contract.jCode item.0Cjused to mark account as cold. It is used only in local \xe2\x80\xa60CkProvides additional path context for <code>fs::copy</code>.0BjThe <code>0x80</code> (\xe2\x80\x9cDUP1\xe2\x80\x9d) opcode.000BjThe <code>0x81</code> (\xe2\x80\x9cDUP2\xe2\x80\x9d) opcode.000BjThe <code>0x82</code> (\xe2\x80\x9cDUP3\xe2\x80\x9d) opcode.000BjThe <code>0x83</code> (\xe2\x80\x9cDUP4\xe2\x80\x9d) opcode.000BjThe <code>0x84</code> (\xe2\x80\x9cDUP5\xe2\x80\x9d) opcode.000BjThe <code>0x85</code> (\xe2\x80\x9cDUP6\xe2\x80\x9d) opcode.000BjThe <code>0x86</code> (\xe2\x80\x9cDUP7\xe2\x80\x9d) opcode.000BjThe <code>0x87</code> (\xe2\x80\x9cDUP8\xe2\x80\x9d) opcode.000BjThe <code>0x88</code> (\xe2\x80\x9cDUP9\xe2\x80\x9d) opcode.000ClRepresents a code diff. Can have an optional description \xe2\x80\xa6AdThe enum definition.0000000000000000000BeOpen the current session in an editorAgA Solidity enumeration.0AgSource enum definition.011ChSimple evaluation of a command without entering the REPLAhExecutes a shell commandA`Any other error.00ClThis means that it prioritizes transactions based on the \xe2\x80\xa6CnKeep the pool transaction transactions sorted in the order \xe2\x80\xa6BlFind if a selector is present in the projectAaRepresents a forkC`Fork an RPC in the current session Takes &lt;\xe2\x80\xa6111AeRecord the full stackCnSame as <code>Simple</code>, but also tracks memory snapshots.1110110lA fuzz test.AnGwei is equivalent to 1e9 wei.0BbGas cost for high-cost operations.0BnReverted for various reasons and spend all gasBaExecution halted due to an error.10AeAlready hashed input.0BfPrint helpful information about chiselCfHost trait with all methods that are needed by the \xe2\x80\xa6000nHTTP transportCk104-bit signed integer type, consisting of 2, 64-bit limbs.0Ck112-bit signed integer type, consisting of 2, 64-bit limbs.0Ck120-bit signed integer type, consisting of 2, 64-bit limbs.0Ck128-bit signed integer type, consisting of 2, 64-bit limbs.00000Ck136-bit signed integer type, consisting of 3, 64-bit limbs.0Ck144-bit signed integer type, consisting of 3, 64-bit limbs.0Ck152-bit signed integer type, consisting of 3, 64-bit limbs.0Ck160-bit signed integer type, consisting of 3, 64-bit limbs.000Ck168-bit signed integer type, consisting of 3, 64-bit limbs.0Ck176-bit signed integer type, consisting of 3, 64-bit limbs.0Ck184-bit signed integer type, consisting of 3, 64-bit limbs.0Ck192-bit signed integer type, consisting of 3, 64-bit limbs.0Ck200-bit signed integer type, consisting of 4, 64-bit limbs.0Ck208-bit signed integer type, consisting of 4, 64-bit limbs.0Ck216-bit signed integer type, consisting of 4, 64-bit limbs.0Ck224-bit signed integer type, consisting of 4, 64-bit limbs.0Ck232-bit signed integer type, consisting of 4, 64-bit limbs.0Ck240-bit signed integer type, consisting of 4, 64-bit limbs.0Ck248-bit signed integer type, consisting of 4, 64-bit limbs.0Ck256-bit signed integer type, consisting of 4, 64-bit limbs.0AgSigned 256-bit integer.11101Ck512-bit signed integer type, consisting of 8, 64-bit limbs.0CnThe number of bits required to store an index in the range \xe2\x80\xa60AkCreate a new Forge project.AfArbitrary nested data.BoContains an item that needs further processing.00000AjShared Bit-Slice IterationCgAn iterator over the entries of a <code>HashMap</code>.CiAn iterator over the entries of an <code>IndexMap</code>.CgAn iterator over the items of an <code>IndexSet</code>.CeAn iterator over the items of a <code>HashSet</code>.43210BjThe <code>0x56</code> (\xe2\x80\x9cJUMP\xe2\x80\x9d) opcode.000CmUtility cheatcodes that deal with parsing values from and \xe2\x80\xa6000lJSON output.CkCall trace with tracing for JUMP and JUMPDEST opcode steps.00jk256 error0AnKwei is equivalent to 1e3 wei.0CdAn iterator over the keys of a <code>HashMap</code>.CfAn iterator over the keys of an <code>IndexMap</code>.10BjThe <code>0xA0</code> (\xe2\x80\x9cLOG0\xe2\x80\x9d) opcode.000BjThe <code>0xA1</code> (\xe2\x80\x9cLOG1\xe2\x80\x9d) opcode.000BjThe <code>0xA2</code> (\xe2\x80\x9cLOG2\xe2\x80\x9d) opcode.000BjThe <code>0xA3</code> (\xe2\x80\x9cLOG3\xe2\x80\x9d) opcode.000BjThe <code>0xA4</code> (\xe2\x80\x9cLOG4\xe2\x80\x9d) opcode.000AoA value of type <code>L</code>.0AoAn executable line in the code.0BiA Line comment (e.g. <code>// ...</code>)AkCharacter in a line comment2jLink item.0AjLint Solidity source filesCgList all the accounts in the keystore default directoryAhList all cached sessionsBeList selectors from current workspaceDiLoad a previous session from cache Takes: <code>&lt;session-id&gt;</code>AeLoad a cached sessionAoGet logs by signature or topic.BdPrint the explicit uint256 or int2560BeLeast-Significant-First Bit Traversal000ClA mask over all bits that can be used as an index within \xe2\x80\xa6AkBit mask for the last limb.10AnMwei is equivalent to 1e6 wei.0AhMines a series of blocksBdMost-Significant-First Bit Traversal000AiA miner that does nothingAfno parameters providedBiEVM didn\xe2\x80\x99t interacted with this account0AnDon\xe2\x80\x99t record stack snapshotsAaDisabled tracing.1AmAllows modification of state.BkNo caller modification is currently active.4431032Ajcharacter not in a commentAnNot currently in quoted string23322AnDon\xe2\x80\x99t include any providers.AfDon\xe2\x80\x99t cache anythingBaFS access is <em>not</em> allowed8587CnAttempted to construct a bit-pointer with the null element \xe2\x80\xa6AlA null pointer was provided.10CmProvides additional path context for <code>File::open</code>.0AoPwei is equivalent to 1e15 wei.0BgNon-canoncalized path provided via CLI.AcPositive value sign0BjTransaction pool that performs validation.BjDisallows modification or access of state.000mQuit the REPLBeDefault number of runs for benchmarksCkProvides additional path context for <code>fs::read</code>.0Bgread from fs (<code>vm.readFile</code>)AgOnly reading is allowedAlForwards error from the revmBjThe <code>0x05</code> (\xe2\x80\x9cSDIV\xe2\x80\x9d) opcode.000BnAllow instances to be constructed generically.0BjThe <code>0x07</code> (\xe2\x80\x9cSMOD\xe2\x80\x9d) opcode.000BjThe <code>0x00</code> (\xe2\x80\x9cSTOP\xe2\x80\x9d) opcode.000BhThe cheatcode is safe to use in scripts.000AlMemory size stayed the same.0DlSave the current session to the cache Takes: <code>&lt;session-id&gt;</code>AmSign a message or typed data.CgEnum to represent the sign of a 256-bit signed integer.CfRepresents the sign of a 256-bit signed integer value.10DdError caused which occurred due to calling the <code>skip</code> \xe2\x80\xa60AgEscape <code>%%</code>.1AeRevert to this value.00000CkSpecification id type, in requires to be convertible to \xe2\x80\xa60000000CgStop <code>state::bytecode::opcode::STOP</code> opcode.BfEncountered a <code>STOP</code> opcode10AoTwei is equivalent to 1e12 wei.0Bj<code>forge test</code> execution context.0BgScaffolds test file for given contract.AjRun the project\xe2\x80\x99s tests.2222222AbPlain text output.CmUtility cheatcodes that deal with parsing values from and \xe2\x80\xa6000BcAn error thrown during toml parsingCnDisplay a tree visualization of the project\xe2\x80\x99s dependency \xe2\x80\xa6AgSource type definition.0Cj104-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Cj112-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Cj120-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa60Cj128-bit unsigned integer type, consisting of 2, 64-bit \xe2\x80\xa600Dj<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.1110Cj136-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj144-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj152-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj160-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Bl<code>Uint</code> for <code>160</code> bits.110Cj168-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj176-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj184-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa60Cj192-bit unsigned integer type, consisting of 3, 64-bit \xe2\x80\xa6Bl<code>Uint</code> for <code>192</code> bits.10Cj200-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj208-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj216-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj224-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj232-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj240-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj248-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60Cj256-bit unsigned integer type, consisting of 4, 64-bit \xe2\x80\xa60AiUnsigned 256-bit integer.1Bl<code>Uint</code> for <code>256</code> bits.22120mA U256 value.Ab<code>U256</code>.1Bl<code>Uint</code> for <code>320</code> bits.000Bl<code>Uint</code> for <code>384</code> bits.000Bl<code>Uint</code> for <code>448</code> bits.000Cj512-bit unsigned integer type, consisting of 8, 64-bit \xe2\x80\xa60Bl<code>Uint</code> for <code>512</code> bits.110Bl<code>Uint</code> for <code>768</code> bits.0BoThe ring of numbers modulo $2^{\\mathtt{BITS}}$.000C`Ethereum unit. Always less than <code>77</code>.lA unit test.1B`Disallows modification of state.BcView the source of a cached session111BnA bit-array with all bits initialized to zero.BiAn empty bit-mask with every bit cleared.AbThe zero constant.0000AdArray of Zero bytes.0CmThe value zero. This is the only value that exists in all \xe2\x80\xa611BfZero (additive identity) of this type.1BnGas cost for operations that consume zero gas.654444433233120oZero value sign0CmThe ordering of bits within an <code>A::Store</code> element.000AlAddress to which to call to.AgThe wallet\xe2\x80\x99s address.01000BbAddress of the invariant asserter.12A`Blake2 algorithm0BfThe arguments of the function to call.BaThe arguments of the constructor.1111AeConstructor arguments2AjThe constructor arguments.AhThe arguments to encode.AnThe arguments of the function.AgThe function arguments.C`Pretty formatted args used to call the function.AjReturns the CLI arguments.12BiArguments to pass to the script function.23BkAdd any number of arguments to the command.BmAdds multiple arguments to the forge command.CnEnables the styling <code>Attribute</code> <code>value</codelEIP-7702 authorization list.0BbToken to be used as authentication0CeConverts a sequence of string literals containing \xe2\x80\xa60000000BhSets whether to bail on compiler errors.BcWhether to bail on compiler errors.CaReturns the underlying base. Defaults to Decimal.AfThe base to format to.AlThe number of bits to shift.0AnGet the underlying bits value.AlBit-Slice Region Constructor0CkReturn the least number of bits needed to represent the \xe2\x80\xa62110AjBit size of int (e.g. 256)AkBit size of uint (e.g. 256)10C`Blob (EIP-4844) related functions and types. \xe2\x80\xa60BaSend a EIP-4844 blob transaction.0EiReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</codekAll fully-used elements in the bit-slice\xe2\x80\x99s underlying \xe2\x80\xa6CmAny bits that wholly-fill elements in the interior of the \xe2\x80\xa610EoReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</codemPath to user provided <code>book.toml</code>.DjReturns a specific byte. The byte at index <code>0</code> is the least \xe2\x80\xa60B`Implements the BYTE instruction.110AkCommonly used calculations.CiExecutes the TransactionRequest without writing to the DBAkSends <code>eth_call</code>BiCall contract, returning the output data.BoMakes a read-only call to the specified addressCgCalled whenever a call to a contract is about to start.B`Set the transaction kind to call1B`Implements the CALL instruction.CmPerforms a call to an account on the current state of the \xe2\x80\xa6CmTracks the first call with non-zero calldata that targets \xe2\x80\xa6AbExecutes the call.545312AaExecutes the call32B`Data of a single fuzz test case.000ClCast is a Swiss Army knife for interacting with Ethereum \xe2\x80\xa6DbCasts to a <code>BitPtr</code> with a different storage parameter.0BjReturns the error code as <code>i64</code>gExampleAeBytecode of contract.BgThe bytecode of the contract to deploy.AhThe bytecode of contractCfThe initialization bytecode of the contract to deploy.Ch<code>Bytecode</code> data associated with this account.CiReturns account code bytes and if address is cold loaded.001000AfFormatted code string.0AlBit-wise <code>memcpy</code>CjCopies elements from one part of the memory to another \xe2\x80\xa6BnCopies memory data from source to destination.210CmCopies arbitrary storage value from source address to the \xe2\x80\xa6DbReturns the complementary error variant for <code>fs::copy</code>.BfWrapper for <code>std::fs::copy</code>CmCalculate the cost of a transaction using the network gas \xe2\x80\xa6AoReturns the crab mainnet chain.mCurrent value0EiReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CmRaw hex-encoded data for the transaction. Used instead of \xe2\x80\xa6BeTreat the message as JSON typed data.AhThe data to concatenate.AgThe ABI-encoded string.AiThe event data to decode.AiThe error data to decode.AaThe data to hash.AhThe wrapped data buffer.0CaFrame-specific data (Call, Create, or EOFCreate).AkThe data of the transactionC`Returns the output data of the execution output.AhSet the transaction data2mReturned dataoThe plain data.mThe log data.BkReturns a reference to the underlying data.213CbReturns a reference to the underlying data buffer.4CeThe calldata/input, or the init code for contract \xe2\x80\xa6nReturns the DBBcReturns the raw data of this error.BiInput data provided to the CREATE or CALLAhThe raw data of the log.0=<;:<9>>87687959210043CkMap of benchmark_name -&gt; version -&gt; repo -&gt; resultCkThe error data. Always a valid pointer, and never modified.32240AdReturn data or error433433643367CkA map of the dependencies keyed by relative path to the \xe2\x80\xa60BfSort results by gas used (descending).CgCompare the set of tests with an existing gas snapshot.CbOutput a diff against a pre-existing gas snapshot.ChThe actual natspec comment, without slashes or block \xe2\x80\xa60AhTUI draw implementation.CgDraws the TUI layout and subcomponents to the given \xe2\x80\xa6CnWhether this was constructed from an owned byte vec, which \xe2\x80\xa60BaDumps all debugger steps to file.0BcDumps debugger data to a JSON file.AfBit Storage Calculator0CdHelper method to emit diagnostics easily from passesEdSet the environment variable <code>k</code> to value <code>v</code> for the command.CiAdds multiple environment variables to the forge command.CnReturns the command\xe2\x80\x99s output if execution is successful, \xe2\x80\xa6BbExit execution of a function call.00AhThe expression to mutateBoCreates a failed test result with given reason.C`The foldhash implementation optimized for speed.0CmReturns the <code>FeeManager</code> that manages fee/pricingsAbContains fee data.CcDeclare an expected value for an assert from a fileBeFills the bit-slice with a given bit.0CnFinds the next AST item which a span that begins after the \xe2\x80\xa6CnFinds the next HIR item which a span that begins after the \xe2\x80\xa6AiFire the signal manually.DkConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.0BfSupport for forking off another clientCkThis is set if this is currently forked off another client.CbReturn whether this configuration implies forking.BgIf true, tests are run in a subprocess.AiThe fork to use at launch02121AoReturns the argument unchanged.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AeAddress of the sender1111111111111111111111111111111111111111111111111111111111111111111111111111BiThe Signer to filter the transactions by.222222222222222AnThe sender of the transaction.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333BiAddress of account that sent the balance.4004444CmConverts a fixed-width unsigned integer into a fixed byte \xe2\x80\xa6005000000000000000000000005CkCreates a <code>TxKind::Call</code> with the given address.EmCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> \xe2\x80\xa6777777777DlConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.8888888888888888888888888888hExamples099999999999999999999999999999999DdConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.:::::::::::::::CkConverts a fixed byte array into a fixed-width unsigned \xe2\x80\xa60000;CaConstruct a new <code>Uint</code> from the value.111<<<<<CcConstruct a new <code>Signed</code> from the value.2222=2222==============CkCompute a Lehmer update matrix from two <code>Uint</code>s.>>>CcFormats the number into the specified base. See \xe2\x80\xa6ClConverts a <code>&amp;str</code> into a <code>String</code>.D`Converts a <code>&amp;mut str</code> into a <code>String</code>.CoConverts a <code>&amp;String</code> into a <code>String</code>.EcConverts the given boxed <code>str</code> slice to a <code>String</code>. It is \xe2\x80\xa6ClConverts a clone-on-write string to an owned instance of \xe2\x80\xa6CoAllocates an owned <code>String</code> from a single character.AoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000BiAddress of account that sent the balance.11111111ChConverts a <code>Log</code> into a <code>CallLog</codemConverts a fixed-width unsigned integer into a fixed byte \xe2\x80\xa6000000000000030000000000003EmCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> \xe2\x80\xa6CkCreates a <code>TxKind::Call</code> with the given address.555555555DlConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.6666666666666666666666666666hExamples077777777777777777777777777777777DdConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.888888888888888CkConverts a fixed byte array into a fixed-width unsigned \xe2\x80\xa60CaConstruct a new <code>Uint</code> from the value.:111111:::::1111111CcConstruct a new <code>Signed</code> from the value.2;;;;;;;;;;;;;;;;CkCompute a Lehmer update matrix from two <code>Uint</code>s.<<D`Converts a <code>&amp;mut str</code> into a <code>String</code>.CoConverts a <code>&amp;String</code> into a <code>String</code>.EcConverts the given boxed <code>str</code> slice to a <code>String</code>. It is \xe2\x80\xa6ClConverts a clone-on-write string to an owned instance of \xe2\x80\xa6CoAllocates an owned <code>String</code> from a single character.AoReturns the argument unchanged.ClConverts a <code>&amp;str</code> into a <code>String</code>.111BiAddress of account that sent the balancehConverts a <code>Log</code> into a <code>CallLog</code>.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330333333333333333333333333333333333333333333333333333333333333333333333AcThe sender account.44BbThe Solidity function declaration.0AaFunction to call.11CkResets the inspector to its initial state of Self::new. \xe2\x80\xa6000CmFuzzes the provided function, assuming it is available at \xe2\x80\xa60AoConfiguration for fuzz testing.AnConfiguration for fuzz testing2BgReturns the <code>globset::Glob</code>.BkHalt the interpreter with the given result.0BeReturns the hash for BlockNumberOrTagBfreturns the header hash of given blockAjHash of the imported blockBethe hash of the submitted transactionBdReturns the hash of this transaction1BfHash of the transaction that timed outBcReturns the hash of the transactionBdReturns the hash of the transaction.Dehash of <code>transaction</code>, so it can easily be reused with \xe2\x80\xa6AcBit-Pointer HashingmGet the hash.AjReturns the bytecode hash.CmHash precompiles, it contains SHA-256 and RIPEMD-160 hash \xe2\x80\xa63210BcNumber of blobs in the transaction.0ChGets the starting index of the live bits in the element.CnThe first element in the bit-slice\xe2\x80\x99s underlying storage, \xe2\x80\xa6CiAny bits that partially-fill the first element of the \xe2\x80\xa6210DgIncrease the hit counter by <code>hits</code> for the given program \xe2\x80\xa6BfThe number of times this item was hit.1010BbThe host the server will listen onBdThe hosts the server will listen on.1CdHost interface for external blockchain state access.CjReference to the host interface for accessing external \xe2\x80\xa6CiHost environment interactions (SLOAD, SSTORE, LOG, etc.).12101BbSigned 256-bit integer operations.0CaHandler that can get current storage related dataAhBalance, nonce, and codeAoReturns the opcode information.BkReturns account info if the account exists.AjBasic account information.AlCurrent account information.AdAccount information.BgAccount information, if account exists.210210365432103210210DiInitialize the genesis block with the given <code>genesis.json</code> \xe2\x80\xa6BnBuild solar session based on the linter configAnInitialize the global options.BaCalls <code>U::from(self)</code item.CiReturns an iterator over all the program counters and \xe2\x80\xa6BfYield a set of contained flags values.CdProduces an iterator over each bit in the bit-slice.BfBorrow the inner value as an iterator.CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa6CnReturn an iterator over the key-value pairs of the map, in \xe2\x80\xa6CkReturn an iterator over the values of the set, in their \xe2\x80\xa6CjReturn an iterator over the key-value pairs of the map \xe2\x80\xa6CdReturn an iterator over the values of the set slice.CmAn iterator visiting all elements in arbitrary order. The \xe2\x80\xa69BfReturns an iterator over the lockfile.978654321:AfOutput in JSON format.CkActivates the linter\xe2\x80\x99s JSON formatter (rustc-compatible).C`Implementations of <code>Json</code> cheatcodes.AlFormat log messages as JSON.0B`Implements the JUMP instruction.0Dck256 implementation of <code>ecrecover</code>. More about it in \xe2\x80\xa60CiAn iterator visiting all keys in arbitrary order. The \xe2\x80\xa6CkReturn an iterator over the keys of the map, in their orderCbReturn an iterator over the keys of the map slice.210BcHolds mapping key (slots =&gt; key)BhReturns what kind of transaction this isAgThe coverage item kind.BkTransaction kind. It can be Call or Create.BbThe destination of the transactionAhSet the transaction kind122BmReturns the kind of call the trace belongs toAaThe kind of call.AoReturns the kind of this error.CgThe kind of account access that determines what the \xe2\x80\xa67AjWhat kind of test this was7656772143AlThe type of expected revert.2322A`Dependency kind.AoReturns the kind of this chain.oThe inner error0AiThe kind of call this is.06=98DkGets a reference to the last bit of the bit-slice, or <code>None</code> \xe2\x80\xa6AkGet the last key-value pairAbGet the last valueAlGet the last key-value pair.AcGet the last value.AeGet the last FuzzCase5432100DbDestroys the <code>BitVec</code> handle without destroying the \xe2\x80\xa6CiDeliberately leaks the allocated memory, returning an \xe2\x80\xa6DcConsumes and leaks the <code>String</code>, returning a mutable \xe2\x80\xa6210ElConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.0AoReturns the Lens mainnet chain.Dkall library folders to include, <code>lib</code>, <code>node_modules</code>0DjThe line the natspec appears, in the form <code>row:col:length</code>, \xe2\x80\xa60CmUses provided sender address to compute library addresses \xe2\x80\xa6ChLinks contracts. Uses CREATE2 linking when possible, \xe2\x80\xa6BjLinks given artifact with given libraries.ClSpecifies which lints to run based on their ID (e.g., \xe2\x80\x9c\xe2\x80\xa6DiConfiguration specific to the <code>forge lint</code> command and the \xe2\x80\xa6BiConfiguration for <code>forge lint</code>AhLists all matching testsBcList tests instead of running them.CmReturns all matching tests grouped by contract grouped by \xe2\x80\xa6DhRecursively formats a comma-separated list of <code>DynSolValue</code>s.DcLoads the <code>Genesis</code> object from the given json file pathoInteger Loading0CmLoads the value from memory, allowing for the possibility \xe2\x80\xa6AlLoads the cache from a file.CkLoads a specific ChiselSession from the specified cache \xe2\x80\xa63321CcLoads the sequences for the multi chain deployment.CbLoads The sequence for the corresponding json fileCiLoads the <code>Config</code> from the current directory.4CiReturns the base 2 logarithm of the number, rounded down.0BhReturns the logs according to the filterBjReturns logs matching given filter object.lEmitted logsClReturns the logs if execution is successful, or an empty \xe2\x80\xa6B`Logs emitted by the transaction.22ChAll logs that were committed via DatabaseCommit::commit.0AnGet all logs from the journal.AiRecorded logs, if enabledB`The logs emitted during the callB`logs of a single fuzz test case.D`Any captured &amp; parsed as strings logs along the test\xe2\x80\x99s \xe2\x80\xa68AlSet whether to collect logs.DbThe collected logs. Includes both <code>LOG</code> opcodes and \xe2\x80\xa6BaWhether logs should be collected.A`Transaction logs4AnThe logs emitted during setup.=<;==9::4325876=76632342=CnEvent with signature <code>logs(bytes)</code> and selector \xe2\x80\xa600>69AkRemoves the required markerElReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DdComputes the bit selector for <code>self</code> as an accessor mask.111011CoComputes a bit-mask for <code>self</code>. This is a type-cast.2222222222222222222222222222222222222222222222222CgProduces a multi-bit selection mask from a range of \xe2\x80\xa603333BkGets the bit-mask over all accessible bits.444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444ChMask to apply to the highest limb to get the correct \xe2\x80\xanReturns the mean of the slice.B`Returns the Env related metadata000BiThe mode this miner currently operates inAoReturns the mode mainnet chain.BdReturns variant as <code>str</code>.AiThe name of the function.BlThe name to use for the generated interface.BlThe alias (or name) of the wallet to remove.AhReturns the opcode name.BaString identifiers for hardforks.AgThe decoded event name.AfThe name of the error.AfThe name of the event.AeThe name of the enum.AhThe name of the variant.AgThe name of the struct.AfThe name of the field.oThe chain name.AiThe name of the contract.=AnName of the struct definition.1AoGet the name of the dependency.<;9876543:BhReturns the identifier of the parameter.4AmThe name of the gas snapshot.;:9876;:987655AjThe name of the dependencyCnReturns the name of the dependency, prioritizing the alias \xe2\x80\xa61nContract name.BfReturns the contract name if provided.AdName of the contract2BfReturns the name of the function kind.AeThe name of the chainAjThe name of the parameter.=AiThe name of the function.AgThe decoded event name.CfWraps the cache in a CacheDB, creating a nested cache.0CmIncrements an index counter, wrapping at the back edge of \xe2\x80\xa6CdGets the next call. Random if replay is not set. \xe2\x80\xa610BkHelper to cycle through the active buffers.1BiReturns the next item in the list to use.BjReturns a config with everything disabled.0BeReturns a non permission for the path11AjBit-Pointer Sentinel Value0CbOpen the documentation in a browser after serving.BnSet whether to open the browser after serving.DdReturns the complementary error variant for <code>File::open</code>.BlWrapper for <code>std::fs::File::open</code>BcHow the fork was initially created.ClMacro for optional try - returns early if the expression \xe2\x80\xa60AeBn128 pair precompile0AfThe path to the socketBaThe path of blob data to be sent.0CmIf provided, then keypair will be written to an encrypted \xe2\x80\xa6AfThe path of the entry.CjThe path to the source file that contains the contract \xe2\x80\xa6CmThe contract file you want to test, it\xe2\x80\x99s a shortcut for \xe2\x80\xa6CbPath to the file containing the struct definition.CmThe path to the project root where this mutant (tries to) \xe2\x80\xa64CiThe contract you want to run. Either the file path or \xe2\x80\xa6555AoRelative path to the submodule.CbReturns the path to the contract file if provided.AhPath of the source file.BaThe Vyper instance to use if any.DjThe path to source code (e.g. <code>tree/main/packages/contracts</code>\xe2\x80\xa6BaReturns the path of the contract.2BkThe targeted path guarded by the permissionAiThe path of the TOML file00000=CjReturns the current opcode without advancing the iterator.CkPeek a value at given index for the stack, where the top of10Cmpolls the Pool and returns those transactions that should \xe2\x80\xa60ClReturns all the logs since the last time this filter was \xe2\x80\xa6AoTransaction Pool implementationAdThe transaction poolBeThe pool that holds all transactions.BjPops <code>N</code> values from the stack.ClPops n values from the stack. Fails the instruction if n \xe2\x80\xa6AjPops value from the stack.210Ajport to use for the serverAiPort number to listen on.1AoPort for serving documentation.CnDecrements an index counter, wrapping at the front edge of \xe2\x80\xa60BcAppends a single bit to the vector.AeIncrements the index.DkAppends the given <code>char</code> to the end of this <code>String</code>.B`Push a new value onto the stack.DjPushes a <code>B256</code> value onto the stack. Fails the instruction \xe2\x80\xa6BiImplements the PUSH1-PUSH32 instructions.AkPushes values to the stack.5643210CnPush an element to the remappings vector, but only if it\xe2\x80\x99\xe2\x80\xa6BjLoads the snapshot file for the given hashoSingle-Bit ReadBfReads the bit from <code>*self</code>.BiLoads the lockfile from the project root.21CdRead all broadcast files in the broadcast directory.CbReads bytes from <code>stdin</code> into a String.DbReturns the complementary error variant for <code>fs::read</code>.BgWrapper for <code>std::fs::read</code>.BoReturns a new read-only permission for the pathBlThe read buffer kind and access information.CiLocks this lock with shared read access, blocking the \xe2\x80\xa6DdComputes the floor of the <code>degree</code>-th root of the number.lProject root0BiThe root directory of the cloned project.AbThe root directoryAjThe project\xe2\x80\x99s root path.0BfThe root directory of the new project.111111544A`The project rootAaThe project root.010033B`Get the root path of the project7744CjThe root path where the config detection started from, \xe2\x80\xa6Djthe root path used to turn an absolute <code>Remapping</code>, as we\xe2\x80\x99\xe2\x80\xa609CbRoot of the project, used to determine whether \xe2\x80\xa6CcReturns the root path of the project\xe2\x80\x99s workspace.CgThe number of test cases that must execute for each \xe2\x80\xa6CkThe number of runs that must execute for each invariant \xe2\x80\xa610ClSalt to be used for the contract deployment. This option \xe2\x80\xa6BiThe salt for CREATE2 address computation.dSalt0000000Cg<code>salt</code> (if any) used when creating contract.AjSaves the cache to a file.BcSaves the cache to the file system.10CiSaves the transactions as file if it\xe2\x80\x99s a standalone \xe2\x80\xa60CbSaves arbitrary storage value for a given address:32B`Implements the SDIV instruction.0mGet the hash.0ClThe random number generator\xe2\x80\x99s seed, used to initialize \xe2\x80\xa6BdOptional seed for the RNG algorithm.00000BkOptional seed for the fuzzing RNG algorithm01BlSends a transaction to the specified addressCmReturns Keccak-256 (not the standardized SHA3-256) of the \xe2\x80\xa6AeReturns the signatureCiThe sign method calculates an Ethereum specific signatureAiReturns the sign of self.0ChCalculates a heuristic for the in-memory size of the \xe2\x80\xa60CiCalculates a heuristic for the in-memory size of this \xe2\x80\xa6AdReturns memory size.2210BnSkip files that match the given regex pattern.CiSkip building files whose names contain the given filter.0Aeglob patterns to skipCnThe storage slot number. If not provided, it gets the full \xe2\x80\xa6A`The slot number.AkThe slot that was accessed.00000CmMakes sure a transaction is sent, only after its previous \xe2\x80\xa6B`Implements the SMOD instruction.0BaOutput file for the gas snapshot.AoReturns the solc version to useAmThe solidity compiler versionDhTests if at least one bit is set to <code>1</code>, and at least one \xe2\x80\xa60CbSort the set\xe2\x80\x99s values by their default ordering.CaSorts account inside transition by their address.10AiThe span of the contract.0CcCurrent spec. None means that spec was not set yet.A`Specification idBlSpecification for EVM represent the hardforkCnThe spec ID for the EVM. Spec is required for some journal \xe2\x80\xa621002203210210022000BgCalled on each step of the interpreter.0AgSets the remaining gas.CgExecutes the instruction at the current instruction \xe2\x80\xa6EaHandles <code>REVERT</code> and <code>EXTCODESIZE</code> opcodes for diagnostics.332100BmStop opcode. This opcode halts the execution.0AgStop the gas recording.hBit SwapBdSwaps the bit values of two proxies.BhSwaps the bits at two mutable locations.BhExchanges the bit values at two indices.DeSwaps the topmost value with the <code>N</code>th value from the top.BiImplements the SWAP1-SWAP16 instructions.543210ChSync the foundry.lock file with the current state of \xe2\x80\xa6CfGets the ending index of the live bits in the element.CmThe last element in the bit-slice\xe2\x80\x99s underlying storage, \xe2\x80\xa6ChAny bits that partially-fill the last element of the \xe2\x80\xa6210CmRemoves and returns the value in the set, if any, that is \xe2\x80\xa60DiTake the contents of this <code>TransitionState</code> and replace it \xe2\x80\xa6110BaThe contract-level configuration.BkThe base configuration for the test runner.1BaThe function-level configuration.nterminal utilsBnTests if a mask contains a given selector bit.B`All test arguments are supportedDeExecutes <em>all</em> tests that match the given <code>filter</code>.2CcImplementations of <code>Testing</code> cheatcodes.Adpath of the test dirAdThe text to convert.DjThaw a previously-frozen type, removing its <code>Frozen</code> marker \xe2\x80\xa60AfManages the block timeCoReturns the <code>TimeManager</code> responsible for timestampsBkProvides time related info, like timestamp.C`Implementations of <code>Toml</code> cheatcodes.AlReturns the transaction typeBmThe integer type to get the maximum value of.BmThe integer type to get the minimum value of.CfThe unsigned integer type to get the maximum value of.BjThe unit to convert to (ether, gwei, wei).AgThe unit to convert to.AfThe unit to format to.BlThe unit to convert from (ether, gwei, wei).0CkReturns the final amount of gas used by subtracting the \xe2\x80\xa6CmFlag to know if a call has been overridden. Don\xe2\x80\x99t allow \xe2\x80\xa610CeWhether the prank has been used yet (false if unused)11AaBit View Adapters0AdCall the waker againDhPrints an amber \xe2\x80\x98warning\xe2\x80\x99 message. Use the <code>sh_warn!</code> \xe2\x80\xa6CjRemoves all files and dirs inside the project\xe2\x80\x99s root dirClReturns the hash of the current block, the seedHash, and \xe2\x80\xa6ElReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</codeoAll values zeroB`Fetch the EIP-1967 admin accountDcA sibling <code>BitStore</code> implementor that is known to be \xe2\x80\xa6000BgA fast local Ethereum development node.CkOnly include necessary providers that are useful for anvil.AgAn array of JSON valuesf(type)CeA trait for formatting a parse unit as documentation.0CgCheck if two ParseTrees are equal ignoring location \xe2\x80\xa60Ao128-byte fixed byte-array type.Bm<code>Bits</code> for <code>1024</code> bits.10Ao256-byte fixed byte-array type.Bm<code>Bits</code> for <code>2048</code> bits.10Bm<code>Bits</code> for <code>4096</code> bits.0CjThe size of this integer type in bytes. Note that some \xe2\x80\xa60BfThe size of this integer type in bits.110CfBasic OOG error. Not enough gas to execute the opcode.0Aibatch of several requestsAjbatch of several responsesAjBlock number to fork from.0AaAn Ethereum BlockAnGet information about a block.kBlock type.00CgTrait for retrieving block information required for \xe2\x80\xa6jBlock type1010222101010BmA Block comment (e.g. <code>/* ... */</code>)AlCharacter in a block commentCjRepresents a code block. Can have an optional description.AoEthereum 256 byte bloom filter.0BeStops retrying operation immediately.BfBuild the project\xe2\x80\x99s smart contracts.DeWrapper type around <code>bytes::Bytes</code> to support \xe2\x80\x9c0x\xe2\x80\x9d \xe2\x80\xa60AgBytes of the call data.0BhA raw bytes error. Does not get encoded.22110CcAdd underscore as separator between byte boundaries110CkA cache used in CacheDB. Its kept separate so it can be \xe2\x80\xa60CeCache project selectors (enables trace with local \xe2\x80\xa6AiManage the Foundry cache.22BcContent of the foundry cache folderBkGet the symbolic name of the current chain.jChain type00AoInformation about a blockchain.1110000CmEither a known <code>NamedChain</code> or a EIP-155 chain ID.1CgHolds information about a non-whitespace-splittable \xe2\x80\xa6CeCleans cached data from the global foundry directory.CaRemove the build artifacts and cache directories.B`Clear the current session sourceB`Clone a contract from Etherscan.AnUse comma as decimal separator0BbA basic <code>const</code> marker.0BcThe exact number of calls expected.BgDatabase boxed with a lifetime and Send00000BkThe <code>0x89</code> (\xe2\x80\x9cDUP10\xe2\x80\x9d) opcode.000BkThe <code>0x8A</code> (\xe2\x80\x9cDUP11\xe2\x80\x9d) opcode.000BkThe <code>0x8B</code> (\xe2\x80\x9cDUP12\xe2\x80\x9d) opcode.000BkThe <code>0x8C</code> (\xe2\x80\x9cDUP13\xe2\x80\x9d) opcode.000BkThe <code>0x8D</code> (\xe2\x80\x9cDUP14\xe2\x80\x9d) opcode.000BkThe <code>0x8E</code> (\xe2\x80\x9cDUP15\xe2\x80\x9d) opcode.000BkThe <code>0x8F</code> (\xe2\x80\x9cDUP16\xe2\x80\x9d) opcode.000BgCall trace with complete steps tracing.nDebug category11AbDraining IterationCoA draining iterator over the entries of a <code>HashMap</code>.DaA draining iterator over the entries of an <code>IndexMap</code>.CoA draining iterator over the items of an <code>IndexSet</code>.CmA draining iterator over the items of a <code>HashSet</code>.43210CjThe canonical empty range. All ranges with zero length \xe2\x80\xa6BoAn empty bit-vector with no backing allocation.10AlThe custom error definition.0000B`Ether is equivalent to 1e18 wei.0AkNo input data (empty frame)000BgA write object that ignores all output.ClA view into a single entry in a map, which may either be \xe2\x80\xa60DiEntry for an existing key-value pair in an <code>IndexMap</code> or a \xe2\x80\xa6ClA view into a single entry in a set, which may either be \xe2\x80\xa62210jError typeAhThe database error type.01BhThe error type returned by this handler.0211DeError type for when <code>TryDatabaseCommit::try_commit</code> fails.220022AkError thrown by cheatcodes.AhA Solidity custom error.544533542442424410AhSource error definition.02211CkA custom error selector. Behaves the same as a function \xe2\x80\xa6AaA Solidity event.0AhSource event definition.011AbAn event selector.CiA trait that integrates context, instruction set, and \xe2\x80\xa6000BgFatal error with a custom error message000Db<code>HashMap</code> optimized for hashing fixed-size byte arrays.0Db<code>HashSet</code> optimized for hashing fixed-size byte arrays.0CjFetch an interface of a verified contract on Etherscan \xe2\x80\xa6CgBuild, test, fuzz, debug and deploy Solidity contracts.AmThe type containing the frame000CiCheatcode groups. Initially derived and modified from \xe2\x80\xa6000AeA guess at the width.CeModule containing a contract\xe2\x80\x99s types and functions.00BdThe output type of immutable access.0CcCompute the storage slot for an entry in a mapping.AoInput data implementation type.000BkThe <code>0x57</code> (\xe2\x80\x9cJUMPI\xe2\x80\x9d) opcode.000BhTrait for Interpreter to be able to jump0nA known width.BnThe size of this integer type in 64-bit limbs.000AbLocal context type00000BkPath to an existing local solc installationCgWrapper around local wallet. e.g. private key, mnemonicBkThe <code>0x5E</code> (\xe2\x80\x9cMCOPY\xe2\x80\x9d) opcode.000CkParis/Merge hard fork Activated at block 15537394 (TTD: \xe2\x80\xa6BnString identifier for the Paris/Merge hardfork10BkThe <code>0x51</code> (\xe2\x80\x9cMLOAD\xe2\x80\x9d) opcode.000BkThe <code>0x59</code> (\xe2\x80\x9cMSIZE\xe2\x80\x9d) opcode.000BjIn-memory <code>Database</code> for Anvil.00000AcNegative value sign0BnA miner that uses both Auto and FixedBlockTimeBkCode before /* foo */ and after the commentAjAlways use multiline block0AkForce disable color output.BlNot a terminal, or could not determine size.AmGet the nonce for an account.BfOsaka hard fork Activated at block TBDBhString identifier for the Osaka hardforkBnOsaka spec added changes to modexp precompile:Cd<code>modexp</code> precompile with OSAKA gas rules.3210BnOsaka: https://eips.ethereum.org/EIPS/eip-7607BbCatch-all variant for other errors000CkAny other error thrown when constructing the config\xe2\x80\x99s \xe2\x80\xa6AeAll other error codesBkThe <code>0x5F</code> (\xe2\x80\x9cPUSH0\xe2\x80\x9d) opcode.000BkThe <code>0x60</code> (\xe2\x80\x9cPUSH1\xe2\x80\x9d) opcode.000BkThe <code>0x61</code> (\xe2\x80\x9cPUSH2\xe2\x80\x9d) opcode.000BkThe <code>0x62</code> (\xe2\x80\x9cPUSH3\xe2\x80\x9d) opcode.000BkThe <code>0x63</code> (\xe2\x80\x9cPUSH4\xe2\x80\x9d) opcode.000BkThe <code>0x64</code> (\xe2\x80\x9cPUSH5\xe2\x80\x9d) opcode.000BkThe <code>0x65</code> (\xe2\x80\x9cPUSH6\xe2\x80\x9d) opcode.000BkThe <code>0x66</code> (\xe2\x80\x9cPUSH7\xe2\x80\x9d) opcode.000BkThe <code>0x67</code> (\xe2\x80\x9cPUSH8\xe2\x80\x9d) opcode.000BkThe <code>0x68</code> (\xe2\x80\x9cPUSH9\xe2\x80\x9d) opcode.000CgDocuments a parameter just like in Doxygen (must be \xe2\x80\xa60jParis: \xe2\x80\xa6AoFailed to parse the source code0BfFailed to parse inline config as TOML.CnA piece is a portion of the format string which represents \xe2\x80\xa6DcA one time prank triggered by a <code>vm.prank()</code> call is \xe2\x80\xa600AbPrank information.111CbGenerate a storage proof for a given storage slot.iNo outputCftransaction was successfully added and being processedoReorg the chainCjReset the fork to a fresh forked state, and optionally \xe2\x80\xa6BdA type that keeps track of attempts.AiKeeps retrying operation.AoA value of type <code>R</code>.0CjError that occurs when an invalid digit is encountered \xe2\x80\xa60AdSIGMA from spec: \xe2\x80\xa60BkThe <code>0x54</code> (\xe2\x80\x9cSLOAD\xe2\x80\x9d) opcode.000BkThe <code>0x90</code> (\xe2\x80\x9cSWAP1\xe2\x80\x9d) opcode.000BkThe <code>0x91</code> (\xe2\x80\x9cSWAP2\xe2\x80\x9d) opcode.000BkThe <code>0x92</code> (\xe2\x80\x9cSWAP3\xe2\x80\x9d) opcode.000BkThe <code>0x93</code> (\xe2\x80\x9cSWAP4\xe2\x80\x9d) opcode.000BkThe <code>0x94</code> (\xe2\x80\x9cSWAP5\xe2\x80\x9d) opcode.000BkThe <code>0x95</code> (\xe2\x80\x9cSWAP6\xe2\x80\x9d) opcode.000BkThe <code>0x96</code> (\xe2\x80\x9cSWAP7\xe2\x80\x9d) opcode.000BkThe <code>0x97</code> (\xe2\x80\x9cSWAP8\xe2\x80\x9d) opcode.000BkThe <code>0x98</code> (\xe2\x80\x9cSWAP9\xe2\x80\x9d) opcode.000Ac<code>setUp</code>.CgAn abstraction around console output that remembers \xe2\x80\xa6AnPrint the implicit uint or int0DkA dynamically-sized slice of key-value pairs in an <code>IndexMap</code>\xe2\x80\xa6D`A dynamically-sized slice of values in an <code>IndexSet</code>.10AjShared Bit-Slice Splitting0BmEVM stack with STACK_LIMIT capacity of words.AjStack implementation type.101010CgOutput state type representing changes after execution.00CdState type that is returned by the journal after \xe2\x80\xa600AcState of blockchain00222110001AlThe underlying element type.000BkThe <code>0x5C</code> (\xe2\x80\x9cTLOAD\xe2\x80\x9d) opcode.000BiExclude all <code>.t.sol</code> contractsCcA title that should describe the contract/interface0BhConverts a number of one base to decimalBhConverts a number of one base to anotherBnRLP encodes hex data, or an array of hex data.AmConvert an ETH amount to wei.g(types)CmThe Transaction Environment is a struct that contains all \xe2\x80\xa6000Bm<code>Uint</code> for <code>1024</code> bits.000Bm<code>Uint</code> for <code>2048</code> bits.000Bm<code>Uint</code> for <code>4096</code> bits.000BfHelper trait to format Ethereum types.0DkA lazy iterator producing elements in the union of <code>IndexSet</code>\xe2\x80\xa6DjA lazy iterator producing elements in the union of <code>HashSet</code>\xe2\x80\xa610CeIndicates a successfully recovered authority address.0AjVyper programming languageClProvides additional path context for <code>fs::write</code>.0Bgwrite to fs (<code>vm.writeFile</code>)AgOnly writing is allowedAo<code>lhs += rhs + carry</code>0gExampleB`Optional alias of the dependency0EeGenerate bindings for the <code>alloy</code> library, instead of <code>ethers</code>.C`Anvil is a fast local Ethereum development node.BjApplies the matrix to a <code>Uint</code>.BhApplies a transformation to the builder.10BjApplies this cheatcode to the given state.BlApplies the overrides to the given settings.AaFull trace arena.00BlStatically-Allocated, Fixed-Size, Bit Buffer0BhConversion to i8 with overflow checking.0BhConversion to u8 with overflow checking.0AoGets basic account information.000AnGet basic account information.1CjPrint only a basic set of the currently set config values.222122D`The bitwise or (<code>|</code>) of the bits in two flags values.BmReturns the set union, cloned into a new set.FfReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.CfReturns the bitwise <code>|</code> of the two numbers.AnImplements the OR instruction.43210EjReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</codehReturns the blast chain.F`Returns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</codegOptional trailing blockBeReturns the block with the given hashAmThe block number of the stateDhThe block created after executing the <code>included</code> transactionsgExampleAmThe block height to query at.00CeThe block to estimate the data availability size for.11CjThe hash or tag to query. If not specified, the latest \xe2\x80\xa622222222222AbBlock information.0EcThis module contains <code>BlockEnv</code> and it implements <code>Block</code> \xe2\x80\xa6mGet the block22BbBlock related types and functions.11AjSet the block environment.AeThe block environmentAfThe block environment.16654663442101CcThe block at which the bytecode should be verified.222131CeConverts a sequence of string literals containing \xe2\x80\xa60C`BN128 precompiles added in <code>EIP-1962</code>0BfHeap-Allocated, Fixed-Size, Bit Buffer0CaConvert this transport into a boxed trait object.CgBuilds TransactionRequest and fiils missing fields. \xe2\x80\xa6DhBuild the final <code>TxEnv</code>, returns error if some fields are \xe2\x80\xa6BnBuilds the State with the configured settings.D`Creates <code>BundleState</code> instance based on collected \xe2\x80\xa6AbBuild the decoder.CdBuilds a folded stack trace from a call trace arena.AoReturns the folded stack trace.AkReturns folded stack trace.BbBuilds the executor as configured.BnBuilds the stack of inspectors to use when \xe2\x80\xa6CiBuilds the SessionSource from input into the complete \xe2\x80\xa6AcBuilds the project.CcBuild the <code>mdbook</code> from generated files.BaAll build arguments are supportedCnGiven an EVM, proceeds to return a runner which is able to \xe2\x80\xa6=<;5:9876BnParse the sources and build the documentation.DeConstructs the <code>RetryProvider</code> taking all configs into \xe2\x80\xa6CcBuilds the RuntimeTransport and returns it in a \xe2\x80\xa6AdBuilds the debugger.:9>=<;BjBuilds a new <code>MultiWalletOpts</code>.kByte range.AhThe hex data to convert.AdThe string to parse.nReturns bytes.CeConverts a sequence of string literals containing \xe2\x80\xa60BdReturns the bytes of the call input.lOutput bytes063221006Bhcontains all fee history related entriesBhThe cache that stores all state changes.CmCached state contains both changed from evm execution and \xe2\x80\xa610AkCache state implementation.111122AgReturns the inner cache33232331222203BmSupport types for configuring storage cachingAgwhether to enable cache252555CiCached selectors for functions, events and custom errors.0BoReturns the path to the project\xe2\x80\x99s cache file.AoEvery successful fuzz test caseCmThe number of successful test cases that must execute for \xe2\x80\xa601110nInner context.0mGet the chain1100CdThe chain of the blockchain of the block environment22122110BcThe chain name or EIP-155 chain ID.00CgSets the chain of the node the provider will connect to1CmThe chain name or EIP-155 chain ID used to derive the API \xe2\x80\xa6233DjCheck if the <code>SPEC</code> is enabled, and fail the instruction if \xe2\x80\xa6AhRun in \xe2\x80\x98check\xe2\x80\x99 mode.ChCompares the set of tests with an existing gas snapshot.CmCompare against a pre-existing gas snapshot, exiting with \xe2\x80\xa63ChExecutes the command to check verification status on \xe2\x80\xa6BhChecks whether the contract is verified.EmReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].00000000000000AbClears all entries11111111111oClears all data222AjClears the entire database333333333333333333333333BfRemoves all transactions from the pool44fClears555555AeClears internal state66AiClears the internal state77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777AgEmpties the bit-vector.8888888DbClears all bits governed by the partial-element to <code>0</code>.99999999AmClear and initialize a frame.::::::::AhClear the local context.CmCalled at the end of the transaction to clean all residue \xe2\x80\xa60<<<<<<<<CkClears the stack by setting the index to 0. It does not \xe2\x80\xa6=========================1==============CkClears the map, removing all key-value pairs. Keeps the \xe2\x80\xa6>>>>>>>>>>>>>>>>>>>>>>>>>>>>CkRemove all key-value pairs in the map, while preserving \xe2\x80\xa6??ChRemove all elements in the set, while preserving its \xe2\x80\xa6EmReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].000000000000000000000000000000000BdClears the set, removing all values.11111111111111111111111111111111111111CjTruncates this <code>String</code>, removing all contents.2822822222222222222222222222222222222DaResets the tracer to its initial state of <code>Self::new</code>.3333333333333CeClears and reinitializes the interpreter with new \xe2\x80\xa644444444444444444444AaClears the stack.AeClears return buffer.666666A`Clears the arenanRemoves overall test progress.888888888?88888888>==8888888<8888888888888888888888888=8888888888888888888888888888888888888888888888888888888888888888AgEmpties the bit-vector.99999999999DbClears all bits governed by the partial-element to <code>0</code>.:::::::::::::::::=::::::::::::::::::::::::::::<;::::::::::::::::::::::::::::::::::9:::::::::::::::::::::::::::::::::::::::8:::7:::::::::::::::::::::::::::::::AhClear the local contextcClears the context.<<<<<BeClears the recorded reads and writes.=============================AeClears all contractslRemoves all state snapshots.?????????????????????????????????????????8???????????????????????????????????????????????????????????????????????CfRemoves the project\xe2\x80\x99s cache and artifacts directory.EmReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].000000000AnThe color of the log messages.0CkThe number of times the call is expected to be made. If \xe2\x80\xa6BhNumber of times this revert is expected.CaNumber of times the log is expected to be emittedChOpens an interactive debugger. Can only be used with \xe2\x80\xa6BfOpens the transaction in the debugger.BbRun a single test in the debugger.AmWhether to collect debug infoBdWhether or not to collect debug infoB`Open the script in the debugger.BcReturns the degen l3 mainnet chain.CmOptional delay to apply in between verification attempts, \xe2\x80\xa6AcReturns call depth.BjCurrent call depth in the execution stack.BaReturns the depth of the journal.AlThe current call stack depth0011Agdepth of the next frameAfThe depth of the call.2AkThe call depth of the step.CfCall depth traversed during the recording of state \xe2\x80\xa6AgThe depth of the entry.87656556421035C`The call depth at which the cheatcode was added.BjThe depth at which the revert is expected.CgThe depth at which we expect this emit to have occurred543BjDepth at which the gas snapshot was taken.BgThe depth at which the prank was calledAfDepth of the broadcast876876CdThe number of calls executed to attempt to break \xe2\x80\xa60<987<:DdIterates over a portion of the bit-vector, <em>removing</em> all \xe2\x80\xa6CgClears the map, returning all key-value pairs as an \xe2\x80\xa6DhClears the <code>IndexMap</code> in the given index range, returning \xe2\x80\xa6DhClears the <code>IndexSet</code> in the given index range, returning \xe2\x80\xa6CjClears the set, returning all elements as an iterator. \xe2\x80\xa6ChRemoves the specified range from the string in bulk, \xe2\x80\xa6543210BfGet a flags value with all bits unset.CgProduces an empty bit-slice with an arbitrary lifetime.AhCreates a new empty log.0BaCreates a new empty test outcome.3211BhCreates a shell that ignores all output.DbEnter execution of a function call that consumes <code>gas</code>.AcEnters the session.11CeContains the journal entry trait and implementations.CmGets the given key\xe2\x80\x99s corresponding entry in the map for \xe2\x80\xa6BoThe entry in the map that was already occupied.ClGet the given key\xe2\x80\x99s corresponding entry in the map for \xe2\x80\xa6CkGets the given value\xe2\x80\x99s corresponding entry in the set \xe2\x80\xa643210A`Cheatcode enums.0CkFilter children items for [ParseSource::$variant] variants.1Bkerc20 address to query, with the method \xe2\x80\xa6BeAggregated error type for this moduleBoJSON-RPC error bindings JSON-RPC error bindingsDgCreates new <code>Response</code> with the given <code>RpcError</code>.CiError variants used to unify different connection streamsBeError that happened during execution.0mGet the error1100BnMaps a broken invariant to its specific error.22122110mParser error.0DhPrints a red \xe2\x80\x98error\xe2\x80\x99 message. Use the <code>sh_err!</code> macro \xe2\x80\xa6Bcerror handling and solc error codesCderror thrown when extracting the <code>Config</code>44AmErrors related to fuzz tests.AlFormat the balance in ether.CnEvict all filters that weren\xe2\x80\x99t updated and reached there \xe2\x80\xa6CjNumber of exits to be done before entering a new function.BgCreate <code>10**n</code> as this type.0CdIf specified, only get the given field of the block.CnIf specified, only get the given field of the transaction. \xe2\x80\xa6CjIf specified, only get the given field of the transaction.AfBit-Field Memory SlotsBgThe contract artifact field to inspect.1ClSets extra files to include, that are not necessarily in \xe2\x80\xa6CkExtra files to include, that are not necessarily in the \xe2\x80\xa6DkGets a reference to the first bit of the bit-slice, or <code>None</code>\xe2\x80\xa6AlGet the first key-value pairAcGet the first valueAmGet the first key-value pair.AdGet the first value.43210EjReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DbGenerates a fixed <code>SeedableRandomState</code>, similar to \xe2\x80\xalIf true cannot be simplified or complexified202222222222222222222222222222222222222222222222222222222222222222222222222222222222B`Returns the flare mainnet chain.CnCreate the project even if the specified root directory is \xe2\x80\xa6AnOverride the up-to-date check.0CfDo not compile the flattened smart contract before \xe2\x80\xa6CcClear the cache and artifacts folder and recompile.0Bowhether to force a <code>project.clean()</code>ChForge is a fast and flexible Ethereum testing framework.B`Holds all created fork databases00BcThe access point for managing forks1DbAll <em>unique</em> forkids mapped to their corresponding backend.0CbWhether the log was actually found in the subcallsCiThe sender accounts for transactions when using local \xe2\x80\xa600CjResets the inspector to it\xe2\x80\x99s initial state of Self::new.000EjReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</codehThe group that the cheatcode belongs to.0BcThe group name of the gas snapshot.11BaEthereum Hoodi list of hardforks.AhReturns the hoodi chain.B`All the hosts used to connect to000AnGet the identity of the sourceCiReturns the slot number for a given mapping key and slot.kBit IndicesDiImmutably indexes into a bit-slice, panicking if <code>self</code> is \xe2\x80\xa6BlLooks up a single bit by its semantic index.BgReturns the current index of the stack.ClReturn the index where the key-value pair exists or will \xe2\x80\xa6CiReturns a reference to the value corresponding to the \xe2\x80\xa6DdReturns a reference to the value at the supplied <code>index</code>.10BfReturn the index of the key-value pairChReturn the index where a key-value pair may be inserted.1DbReturns a reference to the key at the supplied <code>index</code>.CnReturn the index where the key-value pair exists or may be \xe2\x80\xa6327:98654543231032CmThe index of the parameter on the stack. This is relative \xe2\x80\xa6BbThe actual json rpc receipt objectC`Returns the database that holds the remote stateCmused for task wake up when the mining mode was forcefully \xe2\x80\xa6Bbprocesses all pending transactionsCnThe receipt envelope, which contains the consensus receipt \xe2\x80\xa6AdInner journal state.0BmReturns the inner <code>Authorization</code>.DcModule containing the <code>JournalInner</code> that is part of \xe2\x80\xa62AcGet the inner item.BeReturns inner HashMap of precompiles.ChReturns the map of SELECTOR to number of occurrences \xe2\x80\xa69BdThe inner map of targeted contracts.kInner data.7765743012;00B`The inner actual transport used.CiInner fuzz test timer - (test start time, test duration).=Amholds additional Backend data>45BiThe project in which the test should run.AgThe input to normalize.BkWhether to decode the input or output data.AiInput data for the frame.BjReturns the input data of the transaction.00AhInput data for the call.BiInput data for current execution context.AjThe call data of the call.210AjReturns input of the call.CdInput calldata appended to <code>RUN_SELECTOR</code>65554324321BiTrue if this metadata is for a directory.BaWhether the entry is a directory.1010101010BcReturns true if this an Id variant.BhReturns whether the result is a success.CdReturns whether the instruction result is a success.10nCoverage items0oParsed results.BmReturn the parsed items. Consumes the parser.12BaImplements the JUMPI instruction.0BhOutput test results as JUnit XML report.AmLabel addresses in the trace.BdOptional decoded label for the call.AjThe label for the address.10AjAddress label, if any set.21CnGet the current level of the indent. This is multiplied by \xe2\x80\xa6AfReturns the gas limit.0B`Returns the linea mainnet chain.B`Line range. Indices are 1-based.00BjLocal context that is filled by execution.00AeGet the local context11DbLocal context trait <code>LocalContextTr</code> and related types.11AkThe local trace identifier.3332331220AnSets the provider to be local.1CjReturns the base 10 logarithm of the number, rounded down.0CaCheckpoint to where on revert we will go back to.0BaImplements the MCOPY instruction.0B`Merges two <code>HitMaps</code>.ClMerge another hitmap into this, assuming the bytecode is \xe2\x80\xa6BjAdds another coverage summary to this one.AnMerges given contract sources.BlCalled when this state snapshot is reverted.BcMerge another config into this one.543021CmMerges the inline configuration at the given contract and \xe2\x80\xa612265413AbMines transactionsAjaccess to the actual minerDhThe miner responsible to select transactions from the <code>pool</code>.BaImplements the MLOAD instruction.0BaImplements the MSIZE instruction.0CmMain MultiProgress instance showing progress for all test \xe2\x80\xa6CnIf present, \xe2\x80\x93resume or \xe2\x80\x93verify will be assumed to be a \xe2\x80\xa6BhCopy of the main MultiProgress instance.BkSupport for running multiple fork backends.CaAttempts to convert the chain into a named chain.AnPrint compiled contract names.CeWhether to print the names of the compiled contracts.CgNames of all functions in the call stack of this trace.BkDisable the default <code>Vm</code> import.0AoReturns the nodes in the arena.00gExampleCeGenerate a vanity contract address created by the \xe2\x80\xa6BbThe nonce of the deployer address.AiNonce of the transaction.nAccount nonce.AmThe nonce of the transaction.AlThe nonce of the transactionAiSet the transaction nonce1AbReturns the nonce.3CaGet the <code>nonce</code> for the authorization.B`The nonce for the authorization.25CkThe current nonce of the authority account at signing time.765453621360000AjNonce for the transaction.01BkHow transactions are sorted in the mempool.AgIn-Element Bit Ordering0BcReturns precompiles for Osaka spec.0BmReturns another error with the given message.0DhThis is used as the clap <code>value_parser</code> implementation to \xe2\x80\xa6DaThis is used as the clap <code>value_parser</code> implementationBgCompiles the source using solang_parserAbParse source code.0CmParse an inline config item from a string. Validates lint \xe2\x80\xa6CbReads bytes from <code>stdin</code> into a String.ChImplements a DFS over a compiler output node and its \xe2\x80\xa6DcFactory function that extracts a vector of <code>NatSpec</code> \xe2\x80\xa6AoProject\xe2\x80\x99s paths as configured0mSource paths.CjPath to the file, directory or \xe2\x80\x98-\xe2\x80\x99 to read from stdin.AjReturns the project paths.BhBuild source files from specified paths.BhPaths to files or directories to detect.DePath to the file to be checked. Overrides the <code>ignore</code> \xe2\x80\xa666CiContains paths to the sequence files None if sequence \xe2\x80\xa6777AiReturns the paths config.AgPrints the launch info.AfPrints the config infoBhSet whether to enable the trace printer.0ChWhether to print all opcode traces into the console. \xe2\x80\xa6110DjPrints a message, where the status will have <code>color</code> color, \xe2\x80\xa61221ClThe known proxy address. If provided, the storage layout \xe2\x80\xa6AkEIP-3855: PUSH0 instruction0BoQueues the given command for further execution.000BnThe addresses we have yet to make requests forCiExecutes the transaction only with the state from the \xe2\x80\xa6AjDo not print log messages.0CjSets whether to print anything at all. Overrides other \xe2\x80\xa6DhWhether to print anything at all. Overrides other <code>print</code> \xe2\x80\xa6DeEnables the <code>yansi</code> <code>Quirk</code> <code>value</codeiGet associated quotation mark with option0ClIterates over all indices between an inclusive start and \xe2\x80\xa60AdStorage slots reads.AhReturns the recovery ID.0ClReorg the chain to a common height and execute blocks to \xe2\x80\xa6CnRe-run recorded test failures from last run. If no failure \xe2\x80\xa6CjReset the fork to a fresh forked state, and optionally \xe2\x80\xa60CkResets the current time manager to the given timestamp, \xe2\x80\xa611AcReset gas to limit.CdTrue if gas metering should be reset to frame limit.33A`Retry utilities.EmConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.0B`Returns the ronin mainnet chain.B`<code>lhs -= rhs - borrow</code>0DiConfigures a server that handles <code>EthApi</code> related JSON-RPC \xe2\x80\xa6AhServe the documentation.AaServe the mdbook.C`Setup the exception handler and other utilities.CnConfigures everything related to env, backend and database \xe2\x80\xa6BlSetup the global logger and other utilities.CfCalls the <code>setUp()</code> function on a contract.11ChDeploys the test contract inside the runner from the \xe2\x80\xa6AfThe test setup result.2CmDeploys the libraries and broadcast contract. Calls setUp \xe2\x80\xa6CdSet up a benchmark project by cloning the repository4AlCreate a new shell instance.DmUtility functions for writing to <code>stdout</code> and <code>stderr</code>.CnPrint compiled contract sizes. Constructor argument length \xe2\x80\xa6CeWhether to print the sizes of the compiled contracts.CmReturns an iterator over all individual skipped tests and \xe2\x80\xa60AnBit-Addressable Memory RegionsBoReturns a slice of self for the provided range.AgMemory slice with range210EgGets storage value of <code>address</code> at <code>index</code> and if the account \xe2\x80\xa6BmReturns the storage value from Journal state.AcLoads storage slot.11DfSload, calls <code>ContextTr::journal_mut().sload(address, key)</code>0BaImplements the SLOAD instruction.43233110BjThe storage slot numbers (hex or decimal).00B`Returns the Sonic mainnet chain.BeCreates the node and runs the server.AfSpawns the given task.DhCreates a new pair and spawns the <code>MultiForkHandler</code> on a \xe2\x80\xa6CgCreates a new Backend with a spawned multi fork thread.01BoSpawns the <code>Spinner</code> on a new thread1212BfReturns the total amount of gas spent.0AlTurns this type into a tupleCjIterates over subslices separated by bits that match a \xe2\x80\xa6CkConsumes the log data, returning the topic list and the \xe2\x80\xa6CnDecompose into parts. Alias for <code>Self::into_parts</code>.210AjEVM stack for computation.0BnStack operations (PUSH, POP, DUP, SWAP, etc.).ClThe stack before executing the step of the run. stack[0] \xe2\x80\xa62210000CoThe configuration used to build an <code>InspectorStack</code>.01CnThe lower, inclusive, bound of the range. The bit to which \xe2\x80\xa6000AhStart the gas recording.CjThis is an alias for both \xe2\x80\x93load-state and \xe2\x80\x93dump-state.CgSupport for generating the state root for memdb storageoshareable stateAjReturn reference to state.AaThe current statemOutput State.00AcNonce of the state.022AoReturns reference to the state.mAccount stateAjMain state implementation.115BiThe final state of the REPL contract callDeEVM State at the final instruction of the <code>run()</code> function8766655774323317AoThe cheatcodes inspector state.2288CfUtility functions for reading from <code>stdin</code>.AmOpcode-level execution steps.CaEnable recording of individual opcode level steps01A`The debug steps.0112AjStorage Memory DescriptionoInteger Storing0100oStyle of indent0AdSets the path style.BcReturns the syndr l3 mainnet chain.AbThe summary table.B`Returns the taiko mainnet chain.Cbadditional task management Task management supportCkReturns an iterator over all individual tests and their \xe2\x80\xa6BgIterator over all tests and their namesAhThe documentation title.CdHelper to format the title of the active buffer paneDoGets the transient storage value of <code>address</code> at <code>index</code>.AnLoads transient storage value.BkRead transient storage tied to the account.11DfTload, calls <code>ContextTr::journal_mut().tload(address, key)</code>0CgEIP-1153: Transient storage opcodes Load value from \xe2\x80\xa643233110gTopic 0BiThe total coverage of the entire project.ClMark account as touched as only touched accounts will be \xe2\x80\xa60CnForks the remote rpc, executes the transaction locally and \xe2\x80\xa6nThe call trace00BdFormats the given values as a tuple.AgAdditional useful typesD`The bitwise or (<code>|</code>) of the bits in two flags values.DgReturn an iterator over all values that are in <code>self</code> or \xe2\x80\xa6CkVisits the values representing the union, i.e., all the \xe2\x80\xa6210BbVarious utilities for the bytecodeAjCommon Ethereum utilities.10CeImplementations of <code>Utilities</code> cheatcodes.AhUncategorised utilities.AaUtility functionsBaEther to send in the transaction.CnReturns the value of the storage slot, applying the offset \xe2\x80\xa6B`Ether to send in the transactionAeThe value to convert.0000AcThe value to shift.011AdThe value to format.222AiThe RLP hex-encoded data.ClThe value sent to the receiver of <code>TxKind::Call</code>.BjThe value sent to <code>transact_to</code>")