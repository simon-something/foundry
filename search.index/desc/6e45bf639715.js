rd_("AiSet the transaction valueBjThe value sent to <code>transact_to</code>ClThe value sent to the receiver of <code>TxKind::Call</code>.CkThe value which was not inserted, because the entry was \xe2\x80\xa61kCall value.AeThe value to transfer10BbThe value transferred in the call.BjValue passed along with the account access5676545323201AfThe doc comment value.0BcThe expected value sent in the call2AkThe value to match for mock33CnEther to send in the transaction, either specified in wei, \xe2\x80\xa60Cl<code>msg.value</code> (if any) used when creating contract.BoRecursively formats a <code>DynSolValue</code>.AeThe value to display.78CkVisitor helpers to traverse the solang Solidity Parse Tree.BcVyper specific configuration types.B`Configuration for Vyper compilerCaWatch the given files or directories for changes.BnWait for verification result after submission.EjReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</codegWhether storage is wiped in this revert000B`Number of words for the mnemonicBfStores the snapshot for the given hashA`Single-Bit WriteBiWrites a new bit into the given location.CmWrites the ChiselSession to a file by serializing it to a \xe2\x80\xa6BhWrites the lockfile to the project root.32DcReturns the complementary error variant for <code>fs::write</code>.BgWrapper for <code>std::fs::write</code>C`Returns a new write-only permission for the pathClThe only mutable buffer is the memory buffer, so don\xe2\x80\x99t \xe2\x80\xa6CmLocks this lock with exclusive write access, blocking the \xe2\x80\xa6BlThe <code>0x08</code> (\xe2\x80\x9cADDMOD\xe2\x80\x9d) opcode.000CbA type that selects the appropriate load/store \xe2\x80\xa60j(lhs, rhs)11BiThe action type returned after execution.0AcForce color output.AbImmutable Bit View000AfThe name of the author0BlBerlin hard fork Activated at block 12244000BiString identifier for the Berlin hardforkAmBerlin spec made a change to:Ce<code>modexp</code> precompile with BERLIN gas rules.3210kBerlin: \xe2\x80\xa6AiBit-Array Type Definition000BeFixed-Size, Heap-Allocated, Bit Slice000AhOne-Bit-After Tail Index0AbSemantic Bit Index0lBit Position0AbSingle-Bit Pointer000AcProxy Bit-Reference000AjOne-Hot Bit Selection Mask0AkBit-Precision Dynamic Array000AeA branch in the code.Ef<code>name</code> of the branch and the <code>rev</code>  it is currently pointing \xe2\x80\xa6101BlThe <code>0x33</code> (\xe2\x80\x9cCALLER\xe2\x80\x9d) opcode.0DdStores the caller address to be used as <em>sender</em> account for:11000ClCancun hard fork Activated at block 19426587 (Timestamp: \xe2\x80\xa6BiString identifier for the Cancun hardforkAaCancun spec added210BlThe <code>0xF0</code> (\xe2\x80\x9cCREATE\xe2\x80\x9d) opcode.0B`Gas cost for CREATE instruction.110kCancun: \xe2\x80\xa6AaEVM configuration000AgOnly cache these chainsBmFast, utilitarian, and verbose Solidity REPL.AiShared Bit-Slice Chunking0AoGet the current client version.AkDisplay the current config.AeFoundry configurationmConfig objectCkignores the address field and simulates creating a contractBdUse to deploy raw contract bytecode.BlEstimate gas cost to deploy a smart contract1AbCreate frame data.AdCreate frame result.BfA transaction that creates a contract.BkLegacy create scheme of <code>CREATE</code>AcOutput of a create.2221211Co<code>CREATE</code> or <code>CREATE2</code> instruction called.0BiRepresents a contract creation operation.BaRepresents a CREATE broadcast tx.AhThe account was created.AhDeploy a smart contract.9876577767664421321212121CcContains the future that will establish a new fork.4B`Cryptography-related cheatcodes.000AdCustom string error.CbCustom scheme where we set up the original address1CmCustom type means that the transaction trait was extended \xe2\x80\xa6lCustom error11231232g(types)4342122342343BlCustom tag, semantics is application-defined0A`All other errors0CmCustom verification provider, requires compatibility with \xe2\x80\xa6AkExclude if the file matchesCgA type alias for a HashMap of dependencies keyed by \xe2\x80\xa60AnBit-Slice Element Partitioning0B`Use double quotes where possible0AmThe ECAdd precompile address.AmThe ECMul precompile address.CnGenerate EIP-712 struct encodings for structs from a given \xe2\x80\xa6FdThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general \xe2\x80\xa60CnHelper struct with mutable references to the block and cfg \xe2\x80\xa6000ClThe entry point for executing eth api RPC call - The Eth \xe2\x80\xa6CnContainer type that holds both the configuration and block \xe2\x80\xa6000CgExport the current REPL session source to a Script fileAlExtended functionality type.000DeThe <em>unique</em> identifier for a specific fork, this could be \xe2\x80\xa60000BiContains the entire forking mode database000ChAn inspector that can fuzz and collect data for that \xe2\x80\xa6000000ClDetects usage of unsafe cheat codes in a project and its \xe2\x80\xa6BdReturns the environment of the fork.AgHeader validation error0AhHit data for an address.00CeModule containing a contract\xe2\x80\x99s types and functions.BlThe <code>0x15</code> (\xe2\x80\x9cISZERO\xe2\x80\x9d) opcode.000CgStores whether <code>stdout</code> is a tty / terminal.C`Import a private key into an encrypted keystore.B`Trait for interpreter execution.0lItalic item.0BeHash arbitrary data using Keccak-256.BiString identifier for the latest hardfork0BlLondon hard fork Activated at block 12965000BiString identifier for the London hardfork10AmWrapper around Ledger signer.AgLegacy transaction type00000000CiTrait representing a generic linter for analyzing and \xe2\x80\xa6BgThe account has been loaded and exists.00000kLondon: \xe2\x80\xa6BhGas cost per word for memory operations.0BlThe <code>0x52</code> (\xe2\x80\x9cMSTORE\xe2\x80\x9d) opcode.000BlThe <code>0x09</code> (\xe2\x80\x9cMULMOD\xe2\x80\x9d) opcode.000AmBuild and sign a transaction.CcPrints the maximum value of the given integer type.BeBasic OOG error from memory expansionAkMemory implementation type.0100CcPrints the minimum value of the given integer type.A`A given mutationBlThe <code>0x43</code> (\xe2\x80\x9cNUMBER\xe2\x80\x9d) opcode.000nDefault outputBeExplain to an end user what this does0A`numerical sub ido<code>%d</code>0BlThe <code>0x32</code> (\xe2\x80\x9cORIGIN\xe2\x80\x9d) opcode.000Ada map of JSON valueso<code>%o</code>0mAn EVM opcode000CaThe output type returned by precompile execution.BaOutput of a transaction executionBbOutput type for execution results.02100ClPrague hard fork Activated at block 22431084 (Timestamp: \xe2\x80\xa6BiString identifier for the Prague hardforkBePrague spec added bls precompiles \xe2\x80\xa6210BlThe <code>0x69</code> (\xe2\x80\x9cPUSH10\xe2\x80\x9d) opcode.000BlThe <code>0x6A</code> (\xe2\x80\x9cPUSH11\xe2\x80\x9d) opcode.000BlThe <code>0x6B</code> (\xe2\x80\x9cPUSH12\xe2\x80\x9d) opcode.000BlThe <code>0x6C</code> (\xe2\x80\x9cPUSH13\xe2\x80\x9d) opcode.000BlThe <code>0x6D</code> (\xe2\x80\x9cPUSH14\xe2\x80\x9d) opcode.000BlThe <code>0x6E</code> (\xe2\x80\x9cPUSH15\xe2\x80\x9d) opcode.000BlThe <code>0x6F</code> (\xe2\x80\x9cPUSH16\xe2\x80\x9d) opcode.000BlThe <code>0x70</code> (\xe2\x80\x9cPUSH17\xe2\x80\x9d) opcode.000BlThe <code>0x71</code> (\xe2\x80\x9cPUSH18\xe2\x80\x9d) opcode.000BlThe <code>0x72</code> (\xe2\x80\x9cPUSH19\xe2\x80\x9d) opcode.000BlThe <code>0x73</code> (\xe2\x80\x9cPUSH20\xe2\x80\x9d) opcode.000BlThe <code>0x74</code> (\xe2\x80\x9cPUSH21\xe2\x80\x9d) opcode.000BlThe <code>0x75</code> (\xe2\x80\x9cPUSH22\xe2\x80\x9d) opcode.000BlThe <code>0x76</code> (\xe2\x80\x9cPUSH23\xe2\x80\x9d) opcode.000BlThe <code>0x77</code> (\xe2\x80\x9cPUSH24\xe2\x80\x9d) opcode.000BlThe <code>0x78</code> (\xe2\x80\x9cPUSH25\xe2\x80\x9d) opcode.000BlThe <code>0x79</code> (\xe2\x80\x9cPUSH26\xe2\x80\x9d) opcode.000BlThe <code>0x7A</code> (\xe2\x80\x9cPUSH27\xe2\x80\x9d) opcode.000BlThe <code>0x7B</code> (\xe2\x80\x9cPUSH28\xe2\x80\x9d) opcode.000BlThe <code>0x7C</code> (\xe2\x80\x9cPUSH29\xe2\x80\x9d) opcode.000BlThe <code>0x7D</code> (\xe2\x80\x9cPUSH30\xe2\x80\x9d) opcode.000BlThe <code>0x7E</code> (\xe2\x80\x9cPUSH31\xe2\x80\x9d) opcode.000BlThe <code>0x7F</code> (\xe2\x80\x9cPUSH32\xe2\x80\x9d) opcode.000CoWrapper type that ensures the type is named <code>params</code>BaResult of parsing the source code0ClThe documentation parser. This type implements a Visitor \xe2\x80\xa60CaParses a format string into a sequence of pieces.AoUse period as decimal separator0gPrague.BbComes before the code it describesCiReplace prefix of the original call sequence with new \xe2\x80\xa6BbVisible externally and internally.000BiRecord only the items pushed to the stack00000C`One of <code>*const</code> or <code>*mut</code>.0BlThe <code>0xF3</code> (\xe2\x80\x9cRETURN\xe2\x80\x9d) opcode.000BlThe <code>0xFD</code> (\xe2\x80\x9cREVERT\xe2\x80\x9d) opcode.000BbShared Bit-Slice Reverse Splitting0ClThe reason for why something, such as a generated value, \xe2\x80\xa600ClIndicates that a bit-slice\xe2\x80\x99s contents touch an element \xe2\x80\xa6000BcOnly cache non-local host endpointsBbRemove a wallet from the keystore.BdRemove one or multiple dependencies.AfRemove all underscores000BcRepeat selected call several times.AhContains a final result.00AfCheatcode result type.111000B`The <code>fs</code> result type.CgSynthetic access indicating the current context has \xe2\x80\xa600000CkReturn <code>state::bytecode::opcode::RETURN</code> opcode.AmReturn from the current call.AoInterpreter finished execution.02100CiDocuments the return variables of a contract\xe2\x80\x99s function0CcThrown if executing a transaction failed during \xe2\x80\xa6DcReverted by <code>REVERT</code> opcode that doesn\xe2\x80\x99t spend all gasAgRevert the transaction.AcExecution reverted.210BfAdvisory reader-writer lock for files.AbSHA-256 precompile0BlThe <code>0x55</code> (\xe2\x80\x9cSSTORE\xe2\x80\x9d) opcode.000AfThe struct definition.000000000000000000000000000000000000000000000000000000000000000000000000000000000000BlThe <code>0x99</code> (\xe2\x80\x9cSWAP10\xe2\x80\x9d) opcode.000BlThe <code>0x9A</code> (\xe2\x80\x9cSWAP11\xe2\x80\x9d) opcode.000BlThe <code>0x9B</code> (\xe2\x80\x9cSWAP12\xe2\x80\x9d) opcode.000BlThe <code>0x9C</code> (\xe2\x80\x9cSWAP13\xe2\x80\x9d) opcode.000BlThe <code>0x9D</code> (\xe2\x80\x9cSWAP14\xe2\x80\x9d) opcode.000BlThe <code>0x9E</code> (\xe2\x80\x9cSWAP15\xe2\x80\x9d) opcode.000BlThe <code>0x9F</code> (\xe2\x80\x9cSWAP16\xe2\x80\x9d) opcode.000AaCheatcode safety.000CkRun a smart contract as a script, building transactions \xe2\x80\xa6CbA consensus hashable item, with its memoized hash.0AoSign and publish a transaction.CiBasic mdbook server. Given a path, hostname and port, \xe2\x80\xa6ClShutdown signal that fires either manually or on drop by \xe2\x80\xa6CcSigned integer wrapping a <code>ruint::Uint</code>.0CnIf RLP-encoded authorization is provided, we decode it and \xe2\x80\xa60AdA transaction signerAhA reference to a signer.CmTraces internal functions without decoding inputs/outputs \xe2\x80\xa600Aosingle json rpc request RpcCallAhsingle json rpc responseBnCall used as a counter example for fuzz tests.0B`Use single quotes where possibleBfPrefer single line block when possible102ChGet the source code of a contract from a block explorer.BcPrint the generated source contractAiCode for the global scopeBlSpecification IDs and their activation block0AbSplicing IterationBnA splicing iterator for <code>IndexMap</code>.BnA splicing iterator for <code>IndexSet</code>.210AnSplice original call sequence.AjShared Bit-Slice Splitting0BnThe cheatcode and its API is currently stable.000CcFetches the current status of the transaction pool.AjThe status of a cheatcode.000CjColor-enabled stdio, with information on whether color \xe2\x80\xa6Bastring sub id, a hash for exampleBcA UTF-8\xe2\x80\x93encoded, growable string.DcA string error, ABI-encoded as <code>CheatcodeError(string)</code>.ChUtility cheatcodes that deal with string parsing and \xe2\x80\xa6210AnA character in a quoted string2211o<code>%s</code>CbA literal string which should directly be emitted.1AgRaw Endpoint url stringAbA Solidity struct.0AiSource struct definition.011CiReplace suffix of the original call sequence with new \xe2\x80\xa6BlThe <code>0x5D</code> (\xe2\x80\x9cTSTORE\xe2\x80\x9d) opcode.000BnFacilitates formatting an integer into a Base.BhConverts a number of one base to anotherCkConvert an ETH amount into another unit (ether, gwei or \xe2\x80\xa6BcConvert hex data to a utf-8 string.BoEnable / disable traces for the current sessionAmWrapper around Trezor signer.CiA transaction hash is a keccak hash of an RLP encoded \xe2\x80\xa6000DkThe <code>to</code> field of a transaction. Either a target address, or \xe2\x80\xa6000AmInspect the TxPool of a node.BlThe cheatcode is not safe to use in scripts.000BdUpdate one or multiple dependencies.AlUpload selectors to registryBkVacant slot (no equivalent key in the map).oA vacant entry.0110100110CfAn iterator over the values of a <code>HashMap</code>.ChAn iterator over the values of an <code>IndexMap</code>.10AjGenerate a vanity address.BbVerify the signature of a message.AlWallet management utilities.BgA wallet with a public and private key.00000AlMemory Bus Access Management0C`Permission level to access the <code>path</code>BhAccrues the input into the bloom filter.0ClActions that the EVM should do. It contains return value \xe2\x80\xa60AbTakes next action.110BbImplements the ADDMOD instruction.0De\xe2\x9a\xa0\xef\xb8\x8f Computes <code>result += a * b</code> and checks for overflow.0E`Moves all the bits out of <code>other</code> into the back of <code>self</code>.EeMoves all key-value pairs from <code>other</code> into <code>self</code>, leaving \xe2\x80\xa6FbMoves all values from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.210BlFormats a parse tree item into a doc string.0DfReturns a reference to the database as a <code>dyn DatabaseRef</code>.AgReturns the env variant0BiConversion to i16 with overflow checking.0BiConversion to i32 with overflow checking.0BiConversion to i64 with overflow checking.0AjDecode the RLP data as intAgReturns the key variantBoProduces a proxy reference to the referent bit.FfConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.011EjConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.02CjReturns the opcode as a string. This is the inverse of \xe2\x80\xa6BlReturns the checksum of a formatted address.DbExtracts a string slice containing the entire <code>String</code>.BcReturns the identifier of the fork.AoReturns this value as a string.0CdReturns the string representation of the visibility.CdReturns the string representation of the mutability.CgReturns the string representation of <code>self</code>.76533214BhReturns the content of the matched link.4432BoReturns the string representation of the chain.DbReturns the <code>Glob</code> string used to compile this matcher.BeThe textual identifier for this error88BiConversion to u16 with overflow checking.0BiConversion to u32 with overflow checking.0BiConversion to u64 with overflow checking.0AgReturns the url variantBlAsserts that the frame token is initialized.0DkRuns the command, returning a <code>snapbox</code> object to assert the \xe2\x80\xa6CmMacro for asserting assumptions in debug builds. In debug \xe2\x80\xa60BdReturns the client coinbase address.BnFetch the implementation from the beacon slot.BdReturns precompiles for Berlin spec.0CgComputes the bitwise OR of two <code>FixedBytes</code>.0000000DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.CdReturns the set intersection, cloned into a new set.DoReturns the intersection of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa6CjReturns the bitwise <code>&amp;</code> of the two numbers.AoImplements the AND instruction.43210AkBit-Array Value Constructor000AkBoxed Bit-Slice Constructor000AfBit-Vector Constructor000DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6CkReturns the set symmetric-difference, cloned into a new \xe2\x80\xa6EgReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new \xe2\x80\xa6CfReturns the bitwise <code>^</code> of the two numbers.AoImplements the XOR instruction.43210CcBlake2 precompile. More details in <code>run</code>0Bjall stored blocks (block hash -&gt; block)Aglistener for new blocksBbThe blocks to clean the cache for.CkA tuple containing block number and the block directory \xe2\x80\xa6CjGets the semantic head and tail indices that constrain \xe2\x80\xa60CkBranch argument that can only be used with template option.CcThe branch in case git is used as dependency sourceEnReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</codedReturns return data.0nFormat buffer.DhBundles all transactions of the <code>TransactionWithMetadata</code> \xe2\x80\xa6CmAddress of the caller. Used for the first 20 bytes of the \xe2\x80\xa6BiCaller aka Author aka transaction signer.BhCaller aka Author aka transaction signerAfSet the caller address122CoTransaction caller, calls <code>ContextTr::tx().caller()</code>BaThis caller is invoking the call.AiCaller address of the EVM2BbImplements the CALLER instruction.21AcThe caller address.BfTracks the caller of the test function876788543524310BeThe original <code>msg.sender</code>.112BdReturns precompiles for Cancun spec.0BfMapping of chain aliases to chain data0BbThe chains to clean the cache for.BaThe chains to list the cache for.2222A`Chains to cache.AoThe list of chains in the cache4ChUpdates the account with new information and storage \xe2\x80\xa60C`Support for \xe2\x80\x9ccheat codes\xe2\x80\x9d / bypass functionsDdReturns the <code>CheatsManager</code> responsible for executing \xe2\x80\xa6BcContains state of custom overrides.AfThe checks to perform:CiChisel is a fast, utilitarian, and verbose Solidity REPL.CgIterates over non-overlapping subslices of a bit-slice.0AkCreate an Etherscan client.DgReturns the corresponding <code>VerificationProvider</code> for the keyAdThe Etherscan clientDgThe OpenChain client to fetch signatures from. <code>None</code> if \xe2\x80\xa6110FfMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by \xe2\x80\xa6FjMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the \xe2\x80\xa6FcMaps a <code>Sealed&lt;&amp;T&gt;</code> to a <code>Sealed&lt;T&gt;</code> by cloning the inner \xe2\x80\xa6120AaCommit the state.AoCommit changes to the database.BhCommits a bit into the proxied location.2211CbCreate a commit after installing the dependencies.3233122AhThe current commit hash.0BgCommit the transaction to the FormatterCcCommit the changeset to the database and adjust \xe2\x80\xa6BjThe NodeConfig the node was launched with.Blcontains the info how the fork is configuredBdReturns the config of the inspector.ClAdditional, user configurable context this Inspector has \xe2\x80\xa60AlSession Source configurationBcAdditional configs for test resultsoProject config.0433AlDocumentation configuration.044Ahadditional configuration0AfThe fuzz configurationAkThe invariant configuration87BaConfiguration for the dictionary.9DhReturns the <code>Config</code> as spit out by <code>forge config</code>DcReturns the path to the project\xe2\x80\x99s <code>foundry.toml</code> file.DgYields <code>bool</code> values directly, rather than proxy references.FfMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by \xe2\x80\xa6FjMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the \xe2\x80\xa6012CgMapping of address with storage copied to arbitrary \xe2\x80\xa6EnReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.EnReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.111011BnCalled when a contract is about to be created.BbSet the transaction kind to createDdComputes the <code>create</code> address for this address and nonce:2BjImplements the CREATE/CREATE2 instruction.32130CbCreates a new instance using the api key and chainCbImplementations of <code>Crypto</code> Cheatcodes.AeReturns the database.AhGet the database mutably1100DnReturns the current database implementation as a <code>&amp;mut dyn</code> \xe2\x80\xa6212211000AjGet the database reference00000BiVarious utilities to decode test results.AnDecodes a skip reason, if any.CjTries to decode an error message from the given revert \xe2\x80\xa6210210210DcTries to decode a precompile call. Returns <code>Some</code> if \xe2\x80\xa6AjDedent the buffer by deltaCgDeploys a contract and commits the new state to the \xe2\x80\xa6AdDeploys the contract11BlTry parsing a number\xe2\x80\x99s base from a string.AiMemory Region DescriptionCnViews the underlying memory of a bit-slice, removing alias \xe2\x80\xa610BaEIP-170: Contract code size limit0CnApply one of two functions depending on contents, unifying \xe2\x80\xa6CnDatabase implementations for <code>either::Either</code> type.10DfEncode this value as ASN.1 DER using the provided <code>Writer</code>.BmCreates a new error and ABI encodes it as \xe2\x80\xa6100AeErrors for this crateBfThe custom errors to use for decoding.AaCheatcode errors.CnReturns a map of all the <code>Error</code>s of this contract.210CkFilter children items for [ParseSource::$variant] variants.1211AdCommonly used errors4222224EgEquivalent to <code>Type::from_expression</code> + <code>Type::map_special</code> + \xe2\x80\xa6DdGenerate bindings for the <code>ethers</code> library (removed), \xe2\x80\xa6AaAll known events.AaCheatcode events.CnReturns a map of all the <code>Event</code>s of this contract.102601000000022CfReturns <code>true</code> if the account is not empty.0D`The bitwise or (<code>|</code>) of the bits in each flags value.ChExtend the map with all key-value pairs in the iterable.0ChExtends the state with state that is build on top of it.BcExtends reverts with other reverts.BjExtended functionality and customizations.0CcExtends the precompiles with the given precompiles.BkExtends the cache with multiple signatures.ChMerges the given raw call result into <code>self</code>.766543321ClExtend the remappings vector, leaving out the remappings \xe2\x80\xa62Clall transactions that  failed to be promoted and now are \xe2\x80\xa6BhReturns the number of tests that failed.0AiThe fields of the struct.000Cisupport for polling filters Support for polling based \xe2\x80\xa6Bgmatcher with all provided filter paramsDgReturns the flattened <code>FilterArgs</code> arguments merged with \xe2\x80\xa6BoHelpers for constructing and using FileFilters.CiFinish collecting coverage information and return the \xe2\x80\xa60BdFinish and return underlying buffer.CnHides transactions and receipts progress bar, leaving only \xe2\x80\xa622CfThe fork identifier. Set to zero if no fork is active.00000BkFormats the number into the specified base.CfCalculates the checksum of an address into the buffer.AiHow to format the output.1BoParse and format a string with default settings0DiFreeze this type, wrapping it in a <code>const</code> marker that may \xe2\x80\xa60AiSet the fuzzer inspector.CaThe fuzzer inspector and its state, if it exists.10010D`BLS12-381 G1 add precompile. More details in <code>g1_add</code>DgG1 addition call expects <code>256</code> bytes as an input that is \xe2\x80\xa610D`BLS12-381 G1 msm precompile. More details in <code>g1_msm</code>BlImplements EIP-2537 G1MSM precompile. G1 \xe2\x80\xa610D`BLS12-381 G2 add precompile. More details in <code>g2_add</code>DgG2 addition call expects <code>512</code> bytes as an input that is \xe2\x80\xa610D`BLS12-381 G2 msm precompile. More details in <code>g2_msm</code>BlImplements EIP-2537 G2MSM precompile. G2 \xe2\x80\xa610AdReturns the databaseAmInclude the global arguments.000AiReturns the goerli chain.BbHandles incoming JSON-RPC Request.ClReturns a reference to the map\xe2\x80\x99s <code>BuildHasher</code>.CkReturn a reference to the map\xe2\x80\x99s <code>BuildHasher</code>.CkReturn a reference to the set\xe2\x80\x99s <code>BuildHasher</code>.ClReturns a reference to the set\xe2\x80\x99s <code>BuildHasher</code>.3210Bjmapping from block number -&gt; block hashlblock headerBcReturns a new random hex identifierA`Globs to ignore.BoContracts to ignore when generating the report.oGlobs to ignoreCeIgnore verification for creation or runtime bytecode.111AjIndent the buffer by deltaBkReturns the number of input stack elements.000BeInserts a new (hash -&gt; state) pairD`The bitwise or (<code>|</code>) of the bits in two flags values.BcInserts a selector bit into a mask.CnInserts a bit at a given position, shifting all bits after \xe2\x80\xa6BfInserts a key-value pair into the map.CnSets the value of the entry, and returns the entry\xe2\x80\x99s old \xe2\x80\xa6DjSets the value of the entry with the <code>VacantEntry</code>\xe2\x80\x99s key, \xe2\x80\xa6BcInsert a key-value pair in the map.AnInsert the value into the set.DkSets the value of the entry to <code>value</code>, and returns the entry\xe2\x80\xa6CjInserts the entry\xe2\x80\x99s key and the given value into the \xe2\x80\xa615CmInserts the given key and value into the map, and returns \xe2\x80\xa6AhAdds a value to the set.CjSets the value of the entry, and returns an OccupiedEntry.CkSets the value of the entry with the VacantEntry\xe2\x80\x99s value.EdInserts a character into this <code>String</code> at byte position <code>idx</code>.BjInserts a single signature into the cache.ClInsert a dependency into the lockfile. If the dependency \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in two flags values.BcInserts a selector bit into a mask.CnInserts a bit at a given position, shifting all bits after \xe2\x80\xa6BfInserts a key-value pair into the map.CnSets the value of the entry, and returns the entry\xe2\x80\x99s old \xe2\x80\xa6DjSets the value of the entry with the <code>VacantEntry</code>\xe2\x80\x99s key, \xe2\x80\xa6BcInsert a key-value pair in the map.AnInsert the value into the set.DkSets the value of the entry to <code>value</code>, and returns the entry\xe2\x80\xa6CjInserts the entry\xe2\x80\x99s key and the given value into the \xe2\x80\xa615CmInserts the given key and value into the map, and returns \xe2\x80\xa6AhAdds a value to the set.CjSets the value of the entry, and returns an OccupiedEntry.CkSets the value of the entry with the VacantEntry\xe2\x80\x99s value.EdInserts a character into this <code>String</code> at byte position <code>idx</code>.BjInserts a single signature into the cache.CdInserts a log into the map and increments the count.CjTries to insert a mapping slot. Returns true if it was \xe2\x80\xa6DfInserts a new <code>NatSpec</code> into the <code>InlineConfig</code>.CbInserts the new state snapshot and returns the id.4FaReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CaInverts the value of each bit governed by the \xe2\x80\xacWhether all known bits in this flags value are set.CjReturns true if this is the StackSnapshotType::All variant10CaReturns true if all providers should be included.11AcIs end of the loop.0BaDetermines if the integer is odd.0CeReturns <code>true</code> if the error is out of gas.0DgReturns true if the  <code>Path</code> has a <code>sol</code> extensionDcReturns <code>true</code> if this error is a human-readable string.0EhIf true, encode <code>data</code> as <code>Error(string)</code>, otherwise encode it \xe2\x80\xa610DgReturns true if the  <code>Path</code> has a <code>yul</code> extensionBbImplements the ISZERO instruction.0FaReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</codeiSame as <code>Self::join_all</code> but consumes the typeB`Keccak-256 hashes arbitrary dataDjLabels to apply to the traces; format: <code>address:label</code>. Can \xe2\x80\xa6oAddress labels.C`The labels assigned to addresses during the callAjAddress labels from confignAddress labels10AoAddresses labeled during setup.2121432121132144BlReturns the precompiles for the latest spec.CbLoads the latest ChiselSession from the cache file1BlList accounts from a Ledger hardware wallet.AmUse a Ledger hardware wallet.000CfWhether the transaction should be sent as a legacy \xe2\x80\xa6A`Legacy bytecode.0C`Use legacy transactions instead of EIP1559 ones.CcSend a legacy transaction instead of an EIP1559 \xe2\x80\xa60CeThe size of the file, in bytes, this metadata is for.00000EnReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</codeaallows to enabled/disable loggingiLow word.000BjReturns the case with the lowest gas usage00AbConstructor MacrosCjUtility macros to help implementing opcode instruction \xe2\x80\xa610CaReturns the memory db used if not in forking mode000AgReturns the memory gas.AlEVM memory for data storage.0BoMemory operations (MLOAD, MSTORE, MSIZE, etc.).Bhshared memory set to this shared context32210B`Merges two <code>HitMaps</code>.00BaThe name of the method to executeoRPC method nameBePrevent race conditions during miningDjModexp precompile added in <code>EIP-198</code> and reprices in berlin \xe2\x80\xa60CgModify the <code>TxEnv</code> by using builder pattern.0CeGenerate the bindings as a module instead of a crate.BbImplements the MSTORE instruction.0BbImplements the MULMOD instruction.0ClEnable mutation testing. If passed with file paths, only \xe2\x80\xa6CmNumber of bytes required to represent the given number of \xe2\x80\xa60Akreturns a new random hex idBnGenerates single call from invariant strategy.DkNumber of <code>u64</code> limbs required to represent the given number \xe2\x80\xa60CeInstall without adding the dependency as a submodule.B`The number of the genesis block.BhThe initial number for the genesis blockCjReturns a copy of the underlying number as an unsigned \xe2\x80\xa6kThe number.AnNumber of wallets to generate.CkThe number of ancestor blocks of this block (block height).000000000Bktracks the overall applied timestamp offsetClCreates a new bit-pointer at a specified offset from the \xe2\x80\xa60AkThe offset to search after.0EhReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</codehReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</codelEVM opcode definitions and utilities. It contains opcode \xe2\x80\xa6AkReturns instruction opcode.AmThe opcode that was accessed.2100000BbImplements the ORIGIN instruction.0AlThe path to the output file.0AiReturns execution output.CmCalculate last gas spent and transform internal reason to \xe2\x80\xa6BiReturns the output data of the execution.AjOutput of the transaction.0BgReturns a reference to the output data.CfRetrieves a reference to the output bytes from the \xe2\x80\xa6BhThe output of the instruction execution.0CkThe return data, or the runtime bytecode of the created \xe2\x80\xa6BjThe path to output the flattened contract.8765543221AdThe compiler output.ClWrapper around stdout/stderr. This helps with supporting \xe2\x80\xa63AoWhether to use packed encoding.CmAn array or object containing the parameters to be passed \xe2\x80\xa6nRPC parametersCnThe decoded log parameters, a vector of the parameter name \xe2\x80\xa600AnParent node index in the arena0AgCurrent visited parent.1BnParse source code with a path for diagnostics.0AbThe parser module.BhReturns the number of tests that passed.0AoTrue if gas metering is paused.AhSolidity pragma version.BdReturns precompiles for Prague spec.0ClPrank information, mapped to the call depth where pranks \xe2\x80\xa6000000BkReturns the Rust standard prefix for a baseBnReturns the Rust standard prefix for the base.CiPretty-print the remappings, grouping each of them by \xe2\x80\xa6BoReturn a prettified string version of the value0DgPrints a message to <code>stdout</code> and reads a line from stdin \xe2\x80\xa6Ceall transactions that were pruned from the ready poolAgtypes for subscriptionsCabacklog of sets of transactions ready to be minedCcCreates a new fixed byte array with the default \xe2\x80\xa6DhCreates a new <code>FixedBytes</code> with the default cryptographic \xe2\x80\xa6DcGenerates a random <code>SeedableRandomState</code>, similar to \xe2\x80\xa60DiCreates a new <code>Uint</code> with the default cryptographic random \xe2\x80\xa6333211033AcThe raw transactionAgReason for the success.AdReason for the halt.AbThe revert reason.CmIf there was a revert, this field will be populated. Note \xe2\x80\xa60BgThe reason the setup failed, if it did.4312BoThe expected revert data returned by the revertCiThe expected data returned by the revert, None being any.4CnDerives the revert reason based on the cached data. Should \xe2\x80\xa64CgForward the Comments function implementation to the \xe2\x80\xa6CiCalculates the final gas refund amount, including any \xe2\x80\xa60CcCalculates and applies gas refunds based on the \xe2\x80\xa6110DgAttempts to unpack the bit-domain as a <code>Region</code> variant. \xe2\x80\xa6000CgRemoves the cache file for the given hash, if it existsCiRemoves the transactions associated with the given hashesCeThe intersection of a source flags value with the \xe2\x80\xa6CnRemoves a bit at a given position, shifting all bits after \xe2\x80\xa6CnRemoves a key from the map, returning the value at the key \xe2\x80\xa6CaTakes the value out of the entry, and returns it.DkRemove the key-value pair equivalent to <code>key</code> and return its \xe2\x80\xa6DiRemove the value from the set, and return <code>true</code> if it was \xe2\x80\xa6CiRemove the key, value pair stored in the map for this \xe2\x80\xa60CkRemoves a value from the set. Returns whether the value wasCkTakes the value out of the entry, and returns it. Keeps \xe2\x80\xa6FcRemoves a <code>char</code> from this <code>String</code> at byte position <code>idx</code> and \xe2\x80\xa6BgRemoves a dependency from the lockfile.:9876544321CcRemoves all existing permissions for the given pathCjRemoves the state snapshot with the given <code>id</code>.DcCreates a bit-vector by repeating a bit-slice <code>n</code> times.CgCreates a new bit-vector by repeating a bit for the \xe2\x80\xa610DkCalls a closure <code>f</code> the number of times specified in the key \xe2\x80\xa6BmExecute previous transaction and finalize it.00EhIf set to <code>true</code>, consumes the next call from <code>last_sequence</code>, \xe2\x80\xa6111000AbRuns the reporter.AmThe gas consumed by this testBdThe report type to use for coverage.ChResizes the bit-vector to a new length. New bits are \xe2\x80\xa6EhResizes the memory in-place so that <code>len</code> is equal to <code>new_len</code>\xe2\x80\xa6AjResizes memory to new size210CjResult of the EVM execution. Containing both execution \xe2\x80\xa6A`Execution result00BhThe result of the instruction execution.CjThe result of the interpreter\xe2\x80\x99s execution, including \xe2\x80\xa6BgThe result of the interpreter operation210AkThe raw result of the call.DdThe result returned by the API. Will be <code>None</code> if the \xe2\x80\xa6nTest outcomes.B`The result of the executed test.CaThe test result. Returned after running the test.988876576544ClResumes submitting transactions that failed or timed-out \xe2\x80\xa6CiTries loading the resumed state from the cache files, \xe2\x80\xa6AkResume paused gas metering.C`Retains only the bits that the predicate allows.CeRetains only the elements specified by the predicate.CnScan through each key-value pair in the map and keep those \xe2\x80\xa6CkScan through each value in the set and keep those where the2CgRetains only the characters specified by the predicate.432130CgReverts the state change recorded by this journal entry00CgRevert account to previous state and return true if \xe2\x80\xa6C`Reverts the state changes by N transitions back.AkEIP-140: REVERT instructionCdRemoves all newly added entries from the dictionary.44432100CkRevert values and addresses collected during the run by \xe2\x80\xa6EdConfigures an <code>axum::Router</code> that handles <code>EthApi</code> related \xe2\x80\xa6BfA default RPC endpoint for this chain.00000CjIterates over subslices separated by bits that match a \xe2\x80\xa60CeRunner that will generate the call from the strategy.lChiselRunnerAfThe Forge test runner.2jThe fuzzerA`Proptest runner.44BkReturns the safety of this cheatcode group.CkWhether the cheatcode is safe to use inside of scripts. \xe2\x80\xa610010AmEIP712 schema for the struct.A`The call scheme.AaThe create scheme101010CaSet whether to enable script execution inspector.0CkExecutes the method that will collect all broadcastable \xe2\x80\xa6CeImplementations of <code>Scripting</code> cheatcodes.Afpath of the script dir3DiComputes the bit selector corresponding to <code>self</code> under an \xe2\x80\xa6CmComputes the bit selector corresponding to <code>self</code>.CfProduces a single-bit selection mask from a bit-index.0ClCreate bindings only for contracts whose names match the \xe2\x80\xa63211Bhthe recovered sender of this transactionAmAddress which makes the call.jThe senderChThe address which will be used to deploy the initial \xe2\x80\xa602CbThe address which will be executing tests/scripts.BaThe sender to the spinner thread.BmThe address which will be executing all testsAlThe account that calls testsBnThe address which will be executing all tests.07AlAdds given address as senderChaxum RPC server implementations Contains the code to \xe2\x80\xa6AcSet the transaction00000BcPrints a formatted error to stderr.AgCurrent shrunk call id.CmCreate a channel pair that\xe2\x80\x99s used to propagate shutdown \xe2\x80\xa6CaReturns signer configured by provided parameters.AjDo not print log messages.CdMakes the node silent to not emit anything on stdout1BnCreate new transition state containing one \xe2\x80\xa60BaReturns the Sophon mainnet chain.A`The source code.BgReturns the <code>SessionSource</code>.1AfThe parse tree source.lSource file.01Aothe <code>env::var</code> error0BbThe source where the key was found0CcThe source code that contains the AST being walked.6DgModifies <code>self.drain()</code> so that the removed bit-slice is \xe2\x80\xa6CkCreates a splicing iterator that replaces the specified \xe2\x80\xa60100CjIterates over subslices separated by bits that match a \xe2\x80\xa60BoSets storage value of account address at index.BjStores the storage value in Journal state.AdStores storage slot.11AaSstore, calls \xe2\x80\xa60BbImplements the SSTORE instruction.43233110BcHistoric states of previous blocks.AmThe states at a certain blockCgState management and tracking. State management and \xe2\x80\xa60AdAccount status flagsoAccount status.AgCurrent account status.1AeAccount status flags.1201AnReturns the status of the callAmThe final status of the call.CkThe current status of the cheatcode. E.g. whether it is \xe2\x80\xa6ClThe status of the response \xe2\x80\x9c1\xe2\x80\x9d = success | \xe2\x80\x9c0\xe2\x80\x9d = \xe2\x80\xa6CeThe test status, indicating whether the test case \xe2\x80\xa68767567562432243AmThe <code>stderr</code> data.0000CeGets stderr as a <code>io::Write</code> trait object.1CdThe optionally hex-decoded <code>stdout</code> data.0000CeGets stdout as a <code>io::Write</code> trait object.1FaReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</codeeThe string to format.BgHelpers for dealing with quoted stringsCbImplementations of <code>String</code> cheatcodes.C`Parses a string until the next format specifier.ChSystem information instructions (ADDRESS, CALLER, etc.).0BmAddress of account that received the balance.000BgThe address to be added in access list.11110AoID of target contract artifact.1111BhAdds write permissions to a bit-pointer.0CgHelper to convert a string number into a comparable oneCgEncodes hex data or list of hex data to hexadecimal rlpCcReturns the string representation of the call kind.00AoConverts an eth amount into weiDfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa60AcGet the topic list.CgThe topics of the log, including the signature, if any.010000000000AcCollects all tracesAfThe traces of the callAgThe traces of the call.AgCounter example traces.CdExemplary traces for a fuzz run of the test functionBmGets a reference to the recorded call traces.kCall tracesChOptionally enable traces for the REPL contract executionfTracesAiCall traces of the setup.46587AhExtends the debug arena.9885765nTrace entries.BhHelper traits for writing documentation.AeCommonly used traits.BlList accounts from a Trezor hardware wallet.AmUse a Trezor hardware wallet.000DoSets the transient storage value of <code>address</code> at <code>index</code>.AoStores transient storage value.BlStore transient storage tied to the account.11AaTstore, calls \xe2\x80\xa60CfEIP-1153: Transient storage opcodes Store value to \xe2\x80\xa643233110C`The hash of the transaction that was broadcasted00000CiRepresent the type of transaction among CALL, CREATE, \xe2\x80\xa600000CiUnseal the inner item, discarding the hash. Alias for \xe2\x80\xa60DoUnwraps the given <code>Option&lt;T&gt;</code> or reads stdin into a String \xe2\x80\xa6CgAbsorbs additional input. Can be called multiple times.CiUpdate new values of transition. Don\xe2\x80\x99t override old \xe2\x80\xa610EdUpdates the <code>foundry.toml</code> file this <code>Config</code> ias based on \xe2\x80\xa6CkAn iterator visiting all values in arbitrary order. The \xe2\x80\xa6CkReturn an iterator over the values of the map, in their \xe2\x80\xa6CdReturn an iterator over the values of the map slice.210CnMapping of arbitrary storage addresses to generated values \xe2\x80\xa6CgPerform a reverse lookup to verify that the name is \xe2\x80\xa6CiPerform a normal lookup to verify that the address is \xe2\x80\xa6BkComplete <code>BitOrder</code> VerificationAoVerify contract after creation.1CiVerifies all the contracts found in the receipts of a \xe2\x80\xa6BoThe <code>forge verify-bytecode</code> command.CjSends the actual verify request for the targeted contract.CkSets whether we are going to verify the contracts after \xe2\x80\xa6CfWhether we are going to verify the contracts after \xe2\x80\xa6CgUse the Yul intermediate representation compilation \xe2\x80\xa600CnIf set to true, changes compilation pipeline to go through \xe2\x80\xa6CeCreate a .vscode/settings.json file with Solidity \xe2\x80\xa6BhReturns a reference to the inner writer.0ClThe module for writing and formatting various parse tree \xe2\x80\xa61AeStorage slots writes.EkReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</codeaReturns the ZKSync mainnet chain.BmThe <code>0x30</code> (\xe2\x80\x9cADDRESS\xe2\x80\x9d) opcode.0AlBn128 add precompile addressAlBn128 mul precompile addressAmBn128 pair precompile addressBoAddress of the KZG point evaluation precompile.443210CkAccount type used inside Journal to track changed to state.0BdConvert a private key to an address.CkAn address without signer. Used for read-only calls and \xe2\x80\xa6BhAn Ethereum address, 20 bytes in length.000ChIf an address is provided, we sign the authorization \xe2\x80\xa60AiPerform bytecode analysis0Cm<code>HashMap</code> optimized for hashing <code>B256</code>.0Cm<code>HashSet</code> optimized for hashing <code>B256</code>.0BmThe <code>0x31</code> (\xe2\x80\x9cBALANCE\xe2\x80\x9d) opcode.000BmThe <code>0x48</code> (\xe2\x80\x9cBASEFEE\xe2\x80\x9d) opcode.000BbGives access to the revm::DatabaseDcProvides the underlying <code>revm::Database</code> implementation.000AaInvalid file pathBeGet the balance of an account in wei.BaThe account\xe2\x80\x99s balance was read.00000AkGet the basefee of a block.AhMulti-Bit Selection Mask0AmRead-Only Semivolatile Handle0hBit View0f(type)BmThe <code>0x46</code> (\xe2\x80\x9cCHAINID\xe2\x80\x9d) opcode.000BmThe <code>0xF5</code> (\xe2\x80\x9cCREATE2\xe2\x80\x9d) opcode.000CnA Database implementation that stores all state changes in \xe2\x80\xa6000BaA log with optional decoded data.00AjGet the Ethereum chain ID.BnChain identifier type (introduced in EIP-155).000AnThe account has been modified.00000AeThe closing characterBbThe natspec documentation comment.0CeModule containing a contract\xe2\x80\x99s types and functions.C`Generated by the following Solidity interface\xe2\x80\xa610BlFetches the content of the transaction pool.CgEVM context contains data that EVM needs for execution.BnThe context type that will be used in the EVM.0CiThe context type that implements ContextTr to provide \xe2\x80\xa60mContext type.3332211033CmCurrent context of the Formatter (e.g. inside Contract or \xe2\x80\xa6ChGenerate a deterministic contract address using CREATE2.BeCreate scheme of <code>CREATE2</code>000CnRepresents a contract creation operation using the CREATE2 \xe2\x80\xa6BbRepresents a CREATE2 broadcast tx.22220100001CmWhen account is newly created we will not access database \xe2\x80\xa60C`Expects revert from the next non-cheatcode call.Alop-stack deposit transactionBnA Doc Line comment (e.g. <code>/// ...</code>)AdEIP-1559 transactionAdEIP-2930 transactionAdEIP-4844 transactionAdEIP-7702 transactionBkEIP-1559 Fee market change transaction type0000000BeEIP-2930 Access List transaction type0000000AnEIP-4844 Blob transaction type0000000AkEIP-7702 delegated bytecode0AeEIP-7702 decode error1BnEIP-7702 Set EOA account code transaction type00020002120CmAn empty database that always returns default values when \xe2\x80\xa600000CkIndicates that a bit-slice\xe2\x80\x99s contents are entirely in \xe2\x80\xa6000CaConfigures the executor environment during tests.DhThe escaped character e.g. <code>n</code> in <code>&quot;\\n&quot;</code>CmThe sign method calculates an Ethereum specific signature \xe2\x80\xa6Ed<code>EvmArgs</code> and <code>EnvArgs</code> take the highest precedence in the \xe2\x80\xa6AcMine a single blockAaA Generic FailureAoContains all registered filtersAf<code>fixture*</code>.CkFlatten a source file and all of its imports into one file.BiCLI arguments for <code>forge fmt</code>.ChRepresents the input URL for a fork with an optional \xe2\x80\xa6CfTrait for defining a frame type used in EVM execution.000BbConvert binary data into hex data.AnError converting hex to bytes.0AmDecodes RLP hex-encoded data.BiThe from field is set on the transaction.AoConvert wei into an ETH amount.A`General categoryDbReturns the Fork backend for the <code>ForkId</code> if it exists.CkThe main implementation of Ethereum Mainnet transaction \xe2\x80\xa6000CnA custom context type for Foundry specific error reporting \xe2\x80\xa6C`A <code>HashMap</code> using the default hasher.0CjA hash map implemented with quadratic probing and SIMD \xe2\x80\xa6AbType alias for \xe2\x80\xa62210C`A <code>HashSet</code> using the default hasher.01EdA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.1120BeA collection of <code>HitMap</code>s.00BmThe <code>0xFE</code> (\xe2\x80\x9cINVALID\xe2\x80\x9d) opcode.000C`Map from instruction counter to program counter.CjFetches a textual summary of each transaction in the pool.CcGet specialized information about a smart contract.BeInstall one or multiple dependencies.o<code>%i</code>0B`Invalid transaction not executedlInvalid callCnIndicates a failed recovery attempt where no valid address \xe2\x80\xa60AmExclusive Bit-Slice IterationCnA mutable iterator over the entries of a <code>HashMap</code>.D`A mutable iterator over the entries of an <code>IndexMap</code>.210BnA journal of state changes internal to the EVM0lJournal type100110100BnGas cost per byte of data in LOG instructions.0AmAn Ethereum event log object.000AnThe ModExp precompile address.BmThe <code>0x53</code> (\xe2\x80\x9cMSTORE8\xe2\x80\x9d) opcode.000CcPrints the maximum value of the given integer type.AcDump the raw memoryAgGlobal test identifier.CiConvenient struct to hold in-line per-test configurations0D`Helper type to parse both <code>u64</code> and <code>U256</code>0BhThe opening character of a quoted stringAgOnly cache these chainsCaMaps from program counter to instruction counter.CmTransaction was successfully added but not yet queued for \xe2\x80\xa6BaComes after the code it describesBdOnly visible in the current contract000BaShared Bit-Slice Reverse Chunking0BbShared Bit-Slice Reverse Splitting0BnGet the transaction receipt for a transaction.CmThe cheatcode has been removed and is no longer available \xe2\x80\xa6000AnRepresents a JSON-RPC request.AjThe request type to expect00BeRequest that\xe2\x80\x99s send to the handler.CnFor a require(x) condition: replace x with true; replace x \xe2\x80\xa6ClRetrieves the resolved version(s) of the compiler within \xe2\x80\xa6CdContains reverts of multiple account in multiple \xe2\x80\xa6BkBoth, plain state and reverts, are retained10BhCLI arguments for <code>cast rpc</code>.CkThe auth token to be used for RPC endpoints It works in \xe2\x80\xa6BhRepresentation of a single JSON-RPC callCmContainer for information about RPC-endpoints used during \xe2\x80\xa6BhCLI arguments for <code>cast run</code>.AoThe SHA-256 precompile address.BiExclude all <code>.s.sol</code> contractsA`Session categoryAkSets the code of a contractCeVariants for selecting the <code>Solc</code> instanceAkSoldeer dependency manager.CbFunctions needed for Interpreter Stack operations.0BcRepresents a state at certain pointCaGet the raw value of a contract\xe2\x80\x99s storage slot.AeReturned successfullyCfSuccessful execution with the specific success reason.AjA Generic Dispatch Success21C`Cheatcodes that interact with how a test is run.000BdConvert hex data to an ASCII string.AhState with known TxKind.CeThe requested address is too high, and wraps to zero.0DeThe requested length exceeds the <code>BitSpan</code> length ceiling.0CmOnly when account is marked as touched we will save it to \xe2\x80\xa6CnEVM touched this account. For newer hardfork this means it \xe2\x80\xa60100BdThe index of transaction in a block.000AkThe nonce of a transaction.000EhThe inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes \xe2\x80\xa6000BmUnknown <code>forge</code> execution context.0000000mUnknown kind.1BfGas cost for very low-cost operations.0BjRepresents the version of the RPC protocolCmRequires a specific solc version, that\xe2\x80\x99s either already \xe2\x80\xa6CiA trait that is invoked while traversing the Solidity \xe2\x80\xa6CeContainer for all the <code>Vm</code> function calls.00000BfWallets is a collection of WalletData.CcCloneable wrapper around <code>WalletsInner</code>.000CiWarnings emitted during loading or managing Configuration0AcBit-Slice Windowing0C`A signal that fires the shutdown, fired on drop.CjReturns the <em>loaded</em> Account for the given address.AhGets account from state.AkAccount information revert.CcAccount information and storage, if account exists.110ClThe account that was accessed. It\xe2\x80\x99s either the account \xe2\x80\xa6BgThe account whose storage was accessed.54323321010101010BcAdds a library file to the project.BoCompute $\\mod{\\mathtt{self} + \\mathtt{rhs}}_\xe2\x80\xa60CeComputes <code>lhs += a</code> and returns the carry.0AeThe contract address.BbThe contract address to filter on.BbAddress to sign authorization for.BbThe address of the message signer.AgThe address to convert.AeThe deployer address.5AiThe contract\xe2\x80\x99s address.BiResolves the name to an Ethereum Address.BcReturns a reference to the address.BnReturns the address of the delegated contract.BmGets the address of the base storage element.BdReturns the created address, if any.AhReturns account address.CfReturns the address that this account is delegated to.BeReturns an optional address if valid.CcGet the <code>address</code> for the authorization.CjAccount addresses that would be loaded at the start of \xe2\x80\xa6BaThe address of the authorization.45AjAddress of warmed account.BcAddress of account to be destroyed.BcAddress of account that is touched.C`Address of account that had its balance changed.CkAddress of account that had its nonce changed. Nonce is \xe2\x80\xa6CgAddress of account that is created. On revert, this \xe2\x80\xa6C`Address of account that had its storage changed.ClAddress of account that had its storage warmed. By SLOAD \xe2\x80\xa6CjAddress of account that had its transient storage changed.BmAddress of account that had its code changed.98765432109876543210BaCustom contract creation address.BcThe address which emitted this log.CeConverts a sequence of string literals containing \xe2\x80\xa61022AbAddress of account000ChAn optional address associated with the create operation4BcImplements the ADDRESS instruction.1AmReturns reference of address.AjAddress of warmed account.BcAddress of account to be destroyed.BcAddress of account that is touched.C`Address of account that had its balance changed.CkAddress of account that had its nonce changed. Nonce is \xe2\x80\xa6CgAddress of account that is created. On revert, this \xe2\x80\xa6C`Address of account that had its storage changed.ClAddress of account that had its storage warmed. By SLOAD \xe2\x80\xa6CjAddress of account that had its transient storage changed.BmAddress of account that had its code changed.B`The target address of this call.lThe address.BdThe address of the deployed contractAmAddress of the test contract.nCalled addressCdThe address at which the test contract was deployed.BnThe address of the contract on the blockchain.AnThe contract address to clone.BaThe address of the test contract.BdReturns the created address, if any.AhReturns account address.CfReturns the address that this account is delegated to.BeReturns an optional address if valid.CcGet the <code>address</code> for the authorization.CjAccount addresses that would be loaded at the start of \xe2\x80\xa6BaThe address of the authorization.45AjAddress of warmed account.BcAddress of account to be destroyed.BcAddress of account that is touched.C`Address of account that had its balance changed.CkAddress of account that had its nonce changed. Nonce is \xe2\x80\xa6CgAddress of account that is created. On revert, this \xe2\x80\xa6C`Address of account that had its storage changed.ClAddress of account that had its storage warmed. By SLOAD \xe2\x80\xa6CjAddress of account that had its transient storage changed.BmAddress of account that had its code changed.98765432109876543210BaCustom contract creation address.BmGets the address of the base storage element.BnReturns the address of the delegated contract.BcThe address which emitted this log.CeConverts a sequence of string literals containing \xe2\x80\xa610>=<;:98765AbAddress of account00055ChAn optional address associated with the create operationBcImplements the ADDRESS instruction.71AmReturns reference of address.AmAddress of the test contract.B`The target address of this call.lThe address.BdThe address of the deployed contractAdThe contract address0BfThe address of the contract to verify.0CbIf present, check originating address against thisAcTarget of the deal.AbExecution context.BaReturns the current call address.16987BhType aliases for common primitive types.DmType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.BmReturns all the aliases of <code>self</code>.21CeAnalyzes the given traces and generates a gas report.CnAll item anchors for the codebase, keyed by their contract \xe2\x80\xa600AbEtherscan API URL.EdViews <code>self</code> as an immutable bit-slice region with the <code>O</code> \xe2\x80\xa6000AkReturns the sign character.0BfReturns a reference to the inner Uint.0Abblockchain BackendChHolds all blockchain related data In-Memory only for nowCeFoundry\xe2\x80\x99s main executor backend abstraction and \xe2\x80\xa6BgReturns a reference to the EVM backend.BdThe underlying <code>Backend</code>.BmIn-memory REVM db for the session\xe2\x80\x99s runner.32132DdThe underlying <code>revm::Database</code> that contains the EVM \xe2\x80\xa62422BfResponsible for fetching missing data.AcCopy of the sender.Berequest retries for spurious networksCmThe interval we are currently waiting for before making a \xe2\x80\xa6BjThe balance of every dev account in Ether.AlBalance for genesis accountsBeReturns balance of the given account.D`Gets balance of <code>address</code> and if the account is cold.A`Account balance.AfBalance of the sender.AlBalance that is transferred.00AbBalance, calls \xe2\x80\xa60BcImplements the BALANCE instruction.25432222110oThe input base.0oThe input base,CjThe base fee per gas, added in the London upgrade with \xe2\x80\xa60000CaBlock basefee, calls ContextTr::block().basefee()0AhEIP-3198: BASEFEE opcode22222110ChComputes the bitwise AND of two <code>FixedBytes</code>.0000000CfReturns the dynamic length of this number in bits, \xe2\x80\xa60ChComputes the bitwise XOR of two <code>FixedBytes</code>.0000000ClCounts the number of bits in a value of type <code>T</code>.0BmBitwise operations (AND, OR, XOR, NOT, etc.).0BoWhether to decode active buffer as utf8 or not.CjCreate a new builder for constructing a <code>TxEnv</code>CbReturns builder instance for further manipulation.BhReturn the builder that build the State.BkCreates a new <code>ExecutorBuilder</code>.3210AaDebugger builder.AoCreates a new debugger builder.2DjAdapts the iterator to yield regular <code>&amp;bool</code> references \xe2\x80\xa60DiAdapts the iterator to yield <code>bool</code> values rather than the \xe2\x80\xa60CiReturns a list of all addresses that appeared as callers.00CjThe config supports relative paths and tracks the root \xe2\x80\xa6AmParses the first inline link.BiThe configuration environment and spec idCeReturns a reference to the configuration environment.CcThe configuration environment with handler settings101010AgThe chain\xe2\x80\x99s Chain ID.BaThe chain ID of the current fork.1010101010BhReturns the chain ID of the environment.AhEIP-1344: ChainID opcode1011AiState changeset tracking.0AoCharacter set to use in output.AoCreate a chunk given a callbackAcCleans the project.EeIf set, it collects <code>stack</code> and <code>memory</code> values for fuzzing \xe2\x80\xa6CkCollects all the data gathered during inspection into a \xe2\x80\xa61CnRuns tests, collects coverage data and generates the final \xe2\x80\xa61222122CaCreates a new mask with a selector bit activated.0AlThe command to be evaluated.BhCommand must be one of the following \xe2\x80\xa6lDoc comment.CeModified from <code>rustc_ast::util::comments</code>.AdCompile the contractCmParses user input and compiles the contracts depending on \xe2\x80\xa6C`Support for compiling foundry_compilers::ProjectAeCompiles the project.CeReturns the matrix product <code>self * other</code>.0FbReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</codejcontains all named <code>ResolvedEtherscanConfig</code> or an error if \xe2\x80\xa6CkConnects the underlying transport, depending on the URL \xe2\x80\xa6E`Consumes the <code>OutFrame</code>, returning a <code>FrameToken</code> that \xe2\x80\xa60AlThe underlying parsed items.0Bmcontains all the subscription related contextDcThis module contains <code>Context</code> struct and implements \xe2\x80\xa6B`Context trait and related types.10AjThe preprocessors results.oParser context.10CbDebugger context and event handler implementation.CfControl flow instructions (JUMP, JUMPI, REVERT, etc.).0EnCopies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and \xe2\x80\xa60CiCopies the project\xe2\x80\x99s root directory to the given targetDdComputes the <code>CREATE2</code> address of a smart contract as \xe2\x80\xa60BjThe creation time listed in this metadata.00000CdReturns a mutable reference to the execution context000CgReturns an immutable reference to the execution context000CnReturn candidate shrink sequence to be tested, by removing \xe2\x80\xa6BiOptional complementary decoded call data.BhOptional complementary decoded log data.1010BdTrace decoder used to decode traces.C`Extends the identified contracts from a decoder.BiCreates a default <code>fx</code> hasher.EmCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value \xe2\x80\xa6BjConstructs a new <code>RandomState</code>.DlCreates a new <code>DefaultHasher</code> using <code>new</code>. See its \xe2\x80\xa6BeReturn an empty <code>IndexMap</code>BeReturn an empty <code>IndexSet</code>EmCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for \xe2\x80\xa6BeCreates an empty <code>String</code>.BfUse all mutator from registry::default87654321BaCreate a new error with a messageBjCreates a new error with a custom message.01011De\xe2\x9a\xa0\xef\xb8\x8f Computes the quotient and remainder of a <code>u128</code> \xe2\x80\xa60Ck\xe2\x9a\xa0\xef\xb8\x8f Computes the quotient of a 192 bits divided by a \xe2\x80\xa60Bd\xe2\x9a\xa0\xef\xb8\x8f Compute single limb division.0Bd\xe2\x9a\xa0\xef\xb8\x8f Compute double limb division.0Ce\xe2\x9a\xa0\xef\xb8\x8f In-place Knuth long division with implicit \xe2\x80\xa60CmComputes <code>self / rhs</code> and <code>self % rhs</code>.0BkEIP-2930 Access list transaction interface.0BbEIP-3860: Limit and meter initcode0AbEIP-4844 constants0AbEIP-7702 bytecode.CcEIP-7702 Account Abstraction transaction interface.AbEIP-7702 constants120BdEIP-7823 Set upper bounds for MODEXP0CcEIP-7825: Transaction Gas Limit Cap Introduce a \xe2\x80\xa60CiTODO dont have specific EIP. It is part of: EIP-7907: \xe2\x80\xa60CnConstants for EIP-7918: Blob base fee bounded by execution \xe2\x80\xa60BbReturns the elastos mainnet chain.BcThe address of the log\xe2\x80\x99s emitter.00000000000BgWhether the logger is currently enabledDiAttempts to unpack the bit-domain as an <code>Enclave</code> variant. \xe2\x80\xa6000CjEnd invariant test run by collecting results, cleaning \xe2\x80\xa600BjReturns all (name, bytecode, source) sets.00AoEntropy to use for the mnemonicCcReturns a mutable reference to the EVM environment.00DjComputes the storage slot as specified by <code>ERC-7201</code>, using \xe2\x80\xa60CbReturns whether the helper is in an errored state.EcCall <code>eth_signTransaction</code> using the <code>--from</code> argument or \xe2\x80\xa6BgConfigures a new <code>revm::Env</code>0oGlobs to ignoreCjExecutes all transactions and puts them in a new block \xe2\x80\xa6CjExecutes the EthRequest and returns an RPC ResponseResult.BdExecutes the given command directly.0BeRuns the source with the ChiselRunner11CnExecutes the script and returns the state after execution. \xe2\x80\xa6CkExecutes command, applies stdin function and returns outputAgFile locking utilities.EfSets <code>block.basefee</code>. Function with signature <code>fee(uint256)</code> \xe2\x80\xa600000CfPerforms a foreign function call via the terminal. \xe2\x80\xa600000DcLoad the <code>Config</code> based on the options provided in self.0AkReturns the default figmentAiTracks all active filters0BcWhether to flatten the source code.CgReturns an iterator over the list\xe2\x80\x99s addresses and \xe2\x80\xa6CnFlattens a nested cache by applying the outer cache to the \xe2\x80\xa610BiFlatten the source code before verifying.CiFlattens the contracts into functions, events and errors.BbReturns the fraxtal mainnet chain.DgCreates a new <code>Chain</code> by wrapping a <code>NamedChain</code>.C`Returns mutable reference to interpreter result.0BiThe genesis to use to initialize the nodeA`Genesis settingsAdInitialised genesis.2ClReads a single bit out of the memory system according to \xe2\x80\xa6000CgReturns the <code>Env</code> of the given fork, if any.000EfMutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> \xe2\x80\xa6ClGets a mutable reference to a single bit or a subsection \xe2\x80\xa6CmReturns a mutable reference to the value corresponding to \xe2\x80\xa6CcGets a mutable reference to the value in the entry.CkGets a mutable reference to the entry\xe2\x80\x99s value in the map.00BmReturns the precompile for the given address.54321110CfRuns <code>git add .</code> inside the project\xe2\x80\x99s dirCnApply the callback into an indent group. The first line of \xe2\x80\xa6AeContains RPC handlersBhthe handler for the websocket connection0CgHandler implementation for orchestrating EVM execution.CbHandler implementations for inspector integration.10CeChannel to send <code>Request</code>s to the handler.0BeUse the Hardhat-style project layout.0CaReturns the default config but with hardhat pathsBmReturns true if the Etherscan API key is set.AkThe wallet derivation path.AaSets http headersB`The headers to use for requests.AhThe hex data to convert.0BkReturns the case with the highest gas usage00Acchisel history fileBcEthereum holesky list of hardforks.AjReturns the holesky chain.CjRanges of trace steps to ignore in format (start_node, \xe2\x80\xa60CdMapping from (start_node_idx, start_item_idx) to \xe2\x80\xa61AaGlobs to include.CmInspect the EVM with the given inspector and transaction, \xe2\x80\xa60DgExecutes the configured transaction of the <code>env</code> without \xe2\x80\xa6DeExecutes the configured test call of the <code>env</code> without \xe2\x80\xa6ChInspect a contract element inside of the current session33212112AiInstalls all dependenciesEeInstalls the Foundry <code>eyre</code> and <code>panic</code> hooks as the global \xe2\x80\xa6CmConsumes the type and returns the address of the contract \xe2\x80\xa60CfCompute $\\mod{\\mathtt{self}^{-1}}_{\\mathtt{modulus}}$.Bl\xe2\x9a\xa0\xef\xb8\x8f Modular inversion using extended GCD.10CkAll transactions that were attempted to be included but \xe2\x80\xa6ClAll transactions that were invalid at the point of their \xe2\x80\xa6BfCreates a new invalid memory instance.B`Instantiate a new invalid Stack.BaCreate a new invalid interpreter.C`Invalid opcode. This opcode halts the execution.3210CmCalculates the difference between the number of input and \xe2\x80\xa6000AjIf the access was a write.00000BdReturns true if frame is call frame.CcReturns true if the transaction is a contract call.BhReturns true if it is <code>CALL</code>.BlReturns <code>true</code> if action is call.3210BhReturns true if this is the cast preset.BfRepresents if the storage slot is coldAiIs account is cold loaded001000BmWhether we\xe2\x80\x99re forked off some remote clientAfReturns true if forkedCkReturns true if this is the StackSnapshotType::Full variant000CnReturns <code>true</code> if this is the result of a fuzz testBkReturns true if execution result is a Halt.CkReturns true if the EVM has experienced an exceptional halt10BhReturns true if this is an item variant.0DeReturns whether the output format is <code>OutputFormat::Json</code>.CgReturns <code>true</code> if the output format is JSON.CgReturns true if the output format is <code>Json</code>.ChReturns true if the opcode is a legacy jump instruction.0DfReturns <code>true</code> if the action is to keep the state snapshot.000CjReturn true if the value is the <code>Left</code> variant.0C`Returns true if no providers should be included.BiTests if a bit-pointer is the null value.0CnReturns true if the opcode is a <code>PUSH</code> instruction.0BcReturns whether this value is safe.00B`Returns true if account is some.0CgReturns true if the output format is <code>Text</code>.BmReturns <code>true</code> if no bits are set.BoReturns <code>true</code> if the value is zero.FbReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is \xe2\x80\xa6C`Returns <code>true</code> if the number is zero.3210CkWhether to enable isolation of calls. In isolation mode \xe2\x80\xa6BaWhether to enable call isolation.BeWhether to enable isolation of calls.0BbThe item ID this anchor points to.00DcThis module contains <code>Journal</code> struct and implements \xe2\x80\xa6oGet the journalCfThe journal of state changes, one for each transaction0011CfGet the journal entries that are created from last \xe2\x80\xa6132111022111AkThe version of the protocolCnInvoked when current step is a JUMPDEST preceded by a JUMP \xe2\x80\xa6CiGets a mutable reference to the entry\xe2\x80\x99s key, either \xe2\x80\xa6CiGets a mutable reference to the entry\xe2\x80\x99s key in the map.10B`Return left value or given value0AjBig-Endian Integer Loading0Bl<code>Msb0</code> Big-Endian Integer LoadingBl<code>Lsb0</code> Big-Endian Integer Loading2201AmLittle-Endian Integer Loading0Bo<code>Lsb0</code> Little-Endian Integer LoadingBo<code>Msb0</code> Little-Endian Integer Loading2210DbEvent with signature <code>log_int(int256)</code> and selector \xe2\x80\xa600Becommandline output User facing LoggeriLow word.00000000000CnSpecialised Bloom filter that sets three bits out of 2048, \xe2\x80\xa60ElReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</codecEthereum mainnet list of hardforks.CiCreates a new mainnet context with default configuration.000AjReturns the mainnet chain.D`Maps <code>EvmEnv&lt;OpSpecId&gt;</code> to <code>EvmEnv</code>.AaThe compiled globDfReturns <code>true</code> if the given identifier matches this filter.00CcReturns the maximum value of the given integer typeBmReturns the message associated with the errormerror messageBiThe message, typed data, or hash to sign.AeThe original message.AdThe message to hash.C`Return the message for this <code>Reason</code>.AoThe message supplied by the API11CkFuzzed selectors metrics collected during the invariant \xe2\x80\xa6000CfThe expected <em>minimum</em> gas supplied to the call9BcImplements the MSTORE8 instruction.0CaCompute $\\mod{\\mathtt{self} \xe2\x8b\x85 \\mathtt{rhs}}_\xe2\x80\xa60CeComputes <code>lhs *= a</code> and returns the carry.0A`The network name0AoReturns an empty mutable slice.0BhCreates a new raw <code>Bytecode</code>.CnCreates a new EIP-7702 bytecode or returns None if the raw \xe2\x80\xa610BbSeal the inner item, by reference.0mDisable CORS.0CgTreat the message as a raw 32-byte hash and sign it \xe2\x80\xa6DhTests if at least one bit is cleared to <code>0</code> in the bit-slice.0DaTests if every bit is cleared to <code>0</code> in the bit-slice.0AhEnable Odyssey features.AgEnable Odyssey features11AiEnables Odyssey features.CnSet whether to enable Odyssey features. For description of \xe2\x80\xa6BeSet whether to enable call isolation.BcWhether to enable Odyssey features.00210000210Bcwhether to enable Odyssey features.0BfSkip the https://openchain.xyz lookup.BmDo not install dependencies from the network.AjDo not access the network.0CnOffline mode, if set, network access (downloading solc) is \xe2\x80\xa6EiReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</codeeInvoked for every incoming <code>RpcMethodCall</code>EiReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</codehGet the output directoryAkThe test outcome to report.BlReturns the number of output stack elements.000DbBLS12-381 pairing precompile. More details in <code>pairing</code>CkPairing call expects 384*k (k being a positive integer) \xe2\x80\xa610AlThe path ID for this branch.00Ahall pending transactionsAhpending messages to sendClGets a raw pointer to the memory location containing the \xe2\x80\xa6CkGets a raw pointer to the memory element containing the \xe2\x80\xa610BoCompute $\\mod{\\mathtt{self}^{\\mathtt{rhs}}}_\xe2\x80\xa60CkInsert common values into the dictionary at initialization.mSymbol ExportClPath to a directory containing Solidity files to import, \xe2\x80\xa61AkBuilds the coverage report.D`all states present, used to enforce <code>in_memory_limit</code>ElReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</codegThe selected profile. <strong>(default: <em>default</em> <code>default</code>)</strong>Bothe profile tag: <code>[profile.default]</code>AgThe profile to be fixed0CjReturns the <code>Project</code> for the current workspace0CcServes as the entrypoint for obtaining the project.BhThe project used to launch this command.EfReturns a <code>figment::Provider</code> for this <code>InlineConfig</code> at the \xe2\x80\xa6BjPublishes a raw transaction to the networkCbThe foldhash implementation optimized for quality.0AaThe raw log data.00CkIterates over non-overlapping subslices of a bit-slice, \xe2\x80\xa60CfReads next 8 bits as signed integer from the bytecode.0ChReads next 8 bits as unsigned integer from the bytecode.0CiAcceptable revert parameters for the next call, to be \xe2\x80\xa6gExampleBbThe underlying transaction receiptDcReturns the <code>Receive</code> function of this contract, if any.000000000ClRecovers the Ethereum address which was used to sign the \xe2\x80\xa60CfRecurses over itself, appending all the idents and \xe2\x80\xa6BhTransactions removed from the Ready poolAlWhether the log was removed.00000AfSingle-Bit ReplacementDjMoves <code>src</code> into the referenced bit, returning the previous \xe2\x80\xa6DjReplaces the bit at <code>*self</code> with a new value, returning the \xe2\x80\xa6CkWrites a new value into a bit, and returns its previous \xe2\x80\xa6CmAdds a value to the set, replacing the existing value, if \xe2\x80\xa60432100AiJSON-RPC request bindingsCnSends a request using the underlying transport. If this is \xe2\x80\xa6DgEnsures that the bit-vector has allocation capacity for <em>at </em>\xe2\x80\xa6DkReserves capacity for at least <code>additional</code> more elements to \xe2\x80\xa6DbReserve capacity for <code>additional</code> more key-value pairs.CiReserve capacity for <code>additional</code> more values.2DjReserves capacity for at least <code>additional</code> bytes more than \xe2\x80\xa6432130CeResolve the function signatures for the extracted \xe2\x80\xa6AmHelper for resolving env varsBiReturns the url or config this type holdsAoReturns the url this type holdsBfReturns the auth token this type holdsCkResolves environment variables in fields into their raw \xe2\x80\xa6CiReturns the etherscan config required to create a client.AoReturns the key this type holdsCgThe results of all test suites by their identifier (\xe2\x80\xa6CnScan through each key-value pair in the map and keep those \xe2\x80\xa6CkScan through each value in the set and keep those where the10Berequest retries for spurious networksBmNumber of attempts for retrying verification.AfThe number of retries.BhReturn values from the execution result.BjReverses the order of bits in a bit-slice.CkReverses the order of the map\xe2\x80\x99s key-value pairs in place.CbReverses the order of the set\xe2\x80\x99s values in place.210AaChanges to revertAfState revert tracking.11BiReturns number of invariant test reverts.AhTotal number of reverts.AmNumber of reverted fuzz calls434421021001BkReturns the first RPC URL of this sequence.BdThe rpc url to use for verification.CjIterates over mutable subslices separated by bits that \xe2\x80\xa60AlRun the Bn128 add precompile0CbExplicitly re-run all tests when a change is made.AlRun the Bn128 mul precompile0BcEthereum sepolia list of hardforks.AjReturns the sepolia chain.CcJoin handles (one per socket) for the Anvil server.Chcontains the background service that drives the node \xe2\x80\xa6mChiselSessionA`A Chisel SessionAoSets a specific bit to a value.0B`Replaces the underlying command.CfSet variables from an environment for the relevant \xe2\x80\xa600BeResizes a bit-vector to a new length.0BePrints a formatted warning to stderr.BlPerform shallow clones instead of deep ones.AnTrue to perform shallow clonesBbReturns the shimmer testnet chain.Aaavailable signersCmLocks inner Mutex and returns all signer addresses in the \xe2\x80\xa600AjContains unlocked signers.DkWhether the test case was skipped. <code>reason</code> will contain the \xe2\x80\xa6BnReturns the number of tests that were skipped.0BoWhether setup and entire test suite is skipped.22DhConfiguration specific to the <code>forge soldeer</code> command and \xe2\x80\xa6AfSoldeer custom configsCgSort the map\xe2\x80\x99s key-value pairs in place using the \xe2\x80\xa6CiSort the set\xe2\x80\x99s values in place using the comparison \xe2\x80\xa610AfThe versioned sources.0AnPath to Solidity source files.0C`Source files of the contracts. Used by debugger.AdMap of source files.BbSets the sources for the debugger.14AmReturns the configured specidAcHardfork identifierB`Returns the spec id of the chainBaThe current EVM specification ID.BiReturns the current EVM specification ID.BcReturns the spec id of the executorAiSets the EVM spec to use.AhReturns the EVM spec ID.AfThe configured spec id6lEVM version.65432172lThe spec ID.40528BbThe SpecId of the current backend.30CgProject source dir, used to determine if referenced \xe2\x80\xa6CjReturns source map, source code and source name of the \xe2\x80\xa6BkThe initial gas stipend for the transaction00000AlIn-memory blockchain storageCaunderlying storage that supports concurrent readsAhContains the cached dataAjaccessor for block storageA`Returns the slotBgGets storage value of address at index.mStorage cache111BmGet the value in an account\xe2\x80\x99s storage slot.BfGet storage value of address at index.mStorage slotsCmContains both original and present state. When extracting \xe2\x80\xa6A`Account storage.AhStorage slots to revert.BiStorage contains both old and new account3BnVector of <strong>not</strong> sorted storage.AgStorage key value pairsBcVector of storage with its address.54346210537;AfReturns the DB storageCcReturns the map that holds the storage related info=<==;:98765984327656843275==101010AbCheatcode structs.0CkFilter children items for [ParseSource::$variant] variants.1B`Whether the call was successful.CmWhether the test case was successful. This means that the \xe2\x80\xa6CmStatus of the transaction, retrieved from the transaction \xe2\x80\xa6AfWas the run a success?123111123ClFormats the aggregated summary of all test suites into a \xe2\x80\xa6BkReturns the summary of a single test suite.AiPrint test summary table.AlSupport for external crates.0BiReturns the sync status, always be fails.CbContracts identified as targets during a fuzz run.00CjNumber of threads to use. Specifying 0 defaults to the \xe2\x80\xa600AnMax concurrent threads to use.orequest timeoutBdTimeout for sending the transaction.AoReturns the configured timeout.CgIf non-zero, tests are run in a subprocess and each \xe2\x80\xa6BmTimeout to use for broadcasting transactions.210AjEnables a request timeout.AiThe timeout for requests.CdOptional timeout (in seconds) for each property testCfOptional timeout (in seconds) for each invariant test.1065BiThe time we wait if we hit the rate limitBhConverts a number of one base to anotherCkFormats self into a base, specifying whether to add the \xe2\x80\xa6CkReturns the HaltReason value the EVM has experienced an \xe2\x80\xa60BbReturns the inner ECDSA signature.0BlConverts an eth amount into a specified unitB`Converts hex input to UTF-8 textCnTrue if gas metering was resumed or reset during the test. \xe2\x80\xa6CgSet whether to enable the tracer. Revert diagnostic \xe2\x80\xa600AhStarts the debugger TUI.ClTries to create a <code>Vec</code> containing the arguments.0AeThe transaction hash.00CkTransaction information instructions (ORIGIN, GASPRICE, \xe2\x80\xa60CmCalled when a new transaction is sent. Displays a spinner \xe2\x80\xa6BcReturns the type of the transactionAmReturns the transaction type.A`Transaction typeAhSet the transaction type122210122C`Unknown opcode. This opcode halts the execution.0Cetracks the transactions that get unlocked by this \xe2\x80\xa6CaShortcut for <code>(unwrap(a), unwrap(b))</code>.CaUtility functions and helpers for instruction \xe2\x80\xa60CdSet to non-zero values to cause proptest to emit \xe2\x80\xa600CnVersion of the EIP-7702 bytecode. Currently only version 0 \xe2\x80\xa6AaCompiler version.1AlFoundry version information.AmThe version of the dependencyCmReturns the configured wallets if available, else creates \xe2\x80\xa6A`Set the wallets.ChUnlocked wallets used in scripts and testing of scripts.BmThe wallets to set in the cheatcodes context.13210113131020CfIterates over consecutive windowing subslices in a \xe2\x80\xa60BoCreates a new context with a new database type.0CjSets TxKind for this builder and changes state to ToState.CbCreates a new context with a new transaction type.0AmWrites newline to the buffer.DbApparent value, that is <strong>not</strong> actually transferred.000CkGenerate an artifact file, that can be used to deploy a \xe2\x80\xa6AnRepresents an authorized call.00AoThe Blake2F precompile address.BnThe <code>0x49</code> (\xe2\x80\x9cBLOBHASH\xe2\x80\x9d) opcode.000D`For a binary op y in BinOpKind (\xe2\x80\x9c+\xe2\x80\x9d, \xe2\x80\x9c-\xe2\x80\x9d, \xe2\x80\x9c&gt;=\xe2\x80\x9d\xe2\x80\xa6BiCLI arguments for <code>cast bind</code>.BjCLI arguments for <code>forge bind</code>.CjGenerate bindings for serialization/deserialization of \xe2\x80\xa6AmBit-Precision Array Immediate000AhC-Style Bit-Field Access0AgIn-Element Bit Ordering000AfBit-Addressable Memory000kBit Storage000AeThe block environment000BjMain bytecode structure with all variants.00AmBytecode implementation type.011100Ba<code>bytecode</code> is unlinked0BnThe <code>0xF2</code> (\xe2\x80\x9cCALLCODE\xe2\x80\x9d) opcode.000AlDefault chain id of the node0BnThe <code>0x39</code> (\xe2\x80\x9cCODECOPY\xe2\x80\x9d) opcode.000BnThe <code>0x38</code> (\xe2\x80\x9cCODESIZE\xe2\x80\x9d) opcode.000BnThe <code>0x41</code> (\xe2\x80\x9cCOINBASE\xe2\x80\x9d) opcode.000BiCLI arguments for <code>cast call</code>.Ae<code>CALLCODE</code>0BaRepresents a call code operation.BdThe account was called via callcode.220100001BcA unified representation of a call.00DjSet calldata (<code>msg.data</code>) for the current session (appended \xe2\x80\xa6AcExit using \xe2\x80\x98q\xe2\x80\x99.0B`Get the codehash for an account.BlGet the runtime bytecode size of a contract.BhThe collection of natspec Comment items.0AbA list of comments0AcCompiler utilities.CaContinues operation without decrementing retries.BfCode for the top level of the contractAkSource contract definition.0Bn<code>forge coverage</code> execution context.0AjGenerate coverage reports.1111111CmThe canonical dangling pointer. This selects the starting \xe2\x80\xa60BmDAO Fork hard fork Activated at block 1920000BkString identifier for the DAO Fork hardfork10AgEVM database interface.0BjDatabase type that is used in the journal.nDatabase error12122221012212CjAccount was created and on revert we need to remove it \xe2\x80\xa60CnHelper which manages the deployment transaction of a smart \xe2\x80\xa6DhA single entry in a directory listing. Returned by <code>readDir</code>.00000CbA Doc Block comment (e.g. <code>/** ... */</code>)CjThe wrapper around the ParseItem containing additional \xe2\x80\xa60nMain EVM error0DgAn extension trait for <code>std::error::Error</code> for ABI encoding.DdThe <code>\\</code> in an escape sequence <code>&quot;\\n&quot;</code>BgEstimate the gas cost of a transaction.BbFrame implementation for Ethereum.0CiVarious numerical ethereum types used for pretty printing0CbEVM State is a mapping from addresses to accounts.0BaTransaction successfully executedmEVM executor.00AdMemory was extended.0BhThe function is only visible externally.000BgFrontier hard fork Activated at block 0BkString identifier for the Frontier hardfork10Da<code>Hasher</code> optimized for hashing fixed-size byte arrays.0CkGet the function signatures for the given selector from \xe2\x80\xa6AiConvert UTF8 text to hex.mFrontier: \xe2\x80\xa6AgA function in the code.CeAn Ethereum ABI function pointer, 24 bytes in length.AbSolidity function.Ag(name, params, returns)BaCode for the \xe2\x80\x9crun()\xe2\x80\x9d function432AkSource function definition.033AdA function selector.6AoData of a single fuzz test case00Fm<code>test*</code>, with arguments. <code>should_fail</code> is <code>true</code> for <code>testFail*</code>.CmA speedy hash algorithm for use within rustc. The hashmap \xe2\x80\xa6000BnThe <code>0x45</code> (\xe2\x80\x9cGASLIMIT\xe2\x80\x9d) opcode.000BnThe <code>0x3A</code> (\xe2\x80\x9cGASPRICE\xe2\x80\x9d) opcode.000C`Gas cost of the KZG point evaluation precompile.0DeWrapper for the config\xe2\x80\x99s <code>gas_limit</code> value necessary \xe2\x80\xa6AjGet the current gas price.BmRepresents the outcome of a gas price requestAhGenerate scaffold files.AePrints the zero hash.B`The Identity precompile address.AhThe default IPC endpointBmIstanbul hard fork Activated at block 9069000BkString identifier for the Istanbul hardforkAhIstanbul spec introducedBlBn128 add precompile with ISTANBUL gas rulesBlBn128 mul precompile with ISTANBUL gas rulesBmBn128 pair precompile with ISTANBUL gas rules543210AoSimple in-memory revm::Database000Bo<code>IndexMap</code> using the default hasher.CkA hash table where the iteration order of the key-value \xe2\x80\xa60100Bo<code>IndexSet</code> using the default hasher.CiA hash set where the iteration order of the values is \xe2\x80\xa60100BjCLI arguments for <code>forge init</code>.BfTrait for fetching inputs of the call.0AjStyle of uint/int256 types0CaInternal execution result not exposed externally.CmThe cheatcode is only used internally for foundry testing \xe2\x80\xa6AhOnly visible internally.210AfInternal parser error.02121AcBit-Array IterationBgAn iterator over a <code>BitBox</code>.0CnAn owning iterator over the entries of a <code>HashMap</code>.D`An owning iterator over the entries of an <code>IndexMap</code>.CnAn owning iterator over the items of an <code>IndexSet</code>.ClAn owning iterator over the items of a <code>HashSet</code>.5443210CkAn owning iterator over the keys of a <code>HashMap</code>.CmAn owning iterator over the keys of an <code>IndexMap</code>.10BlTrait for converting types into U256 values.0CbNo code on either side of each line of the commentmIstanbul: \xe2\x80\xa6D`A mutable iterator over the entries of an <code>IndexMap</code>.0kBit Seeking0BnThe <code>0x5B</code> (\xe2\x80\x9cJUMPDEST\xe2\x80\x9d) opcode.0BbGas cost for JUMPDEST instruction.110BgGas cost per topic in LOG instructions.0BjCLI arguments for <code>forge lint</code>.C`CLI arguments for <code>cast wallet list</code>.CkA lockfile handler that keeps track of the dependencies \xe2\x80\xa60BiCLI arguments for <code>cast logs</code>.DdThe inclusive maximum length of a <code>BitSlice&lt;_, T&gt;</code>.0DiThe inclusive maximum length that a <code>[T]</code> slice can be for \xe2\x80\xa60ChThe minimum Solc version for outputting storage layouts.AdThe markdown format.0BhTrait for Interpreter memory operations.0BeCalculate the ENS namehash of a name.oLess than zero.0iNew frame000BmRetrieves the Anvil node configuration paramsBnThe call is expected to be made at least once.BjThe nonce field is set on the transaction.BbExisting slot with equivalent key.AbAn occupied entry.0110100110CmA potentially initialized frame. Used when initializing a \xe2\x80\xa600000AaOut of gas error.0B`Not enough gas to extend memory.Cjout of gas is the main error. Others are here just for \xe2\x80\xa6022100BnThe value is too large to fit the target type.C`The Uint value is too large for the target type.10AnGreater than or equal to zero.0BgUse the type defined in the source codeBnUse the underscores defined in the source code0BmUse quotation mark defined in the source codeAkPreserve the original style32210AnGas cost for RETF instruction.0CiDisplay the raw value of a variable\xe2\x80\x99s stack allocation.CgProvides additional path context for the file whose \xe2\x80\xa60D`Provides additional path context for <code>fs::read_link</code>.0DhGenerates the EIP-712 <code>encodeType</code> string for a given struct.AdSynchronous responseCkAccount was changed and on revert we need to put old state.0CnAdjusts the block that\xe2\x80\x99s being forked, by creating a new \xe2\x80\xa6AbRollback the chainAkRepresents a JSON-RPC errorCnShanghai hard fork Activated at block 17034870 (Timestamp: \xe2\x80\xa6BkString identifier for the Shanghai hardfork10AgSolidity language name.mSome spinnersAbSealeable objects.0CmSolidity contract functions are addressed using the first \xe2\x80\xa6000CjOriginal sequence size and sequence of calls used as a \xe2\x80\xa600AlSets the nonce of an addressAbSeverity of a lintmShanghai: \xe2\x80\xa6DfA <code>Write</code>able object, either with or without color support.CkShutdowns the entire <code>MultiForkHandler</code>, see \xe2\x80\xa6CfFuture that resolves when the shutdown event has firedBlGenerate event signatures from event string.AlEIP-7702 sign authorization.Bn<code>forge snapshot</code> execution context.0CaCreate a gas snapshot of each test\xe2\x80\x99s gas usage.1111111AmSolidity programming languageAmExclusive Bit-Slice Splitting0BjCLI arguments for <code>forge test</code>.AfVarious types of testsBiConvert a number to a hex-encoded int256.ChA trait for converting a value to a <code>String</code>.0CmA convenience wrapper around a TOML document and the path \xe2\x80\xa6BfCode exists to the left of the commentClConcrete value, transferred from caller to callee at the \xe2\x80\xa6000BjCLI arguments for <code>forge tree</code>.oTerminal width.BmA unique identifying marker for a transactionCaThe sequence number of all existing transactions.000CkConvenience enum for internal signalling of transaction \xe2\x80\xa6Em<code>test*</code>. <code>should_fail</code> is <code>true</code> for <code>testFail*</code>.EhSend via <code>eth_sendTransaction</code> and rely on the  <code>from</code> address \xe2\x80\xa6AeAll hardfork variantsAkSource variable definition.0CdContainer for all the <code>Vm</code> custom errors.00000CaPhantom data to hold the generic type parameters.0CmPath to file containing the contract\xe2\x80\x99s JSON ABI. It\xe2\x80\x99s \xe2\x80\xa600EbComputes the absolute difference between <code>self</code> and <code>other</code>.0BfThe last access time of this metadata.00000BaRecorded storage reads and writes000000AjWhat accessed the account.00000CaNumber of dev accounts to generate and configure.CbAll accounts that should be initialised at genesisBnreturns the available accounts for this signerAiReturns the accounts listAmNumber of accounts to displayCiAccount info where None means it is not existing. Not \xe2\x80\xa6BfBlock state account with account state0CkVector of <strong>not</strong> sorted accounts information.CbVector of account with removed contracts bytecode.2103AgReturns the DB accountsCcReturns the map that holds the account related info545432432101010BeAdds a coverage item to this summary.00B`Adds a test file to the project.Aotimestamp when the tx was addedDjComputes wrapping <code>lhs += a * b</code> when all arguments are the \xe2\x80\xa60CkGets the address for a given private key. Function with \xe2\x80\xa600000ChProduces bit-slice view(s) with different underlying \xe2\x80\xa60CnAll coverage items for the codebase, keyed by the compiler \xe2\x80\xa600BcReturns the apparent value, if any.0BbReturns the CLI arguments mutably.AjParses a format specifier.BhArtifact string to pass into cheatcodes.BoConvert a slice to an array of a specific size.0ChReturns the byte-array representation of this signature.CnReturns a byte slice of this <code>String</code>\xe2\x80\x99s contents.10BmReturns the event selector if it is an event.BkConversion to isize with overflow checking.0AhView the array of limbs.0CbSee <code>Uint::as_limbs</code> for documentation.110CgReturns the remaining bytes in the bytecode as a slice.BcGets the raw bytes of the jump map.ChReturns a bit-slice containing the entire bit-array. \xe2\x80\xa6CnReturns a slice containing the entire array. Equivalent to \xe2\x80\xa6CfReturns a slice of all the key-value pairs in the map.BmReturns a slice of all the values in the set.CiReturns a slice of the remaining entries in the iterator.000000065432100000000AnReturns the opcode as a usize.BkConversion to usize with overflow checking.10AkMaps a rpc url to a backendA`Default base feeAlReturns the current base feeAoThe basefee of the forked blockCbTracks the base fee for the next block post London3A`The output base.A`The output base,1C`Path to where the contract artifacts are stored.CeCreates a new tokio runtime and blocks on the future.ClBlock on a future using the current tokio runtime on the \xe2\x80\xa60CgCreates a new EIP-3155 tracer with the given output \xe2\x80\xa60CgReturns the dynamic length of this number in bytes, \xe2\x80\xa60AeReturns the bytecode.AiThe hex-encoded bytecode.0ClModule that contains the bytecode enum with all variants \xe2\x80\xa6BdReturns a reference to the bytecode.0AiGets bytecode from state.AhBytecode being executed.05322100B`Bytecode of the target contract.BoThe <code>forge verify-bytecode</code> command.B`Runtime bytecode of the contractClReturns reference to bytes of contract creation code, if \xe2\x80\xa6AgContract creation code.:CgCached Database layer, ensures that changes are not \xe2\x80\xa6BoCalled when a call to a contract has concluded.0AmSpend all gas if call failed.110CmPerforms a raw call to an account on the current state of \xe2\x80\xa600CmPerforms a call to an account on the current state of the \xe2\x80\xa600AiThe ABI-encoded calldata.00mThe calldata.AdThe data to provide.BdThe calldata used for this fuzz testCgOptionally set calldata for the REPL contract execution21BhCalldata to pass to the target contract.BfThe partial calldata to match for mockAeCalldata of the call.0BfFunction calldata for invariant check.65BoGets the allocation capacity, measured in bits.CkReturns the number of elements the map can hold without \xe2\x80\xa6CjReturn the number of elements the map can hold without \xe2\x80\xa6CjReturn the number of elements the set can hold without \xe2\x80\xa6CkReturns the number of elements the set can hold without \xe2\x80\xa6ChReturns this <code>String</code>\xe2\x80\x99s capacity, in bytes.543210BhReturns the path to the cast executable.AiChain ID of the EVM chainmThe chain ID.BdReturns the client coinbase address.BiReturns the chain ID used for transaction3CfEIP-155 chain ID to encode the address using EIP-1191.CmReturns the chain ID of the EVM that is compared with the \xe2\x80\xa6BmChain Id is optional for legacy transactions.CnChain ID of the EVM. Used in CHAINID opcode and transaction\xe2\x80\xa6AoThe chain ID of the transaction31A`Set the chain ID1BcReturns authorization the chain id.4CdGet the <code>chain_id</code> for the authorization.BbThe chain ID of the authorization.2767BkChain id, calls ContextTr::cfg().chain_id()0mThe chain id.BfReturns the provided chain id, if any.:987:86759435:9:22BfThe <code>CHAINID</code> opcode value.0BbChildren node indexes in the arena0oChildren items.0BiHolds mapping child (slots =&gt; slots[])2CjCreate a chunk given a string and the location informationAdClassify a function.DgReturns the env args without the <code>--watch</code> flag from the \xe2\x80\xa6BdImplements the CODECOPY instruction.0h#ExamplegExampleBdImplements the CODESIZE instruction.0BdReturns the client coinbase address.BdImplements the COINBASE instruction.0nItem comments.BdInitial comments from solang parser.01A`Parsed comments.0ClReturns configuration for a compiler to use when setting \xe2\x80\xa6CiCompression function F takes as an argument the state \xe2\x80\xa60CbCompile-time equality. NOT constant-time equality.0DiReturns <code>true</code> if <code>self</code> equals <code>other</code>.111AiEquality at compile-time.2212220CjReturns true if this pool already contains the transaction0CfReturns true if given transaction is part of the queueCeReturns true if the transaction is part of the queue.CmWhether all set bits in a source flags value are also set \xe2\x80\xa6CkTests if a given bit-pointer is contained within the range.CfTests if the bit-slice contains the given sequence \xe2\x80\xa6BeCheck if the address is a precompile.BlReturns whether the address is a precompile.EbReturn <code>true</code> if an equivalent to <code>value</code> exists in the set.CfReturns <code>true</code> if the set contains a value.ClReturns true if this bloom filter is a possible superset \xe2\x80\xa6BbIs the given address a precompile.854763210CmReturns the contents of the comment without the start and \xe2\x80\xa6BiThe target contract, which can be one of:CgAn Ethereum address, for which the artifact will be \xe2\x80\xa6CgAn Ethereum address, for which the bytecode will be \xe2\x80\xa60AhCollects contracts info.CgContract operations (CALL, CREATE, DELEGATECALL, etc.).BeThe contract this address represents.BbReturns the ABI for this contract.AiThe data of the contract.EcThe contract identifier in the form <code>&lt;path&gt;:&lt;contractname&gt;</code>.CiThe identifier of the contract to inspect in the form \xe2\x80\xa6CnThe name of the contract to upload selectors for. Can also \xe2\x80\xa6BoThe name of the contract to list selectors for.4875633555BcThe parent contract of the natspec.0666667ClMarks the slots of an account and the account address as \xe2\x80\xa600000BlThe coverage info collected during the call.AaCoverage reports.AkCoverage info during setup.222BcReturns the darwinia mainnet chain.DjReturns the path to <code>foundry</code>\xe2\x80\x99s data directory inside the \xe2\x80\xa6CcReturns a mutable reference to the underlying data.CjReturns a mutable reference to the underlying data buffer.10CcThis also holds a handle to the underlying databasehDatabase00C`Optional database that we use to fetch data from00000BnA revm database that forks off a remote client222111111000CgSets an address\xe2\x80\x99 balance. Function with signature \xe2\x80\xa600000AhDebugger implementation.AnThe number of decimals to use.0ChExtends the identified contracts from multiple decoders.BaAddress of the contract deployer.CmThe address of the deployer, i.e., sender of the creation \xe2\x80\xa6Chthe actual deployer, exposed for overriding the defaultsBfThe address that deployed the contractCiPrint info about the functions which were uploaded or \xe2\x80\xa6BbPrint detailed test summary table.CnDispatches an input as a command via Self::dispatch_command\xe2\x80\xa6BmComputes <code>self / rhs</code> rounding up.0BdReturns whether to color the output.BjDuration that was waited before timing outCkWall clock time it took to execute all tests in this suite.AnEmpty database implementation.0AhFinishes initialization.0Acendpoint url or env0CdSets an address\xe2\x80\x99 code. Function with signature \xe2\x80\xa600000AgMine blocks, instantly.BjAll env settings as configured by the userBfHow the evm was configured by the user0kEVM OptionsAbEVM configuration.22322233AcThe EVM spec to useBaExchange two values on the stack.BbExchanges two values on the stack.10DdList of <code>contract_path:contract_name</code> which are to be \xe2\x80\xa6AoReturns the excluded addresses.01011CgThe directory in which this test executable is running.hExecutorlThe ExecutorAaThe EVM executor.BoCreates a new executor with this configuration.11A`The EVM executorAjThe exit code of the call.00000Bi<code>EXP</code> opcode cost calculation.0CmReturns an iterator over all individual failing tests and \xe2\x80\xa60DdReturns the <code>Fallback</code> function of this contract, if any.000000000AmFormat the item\xe2\x80\x99s filename.AoThe PC of the final instruction000CnFinalize execution, clearing the journal and returning the \xe2\x80\xa6CkClear current journal resetting it to initial state and \xe2\x80\xa6110DiTake the <code>EvmState</code> and clears the journal by resetting it \xe2\x80\xa61AjPad and squeeze the state.2CiFinalizes the gas report by calculating the min, max, \xe2\x80\xa6434432313BaA set of fixtures to be generated000AmFunction-level configuration.0DkEvaluate the provided expression for both <code>Either::Left</code> and \xe2\x80\xa60CjFetch state over a remote endpoint instead of starting \xe2\x80\xa60ClFetch state over a remote instead of starting from empty \xe2\x80\xa60ChBuild a new inline config with an iterator of inline \xe2\x80\xa6DhReturns a new <code>TermSettings</code>, configured from the current \xe2\x80\xa61AgAccess an entry by key.000DjConstructs a mutable <code>BitPtr</code> to the zeroth bit in a single \xe2\x80\xa60CbConstructs a bit-box from a raw bit-slice pointer.CiCoerces an unsigned integer into a signed one. If the \xe2\x80\xa6BdParses a 65-byte long raw signature.210DhCreate a new <code>TraceResult</code> from a <code>RawCallResult</code>.DgConstructs a <code>BitPtr</code> to the zeroth bit in a single element.0hExamplesDbGenerates a new <code>SharedSeed</code> from a single 64-bit seed.CbCompute the Lehmer update matrix for small values.10CeConverts a regular vector in-place into a bit-vector.0AoConverts wei into an eth amountChThe function annotated with the natspec. None if the \xe2\x80\xa60AjThe gas limit of the call.00000AcCalculate gas cost.0B`Determines the percentage changeC`Cumulative gas used by all executed transactionsBcGas used by this transaction alone.AeReturns the gas used.AmGas used by the transaction.sAlGas used by the transaction.0AjGas used by the precompile0AoThe total gas cost of the call.AiThe gas used for the callBeAmount of gas used in the transactionBaReturns the gas used by the test.76554432BgThe total gas used in the gas snapshot.34BdImplements the GASLIMIT instruction.0BdImplements the GASPRICE instruction.0BaGenerates a random hex encoded IdBeReturns the byte at the given offset.0AoReturns the code of the addressCjReturns the code at given address at given time (block \xe2\x80\xa6BcReturns the configured fork, if anyBdReturns the configured fork, if any.BlReturns the corresponding fork if it exists.00CkHelper function that returns the CreateFork to use, if any.BoReturns the underlying fork mapped to the index21B`Return item index, key and valueAkReturn item index and value10CnGiven a function signature string, it tries to parse it as \xe2\x80\xa6AlGet next uninitialized item.0ChReturns a U256 of the memory region at the given offset.0CmReturns a 32-byte slice of the memory region at the given \xe2\x80\xa60CeRuns <code>git init</code> inside the project\xe2\x80\x99s dirAdAll active handlers.0AcThe hardfork to useAhThe EVM hardfork to use.1CjA hash map implemented with quadratic probing and SIMD \xe2\x80\xa60mGet the hash.0EdA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.0ClReturns the number of hashes per second that the node is \xe2\x80\xa6AkThe wallet derivation path.00EhConverts a Hardhat <code>console.log</code> call to a DSTest <code>log(string)</code>\xe2\x80\xa6Ckexisting logs that matched the filter when the listener \xe2\x80\xa6BgPath to user provided welcome markdown.BcHostname for serving documentation.BeCompares two 256-bit signed integers.0CaPerforms signed division of two 256-bit integers.0BoPerforms signed modulo of two 256-bit integers.0CjIdentify unknown addresses in the specified call trace \xe2\x80\xa6AoIdentifies a list of selectors.1001AkIdentity precompile returns0AnThe document display identity.0BfAll transactions included in the block0CaReturns a stream of incoming connection handlers.CbIncoming requests from the <code>MultiFork</code>.0BnApply the callback indented by the indent sizeCnCreate an <code>IndexMap</code> from a list of key-value pairs0CeCreate an <code>IndexSet</code> from a list of values0CkThe interval to use when determining the next block\xe2\x80\x99s \xe2\x80\xa6CfThe interval this fixed block time miner operates withAjTake ownership of the key.CeTakes ownership of the key, leaving the entry vacant.CmConverts into a mutable reference to the entry\xe2\x80\x99s key in \xe2\x80\xa6210DkConverts the <code>OccupiedEntry</code> into a mutable reference to the \xe2\x80\xa6ClConverts into a mutable reference to the entry\xe2\x80\x99s value \xe2\x80\xa6001000ChConsumes the bit-box, returning a raw bit-slice pointer.ClReturns the signed integer as a unsigned integer. If the \xe2\x80\xa610DiThis is a hack to work around <code>IntoUrl</code>\xe2\x80\x99s sealed private \xe2\x80\xa6DhConverts a bit-vector into a <code>Vec</code> of its underlying storage.0DiComputes the inverse modulo $2^{\\mathtt{BITS}}$ of <code>self</code>, \xe2\x80\xa60CdReturns the path of the launched ipc server, if any.lThe ipc path0BmThe future that joins the ipc server, if any.BiReturns true if this is the anvil preset.BeReturns whether this type is an arrayCaReturns true if the option is <code>Remove</code>0CaReturns <code>true</code> if the hitmap is empty.BhReturns true if the byte range is empty.AoReturns if an account is empty.CmIs account empty, check if nonce and balance are zero and \xe2\x80\xa6BoWhether all bits in this flags value are unset.BfReturns whether the bytecode is empty.BfReturns true if the jump map is empty.BaTests whether the array is empty.CeTests if the range is empty (the distance between \xe2\x80\xa6BnTests if the bit-slice is empty (length zero).BaTests if the bit-vector is empty.CmIs account empty, if <code>true</code> account is not createdCjReturns <code>true</code> if the map contains no elements.BmReturns true if the map contains no elements.BmReturns true if the set contains no elements.CcReturns true if the map slice contains no elements.CcReturns true if the set slice contains no elements.CjReturns <code>true</code> if the set contains no elements.FeReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>\xe2\x80\xa6BeChecks whether bundle state is empty.DhReturns <code>true</code> if there is nothing to revert, by checking \xe2\x80\xa6CoReturns <code>true</code> if the current memory range is empty.BcReturns whether the stack is empty.CeReturns <code>true</code> if the call input is empty.BlReturns <code>true</code> if stack is empty.AnIs the precompiles list empty.CjReturns <code>true</code> if there are no set identifiers.BcReturns true if no forks are issuedBaWhether the MultiWallet is empty.CaReturns <code>true</code> if the hitmap is empty.BhReturns true if the byte range is empty.BaWhether this test suite is empty.BdReturns true if the filter is empty.0BfReturns whether the lockfile is empty.AoReturns if an account is empty.CmIs account empty, check if nonce and balance are zero and \xe2\x80\xa6BoWhether all bits in this flags value are unset.CmIs account empty, if <code>true</code> account is not createdBfReturns whether the bytecode is empty.BfReturns true if the jump map is empty.BaTests whether the array is empty.CeTests if the range is empty (the distance between \xe2\x80\xa6BnTests if the bit-slice is empty (length zero).BaTests if the bit-vector is empty.CjReturns <code>true</code> if the map contains no elements.BmReturns true if the map contains no elements.BmReturns true if the set contains no elements.CcReturns true if the map slice contains no elements.CcReturns true if the set slice contains no elements.CjReturns <code>true</code> if the set contains no elements.FeReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>\xe2\x80\xa6BeChecks whether bundle state is empty.DhReturns <code>true</code> if there is nothing to revert, by checking \xe2\x80\xa6CoReturns <code>true</code> if the current memory range is empty.BcReturns whether the stack is empty.CeReturns <code>true</code> if the call input is empty.BlReturns <code>true</code> if stack is empty.AnIs the precompiles list empty.BaWhether the MultiWallet is empty.CjReturns <code>true</code> if there are no set identifiers.BcReturns true if no forks are issuedBdReturns true if the buffer is empty.3DfReturns <code>true</code> if this type doesn\xe2\x80\x99t contain any endpointsDdReturns <code>true</code> if this type doesn\xe2\x80\x99t contain any configsBmReturns true if no permissions are configured44BnReturns <code>true</code> if the map is empty.0CaReturns <code>true</code> if the hitmap is empty.BhReturns true if the byte range is empty.8BgReturns whether the result is an error.CcReturns whether the instruction result is an error.CnReturns true if the status code is an error or revert, See \xe2\x80\xa6CdReturns <code>true</code> if the result is an error.3211CiReturns <code>true</code> if this function kind is known.DbReturns true if the file regex pattern match the <code>file</code>0BiWhether the <code>endpoint</code> matches0CiTests whether the given path matches this pattern or not.CmOnly returns a match if <em>no</em>  exclusion filter matchesBeReturns true if this a named variant.DbReturns whether the output mode is <code>OutputMode::Quiet</code>.DgReturns <code>true</code> if the verbosity level is <code>Quiet</code>.CfReturns true if the output mode is <code>Quiet</code>.CkReturns true if transaction has all requirements satisfied.CkReturn true if the value is the <code>Right</code> variant.0DbReturns <code>true</code> if the trace kind is <code>Setup</code>.0DlReturns <code>true</code> if this function is a <code>setUp</code> function.01DfChecks if <code>pc</code> is a valid jump destination. Uses cached \xe2\x80\xa6BgReturns true if the authority is valid.AoTrue if valid, false otherwise.120BeReturns whether watch mode is enabledDmReturns whether <code>FmtArgs</code> was configured with <code>--watch</code>DoReturns whether <code>BuildArgs</code> was configured with <code>--watch</code>0EeReturns whether <code>GasSnapshotArgs</code> was configured with <code>--watch</code>BfReturns precompiles for Istanbul spec.0CkProduces a mutable iterator over each bit in the bit-slice.BnMutably borrow the inner value as an iterator.CiAn iterator visiting all key-value pairs in arbitrary \xe2\x80\xa6CnReturn an iterator over the key-value pairs of the map, in \xe2\x80\xa6CjReturn an iterator over the key-value pairs of the map \xe2\x80\xa6BnReturns an mutable iterator over the lockfile.45321FdUpdates all <code>allowed_paths</code> and joins (<code>Path::join</code>) the <code>root</code> \xe2\x80\xa6CnInvoked when current step is a JUMPDEST preceded by a JUMP \xe2\x80\xa6BdImplements the JUMPDEST instruction.0AeThe mapping key type.DdThe contract language (<code>solidity</code> or <code>vyper</code>).CnGets a mutable reference to the last bit of the bit-slice, \xe2\x80\xa6CkGet the last key-value pair, with mutable access to the \xe2\x80\xa60100DgFinds the index of the last bit in the bit-slice set to <code>1</code>.0CmLeft-pads the given slice with zeroes until <code>LEN</code>.0CgLoads a storage slot from an address. Function with \xe2\x80\xa600000BhThe span of the error in the format: \xe2\x80\xa60Ajfoundry.lock handler type.nThe log index.00000Bi<code>LOG</code> opcode cost calculation.0DdEvent with signature <code>log_uint(uint256)</code> and selector \xe2\x80\xa600EfApply the function <code>f</code> on the value in the <code>Left</code> variant if \xe2\x80\xa60BmMatches on the result of a prompt for yes/no.AeAll provided filters.BgSequence that the address has to match.CnMax cost of the transaction It is the gas limit multiplied \xe2\x80\xa6BmReturns the average gas use of all test cases00000AgMines exactly one blockCnBIP39 mnemonic phrase used for generating accounts. Cannot \xe2\x80\xa6CmUse the mnemonic phrase of mnemonic file at the specified \xe2\x80\xa6CcThe last modification time listed in this metadata.00000AjMontgomery multiplication.BfComputes a * b * 2^(-BITS) mod modulus10AjThe new value of the slot.00000AnCreates a new call frame data.0CeCreate new halt action with the given result and gas.0DbCreates a new initialized <code>OutFrame</code> from a mutable \xe2\x80\xa60CfCreate new ParseItem with comments and formatted code.BjCreates a new lock file at the given path.AgCreate new stop action.0BgSeal the inner item with some function.C`Creates a new <code>SignaturesIdentifier</code>.10CgCreates a new shell with the given color choice and \xe2\x80\xa61BjReturns the environment for the next blockAnReturns the next index to use.AbDisable the cache.0AjBit-Pointer Sentinel Value0EjReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</codejReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</codejReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</codejReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</codeeRun an Optimism chainClOptimize signature to contain provided amount of leading \xe2\x80\xa6B`Activate the Solidity optimizer.0ChVyper optimization mode. \xe2\x80\x9cgas\xe2\x80\x9d, \xe2\x80\x9cnone\xe2\x80\x9d or \xe2\x80\x9c\xe2\x80\xa60B`Ordering of child calls and logs00BjThe path to the contract artifacts folder.0ChTriggers a hidden password prompt for the JSON keystore.DhPops <code>N</code> values from the stack and returns the top of the \xe2\x80\xa6CkPops n values from the stack and returns the top value. \xe2\x80\xa6CaPop N values from the stack and return top value.210BmReturns the current position in the bytecode.DkComputes the bit position corresponding to <code>self</code> under some \xe2\x80\xa6CkThe position of the log relative to subcalls within the \xe2\x80\xa62100BhReturns the priority of the transactionsAkpriority of the transactionBoThe list of all profiles defined in the config.AjOverall test run progress.0Cka list of added transactions that a pruned marker satisfiedBhtransactions promoted to the ready queueBdReturns a reference to the provider.CcProvider-related instantiation and usage utilities.BfMarkers that this transaction providesDfAppends a given string slice onto the end of this <code>String</code>.0BkUnformatted args used to call the function.00CjTrue if this metadata is for a readonly (unwritable) file.00000DcReads a big-endian <code>i16</code> from a <code>u8</code> pointer.CgReads next 16 bits as signed integer from the bytecode.10DcReads a big-endian <code>u16</code> from a <code>u8</code> pointer.CiReads next 16 bits as unsigned integer from the bytecode.10Aktransactions that are readyCeReturns the receipts of the block with the given hashCfProgress var with the count of confirmed transactions.BhReturns the name of the referenced item.CbReturns the total amount of gas that was refunded.0BcMarkers required by the transactionBlReturns all (alias -&gt; rpc_endpoint) pairsBcReturns all (alias -&gt; url) pairsAjJSON-RPC response bindingsBcThe return type for the mocked callkReturn dataB`Whether the call reverted or notCkIf this access reverted in either the current or parent \xe2\x80\xa6AkIf the access was reverted.102101010210CnThe allowed origin of the revert opcode; address(0) allows \xe2\x80\xa60BfContract expected to revert next call.0111BgAddress that reverted the call, if any.2BaReturn right value or given value0CmSeed used for the RNG. Set by using the PROPTEST_RNG_SEED \xe2\x80\xa600EfSets <code>block.height</code>. Function with signature <code>roll(uint256)</code> \xe2\x80\xa600000BfRollback the chain to a common height.DgConvenience function to add <code>--root project.root()</code> argumentCfPerforms an Ethereum JSON-RPC request to the given \xe2\x80\xa6CfInformation about RPC endpoints used during script \xe2\x80\xa6BiReturns all the RPC urls and their alias.000CgCode existing within the \xe2\x80\x9crun()\xe2\x80\x9d function\xe2\x80\x99s scopeAmRun the Bn128 pair precompile0AfThe function selector.BlReturns the call context\xe2\x80\x99s 4 byte selectorCfThe hex-encoded, \xe2\x80\x9c0x\xe2\x80\x9d-prefixed 4-byte function \xe2\x80\xa6AjThe selector to search for12112DiConfigures a server that handles <code>EthApi</code> related JSON-RPC \xe2\x80\xa6BfSets the number\xe2\x80\x99s base to format to.CdSets bits within a memory element to <code>1</code>.0CkSets the <code>byte</code> at the given <code>index</code>.0BcPopulate the transaction as CALL txBbSets the code of the given addressBeSets the balance of the given addressDcReplaces the <code>AccountInfo</code> bytecode and recalculates \xe2\x80\xa6BbSets bytecode and calculates hash.0BiUse it only if you know that acc is warm.1AkSet the code of an account.3221200AgWhether to enable CORS.CnSet memory from data. Our memory offset+len is expected to \xe2\x80\xa6CkSets memory data at given offset from data with a given \xe2\x80\xa610ChSets the spec id and returns true if the spec id was \xe2\x80\xa60DfSets the given U256 <code>value</code> to the memory region at the \xe2\x80\xa60DiSets the given 32-byte <code>value</code> to the memory region at the \xe2\x80\xa60CmSpecifies which lints to run based on severity. Overrides \xe2\x80\xa6BoSpecifies which lints to run based on severity.BiPrints a raw formatted message to stdout.CgFutures for shutdown signal Helper for shutdown signalsB`Removes next call from sequence.ChSimulates the payload by executing the calls in request.CmRuns a broadcastable transaction locally and persists its \xe2\x80\xa6CnSorts an array in ascending order. Function with signature \xe2\x80\xa600000BlSplits a bit-slice in two parts at an index.BgDivides one slice into two at an index.0100BmSplits the bytes into two at the given index.0DkUse for <code>OPCODE_INFO</code> to sets the number of stack inputs and \xe2\x80\xa60DfCalled after <code>step</code> when the instruction has been executed.0Bjcalculate last gas cost and remaining gas.110AjBig-Endian Integer Storing0Bl<code>Lsb0</code> Big-Endian Integer StoringBl<code>Msb0</code> Big-Endian Integer Storing2210AmLittle-Endian Integer Storing0Bo<code>Lsb0</code> Little-Endian Integer StoringBo<code>Msb0</code> Little-Endian Integer Storing2201DkStrategy to be used to generate calls from <code>target_reference</code>\xe2\x80\xa6000DjList of <code>contract_path:contract_name</code> along with selectors, \xe2\x80\xa6000AjHolds the temp dir object.AkThe template to start from.B`Converts hex data into text dataBbThe block height to stop query at.BmRemoves write permissions from a bit-pointer.0DiCreates a new <code>JournalInner</code> by cloning all internal state \xe2\x80\xa60BbReturns a copy of the environment.CjConsumes the builder and returns the recorded trace nodes.10110CkTransact the given transaction and finalize in a single \xe2\x80\xa600CmPerforms a call to an account on the current state of the \xe2\x80\xa6CkFetches the given transaction for the fork and executes \xe2\x80\xa622210CnCreate a transaction. The result of the transaction is not \xe2\x80\xa6211CbTransfers the balance from one account to another.CiTransfers balance from two accounts. Returns error if \xe2\x80\xa611BfReturns the transferred value, if any.21220BcReturns the Treasure mainnet chain.DkTrims leading and trailing whitespace from the given <code>string</code>\xe2\x80\xa600000DhShortens the bit-vector, keeping the first <code>new_len</code> bits \xe2\x80\xa6DeShortens the map, keeping the first <code>len</code> elements and \xe2\x80\xa6DeShortens the set, keeping the first <code>len</code> elements and \xe2\x80\xa6CjShortens this <code>String</code> to the specified length.3210BdParses a 65-byte long raw signature.EcConverts a <code>CString</code> into a <code>String</code> if it contains valid \xe2\x80\xa6ElConverts the given <code>Vec&lt;u8&gt;</code> into a  <code>String</code> if it contains \xe2\x80\xa6210DgMacro for unwrapping the left side of an <code>Either</code>, which \xe2\x80\xa60CfAttempts to acquire this lock with shared read access.CaWhether it\xe2\x80\x99s a try contract creation statement.EgSend via <code>eth_sendTransaction</code> using the <code>--from</code> argument or \xe2\x80\xa60EfSend via <code>eth_sendTransaction</code> using the <code>--sender</code> argument \xe2\x80\xa6BeAdds the <code>--unlocked</code> flagCkSpecify the solc version, or a path to a local solc, to \xe2\x80\xa60CeSupport for validating transactions at certain stagesCgValidates the execution environment and transaction \xe2\x80\xa6000AiThe variants of the enum.000AaVerifier options.BjThe contract verification provider to use.CnCreates a VM trace by walking over <code>CallTraceNode</code>s00AcGenerated warnings.CbWarnings gathered when loading the Config. See \xe2\x80\xa6EhSets <code>block.timestamp</code>. Function with signature <code>warp(uint256)</code>\xe2\x80\xa600000DkConditionally enable styling based on whether the <code>Condition</code>\xe2\x80\xa6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")